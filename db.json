{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/animated.styl","path":"css/layout/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/basic.styl","path":"css/layout/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/keep-theme.styl","path":"css/layout/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/markdown.styl","path":"css/layout/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/variables.styl","path":"css/layout/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/codeblock/code-theme.styl","path":"css/layout/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/codeblock/copy-code.styl","path":"css/layout/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/common/codeblock/highlight.styl","path":"css/layout/common/codeblock/highlight.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/build-mosquitto-on-freebsd.md","hash":"1a196b71f1dd66cc74085e589f0d968d41c19a27","modified":1617898074746},{"_id":"source/_posts/android-custom-dns.md","hash":"08589414b1b9464058df70bdaa47f9e347d65c69","modified":1609926976520},{"_id":"source/ip-tool/index.md","hash":"827900b89dfb6ee59ad9b36b2a653c4b17382e81","modified":1610801539514},{"_id":"source/_posts/build-opencore-amr.md","hash":"31f1f5b839eb88103f8a4518a37c5532435c571d","modified":1609926976520},{"_id":"source/_posts/build-postgresql12-on-freebsd12.md","hash":"e69f1bbbdf15e1e3b35995ba79e30e571dc9221b","modified":1609926976521},{"_id":"source/_posts/byebye-swoole.md","hash":"112aaccb286b7014cdfb1ba4f7e40016986bb4fc","modified":1609926976521},{"_id":"source/_posts/daemontools.md","hash":"1c32ce03712a62a609f74785c691a123a7017226","modified":1609926976522},{"_id":"source/_posts/damned-xcode.md","hash":"c2d0556fb989f993d92d10ff4d9d36f44be7ef66","modified":1609926976522},{"_id":"source/_posts/freebsd-disk-resize.md","hash":"3a066aab55a39b8841ab59b7ecce4a452da4e5d1","modified":1609926976522},{"_id":"source/_posts/ffmpeg-resize.md","hash":"996faeb4548b47e3e214c1ceb7662e504a73b53a","modified":1612166281771},{"_id":"source/_posts/freebsd-nginx-ipv6-with-tunnelbroker.md","hash":"bee7e5ec0a6743272de99044a66fa9f6cc46497a","modified":1612165977466},{"_id":"source/_posts/freebsd.md","hash":"95ec7a2ad240ee08ec28cd32bf77bebab0a659d6","modified":1609926976523},{"_id":"source/_posts/golang-udp-server.md","hash":"b7cbe87167278cfc57280c7e6ddc4f25c71c8774","modified":1609926976524},{"_id":"source/_posts/gin-with-websocket.md","hash":"e4ff6b8a076de51e014dc0432d86b3675f50a469","modified":1609926976523},{"_id":"source/_posts/electronic-commerce-law.md","hash":"ed889beed7512f1d1d2ebacfff8b4f05ed0c77d0","modified":1609993738693},{"_id":"source/_posts/kcp-tun-config.md","hash":"63154448fc6e7bf164d6b707182d0787292857d8","modified":1609926976525},{"_id":"source/_posts/iptables.md","hash":"e6499e5227c8056dc1d73fe3b8660ee1d9f56c97","modified":1609926976524},{"_id":"source/_posts/java-async-sync.md","hash":"5d47defb89cc376a4fc769e5d0d39e1ff657228c","modified":1609926976525},{"_id":"source/_posts/laravel-notification.md","hash":"7d381890d3ac1d30e94763f2a58db223e48c80ef","modified":1609926976525},{"_id":"source/_posts/laravel-queue.md","hash":"18851aa721f9ecb1bfda8fd212ce057baab7abb9","modified":1609926976526},{"_id":"source/_posts/mouse-pad.md","hash":"ad982db7ee01add636697871658266fdd1ed5c26","modified":1613535784883},{"_id":"source/_posts/linux-cmd.md","hash":"34656b601720bff1faa523c71b5f049eca945427","modified":1616815243861},{"_id":"source/_posts/macos-find-port-by-cmd.md","hash":"02d20099efd6a2342fd6bb711382b43a30325d8a","modified":1609926976526},{"_id":"source/_posts/new-start.md","hash":"0b71ccacdaf9d86f9777c424fab152e29612892c","modified":1609926976527},{"_id":"source/_posts/lets-encrypt-nginx.md","hash":"913a912a34b7bc4ee3a43fa1d406ba315a2c1acd","modified":1609926976526},{"_id":"source/_posts/nsq-vs-kafka.md","hash":"9d042efd10ae171df8ce97e3657b0e483c3e8b8b","modified":1609926976528},{"_id":"source/_posts/openwrt-on-raspberry-pi.md","hash":"11a94690baa2e912f8d9d9f1ee0e54065efe3871","modified":1613539553322},{"_id":"source/_posts/openwrt-compile.md","hash":"0b526ee8c7e79c5b5a425b1c6538c02a10fc0f6b","modified":1609926976528},{"_id":"source/_posts/openwrt-on-raspberrypi-play-audio.md","hash":"49fccccde43c368016204f48c95ce727c242adb1","modified":1609926976530},{"_id":"source/_posts/nsq-deploy.md","hash":"fe92fc9660406da57e8e419fecff0c9ae17ea41f","modified":1609926976527},{"_id":"source/_posts/openwrt-ipv6-firewall-forward.md","hash":"cd2d9e0e908f65ba45fc847d563aa72f713a052d","modified":1609926976529},{"_id":"source/_posts/plan-9-effect.md","hash":"7a713712d13371ea28c6dc86658a8fee97a336c5","modified":1609926976531},{"_id":"source/_posts/postgresql-10-install-ubuntu.md","hash":"1e5f3a97a8169cf70e3981f687ea1ce63ee9cbd7","modified":1609926976532},{"_id":"source/_posts/postgres_fdw.md","hash":"b5cac8c947d4fbe531d91979a95e2517d395c199","modified":1609926976532},{"_id":"source/_posts/postgresql-citus.md","hash":"5c98ca35fa78ab4eb22f8d27ba095040557b83b8","modified":1632229813653},{"_id":"source/_posts/postgresql-brin-index.md","hash":"7c262d24511ffea299d11eef4c614fb0b22fb41c","modified":1609926976533},{"_id":"source/_posts/postgresql-12.md","hash":"3ead04a289ac2c359cbcb4afa239965ae6512c1e","modified":1609926976533},{"_id":"source/_posts/postgresql-config.md","hash":"b1cb3460fa2a8d7b8602fd9e0e1b6a42f74b0c3e","modified":1609926976534},{"_id":"source/_posts/postgresql-file-fdw-analysis-nginx-log.md","hash":"3f073200dcaf58b1d06f8ee81d1b3b80ad885ae7","modified":1609926976535},{"_id":"source/_posts/postgresql-ssl.md","hash":"97cc4ba0aaf46ab82545ff2a2af6d90bada8ff66","modified":1609926976536},{"_id":"source/_posts/postgresql-init.md","hash":"7307c382d1d32cf657cf45938f167d5ef3bb9e19","modified":1609926976536},{"_id":"source/_posts/tencent-vs-huwwei-2019.md","hash":"97f3d2b84206f6c16bbedfd40de516406ecdec49","modified":1613536176813},{"_id":"source/_posts/sql-join.md","hash":"6d6385615ff4f4c15449b179b16d79e4a597aefd","modified":1609926976537},{"_id":"source/_posts/swoole-configure.md","hash":"650c9a86a8ff3c737da1bfacc0bf49e70f993c69","modified":1609926976537},{"_id":"source/_posts/truss-lsof-strace-ltrace.md","hash":"897ce40c51f31c9832ab9df8203563cb9cbb71e2","modified":1609926976539},{"_id":"source/_posts/tcpdump.md","hash":"d537b35a82c56900db67b81947e1c2b5bcce0913","modified":1609926976538},{"_id":"source/_posts/webpack-font-awesome.md","hash":"c5130485acd2328bf07bc4e038ec1931e94ad068","modified":1609926976539},{"_id":"source/tags/index.md","hash":"1b0c05678a4a3078d95af7c549868c510f36dbd2","modified":1610800097967},{"_id":"source/_posts/.idea/_posts.iml","hash":"6c84deda8dfa479a1473d2a6bb8886b03dbd4551","modified":1609984197458},{"_id":"source/_posts/.idea/modules.xml","hash":"6abd6dcb985048745c9214d67295bdf1597307ee","modified":1609984197467},{"_id":"source/_posts/.idea/workspace.xml","hash":"d5d5f08cb987c44abaf3527a02a21a8f7ba38e51","modified":1610521196476},{"_id":"source/_posts/.idea/vcs.xml","hash":"2d907a36075e3eccb23ee1a5a91887aefb425ed1","modified":1609984197470},{"_id":"themes/keep/.gitignore","hash":"b49daa26b8121cc0c7074d61b377c8e7e0880d03","modified":1609929050593},{"_id":"themes/keep/_config.yml","hash":"f5b913141b065ce95ac16f9df1188770c603c4b9","modified":1613535639135},{"_id":"themes/keep/LICENSE","hash":"98b8bd28e54ab36ee12396687dfdf88807c6cfdd","modified":1609929050593},{"_id":"themes/keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1609929050593},{"_id":"themes/keep/package.json","hash":"b3eb293ffa6fadd6615f8c91e7267b0c553f8964","modified":1609929050600},{"_id":"themes/keep/languages/zh-CN.yml","hash":"bf67013be73d38d3977d6e7197d3c5af5a2b520d","modified":1609929050594},{"_id":"themes/keep/languages/en.yml","hash":"70b5052c0e12955cc54dc417d0a37ce2764bee1d","modified":1609929050594},{"_id":"themes/keep/layout/archive-content.ejs","hash":"cfa8f29b8863534f407136ea3deb18a4b2ff722c","modified":1609929050598},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1609929050598},{"_id":"themes/keep/layout/category-content.ejs","hash":"f11fc5c372957f6efc6187d49a8020d098420647","modified":1609929050598},{"_id":"themes/keep/layout/article-content.ejs","hash":"ed349d23f2ae7c4ec448a33e43656b9cc3bdf637","modified":1609929050598},{"_id":"themes/keep/README.md","hash":"c1502e5a91393035c1bf2e1d8bb757414f0d25ed","modified":1609929050594},{"_id":"themes/keep/layout/category-list.ejs","hash":"a9390b25238332417fd554d32563a4d9999db90f","modified":1609929050598},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1609929050599},{"_id":"themes/keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1609929050599},{"_id":"themes/keep/layout/home-content.ejs","hash":"79e16c3baa6569afbc07ac6a5d2e3f37b273016a","modified":1609929050599},{"_id":"themes/keep/layout/layout.ejs","hash":"da9dbeba541ad19fed35c41fe187f4016e41f0db","modified":1609929050599},{"_id":"themes/keep/layout/ip-tool.ejs","hash":"f03cddfca1d0c6a2c13a9070913d76c6062d6956","modified":1610803923837},{"_id":"themes/keep/layout/page.ejs","hash":"f93245f31afbce4110aa16ce6086ee122bce9c11","modified":1609929050599},{"_id":"themes/keep/layout/tag-content.ejs","hash":"9409aa1d954bdb76979bb839d3d185ec8df828be","modified":1609929050599},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1609929050599},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1609929050599},{"_id":"themes/keep/scripts/use-source-data.js","hash":"21f6a49e47b7e4d792d67503079ea5b509f18311","modified":1609929050600},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"c8382072149b5472f9a829c0cf89c13716114ec1","modified":1609929050595},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"77e13720374efb902ee3d4d04d13b62de033a3ae","modified":1609929050595},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"56878ad472a507ab8bfe1d2d0fb433b7a1f32a37","modified":1609929050595},{"_id":"themes/keep/layout/_partial/empty-page.ejs","hash":"a35667e92f2dcc06618f289b471bee98964a9654","modified":1609929050596},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"106683de71f01b368c6f0c5417952b54fcdc9611","modified":1609929050596},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"c698e510804ef5bc6174f34baed34426e9baf808","modified":1655540192052},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"b3dd2feb168c81332845051fe60e9a94cff7fd9a","modified":1609929050596},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"8f2d389c6db5c9e8e6d30fb1579d99ee1660a485","modified":1609929050596},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"87315952b66036ff1a479f89dd1505d92b9893d2","modified":1609929050596},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":1609929050597},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"9fc7c866091c96c8374149de6d2e83453f5f70be","modified":1609929050596},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"cfd4d9a30bd20ee0750b79226cb94562439013bf","modified":1609929050597},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"6fbcc0a14467da8362a2eaa490d84acb1336d21b","modified":1609929050597},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"5805ad6676bf9dcc1220f67a99374ce04d7a9877","modified":1609929050597},{"_id":"themes/keep/layout/_partial/side-tools-container.ejs","hash":"ba1a0f41bcecee7f9305703a95b435d5accdde72","modified":1609929050597},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"01814ef3f507edfcb6f464cd7d4dbbbdd0a4701f","modified":1609929050598},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"aefc9db612c0fceb4a02fdbed9fa47a6c4e144b5","modified":1609929050598},{"_id":"themes/keep/layout/_partial/tools.ejs","hash":"94bc5f124e35f6b5d423578de0472a4f7a799af9","modified":1609929050598},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"baae2457ec055f07b941420fcd14af74cc789676","modified":1609929050597},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"b39cfa42d156b7ad4d4e8246b6f934cd51d8db55","modified":1609929050600},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"5164939c8b5f699c16d13dad87ff28f04057ec0d","modified":1609929050600},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"2efcf3c13bc0ff0cab7316dc992cd67778428c13","modified":1609929050600},{"_id":"themes/keep/source/css/style.styl","hash":"af20e708eae39b30a74f16a9c6013606d0b996a9","modified":1613536805997},{"_id":"themes/keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1609929050611},{"_id":"themes/keep/source/images/avatar.jpg","hash":"b94fd3f8ad2c76f705492969f216a675d9d89dcd","modified":1599883262823},{"_id":"themes/keep/source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1609929050611},{"_id":"themes/keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1609929050612},{"_id":"themes/keep/source/js/back2top.js","hash":"75df1f6c1271bf36972c9131da9c3d7fa93a350e","modified":1609929050612},{"_id":"themes/keep/source/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1609929050612},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"2f1debecc80b741320c7c0a40a0e945b6aaaab85","modified":1609929050612},{"_id":"themes/keep/source/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1609929050613},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"f0b53b6b4ea5aa16ac8d7b5b20b591c00b4520c5","modified":1609929050613},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1609929050601},{"_id":"themes/keep/docs/README_zh-CN.md","hash":"ad0ba8e85301621d6a13d6a9af1e6ba4b1432609","modified":1609929050594},{"_id":"themes/keep/source/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1609929050614},{"_id":"themes/keep/source/js/main.js","hash":"efa31ffa9ff787d7392dc4a6d932815c23eedc45","modified":1609929050614},{"_id":"themes/keep/source/js/toc.js","hash":"bd3928d9e0de3393fcc3a636332789542a574b21","modified":1609929050615},{"_id":"themes/keep/source/js/utils.js","hash":"7cfed17e6c64f2dd98c4aec46dfbbb5db6598bf1","modified":1609929050615},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1609929050625},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1609929050628},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1609929050628},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1609929050628},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"87cb73bfb57a5513ec0d655931c29376c2d4a2f8","modified":1609929050595},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"cec2402133f994df70258e1213ce2bc1e3296fc9","modified":1609929050595},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"ea8560e3d8c226f3e14138237f444c4056c2152e","modified":1609929050595},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"0fa299a9e21ca35041287ba130c098d7d2fbda17","modified":1609929050597},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"8a62d9f588fc199662a6dcb863c9ba1de3b3034c","modified":1609929050605},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"361fc08607288635ec560604b06240d4b12b9ddb","modified":1609929050606},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"fd9e4ce978d5289199ecf4144c278a8bf9db9af3","modified":1609929050606},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"409edd107f4be72326c9cb778db232bf16eb093b","modified":1609929050606},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"a9d2bbf80d16682327285bfa0373959db73a87da","modified":1609929050610},{"_id":"themes/keep/source/css/layout/page.styl","hash":"f7b24391d7c4e9020e3fb7f98bce63ae3e6304cb","modified":1609929050610},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"f2c9974839472b4b1782929e3a80c46d90d12103","modified":1609929050610},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1609929050613},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1609929050614},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"ca92d5a9edb420aaf110dfe3356230ba9970dde4","modified":1609929050601},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"7992d4c844db8b9e6afac6a3b788acfe9c250788","modified":1609929050601},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"902b4bb3880c3366a548de1a85a480e9cc7b2ec2","modified":1609929050602},{"_id":"themes/keep/source/css/layout/_partial/empty-page.styl","hash":"59a0a0301a5599d4d0b0540cb2268d57d44dad0c","modified":1609929050603},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"f720b3542c572a0bc43661232b11941b3ec633f1","modified":1609929050603},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"d38b7dfc38c1208df4f6d8cee9f58621882a360a","modified":1609929050603},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"d2b3cd48ef879bd4785500c7e14f1888a1a109f5","modified":1609929050603},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"061a77eb09ca70998d6d524fa3fbe2369ecfd12b","modified":1609929050604},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"7db84a8cc72ea5b03026a6e438a0a0708effbb66","modified":1609929050604},{"_id":"themes/keep/source/css/layout/_partial/mermaid.styl","hash":"222354a8c6fbde24fcde3bcd66f46acd37083417","modified":1613536796671},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"da5df38b09138af28cb8b3fe9a05aeda9dae5011","modified":1609929050604},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"1deed1506f97785fb4b1f53e7d6ce36dfdae44f6","modified":1609929050604},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"2de571e07b3359fc5778b5cf4ac3b48d116e1c11","modified":1609929050604},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"5e8c896d9eac2be3fec0324db319bff3cd1faabe","modified":1609929050605},{"_id":"themes/keep/source/css/layout/_partial/tools.styl","hash":"429c6ece19e950cf467efb743c8787714696282f","modified":1609929050605},{"_id":"themes/keep/source/css/layout/common/animated.styl","hash":"44bdae63ca683ee5f318d4dd10cb51378aaba828","modified":1609929050607},{"_id":"themes/keep/source/css/layout/common/basic.styl","hash":"5bf08201169c95d0693b6fdc662ecc07940355a1","modified":1609929050607},{"_id":"themes/keep/source/css/layout/common/keep-theme.styl","hash":"bbe17ff8982b6c628514270ac8eca030a216967f","modified":1609929050608},{"_id":"themes/keep/source/css/layout/common/markdown.styl","hash":"b40f177517cf94536565e093de13d1a8dfe366a6","modified":1609929050609},{"_id":"themes/keep/source/css/layout/common/variables.styl","hash":"015607dbfd7109817de7de1d2c4cdc84db22fa76","modified":1609929050609},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"fd316d85c864d00c1af62d71aaa82d6d516d544e","modified":1609929050602},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"b538919d22f63927799a9140b656001c0e15d180","modified":1609929050602},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"4bd1a0db32fd0cba040c591c36d9d1220d4a825b","modified":1609929050602},{"_id":"themes/keep/source/css/layout/common/codeblock/code-theme.styl","hash":"8c0551d53e073384caa8351fdbcbad0d3e744860","modified":1609929050607},{"_id":"themes/keep/source/css/layout/common/codeblock/copy-code.styl","hash":"360bad1f4ddb0e918708511e70903a67b06f2f9c","modified":1609929050608},{"_id":"themes/keep/source/css/layout/common/codeblock/highlight.styl","hash":"86e4c8cf7020d31e9dae060bf9f99c3f274182ad","modified":1609929050608},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1609929050624},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1609929050625},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1609929050645},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1609929050645},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1609929050617},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1609929050624},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"c41a688158d577e3a2738137992d49b05b17ab8f","modified":1609929050627},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1609929050631},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1609929050644},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"69a0ff79a9d93a451e9fa90bd79ae7008d2a9da5","modified":1609929050622},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"36de6a298660ed3feaab37900f7b28c3e981d80e","modified":1609929050642},{"_id":"public/search.xml","hash":"43bbd3f1eed505b8cb9f5856e28f3a6ecea449d7","modified":1656300479066},{"_id":"public/ip-tool/index.html","hash":"4bf392cf25fed29b18f29de40e5dfe2871e1c8df","modified":1655540201907},{"_id":"public/tags/index.html","hash":"7dcfa1be90f6dd2803ceeeb51ad7dd17c1a5ebdd","modified":1656300479066},{"_id":"public/2021/01/26/mouse-pad/index.html","hash":"fb9874d32e6f8c22a05ca544ded8f12c19dc7485","modified":1655540201907},{"_id":"public/2021/01/18/linux-cmd/index.html","hash":"a5739bc58a363dd914acff97f17afabcaaf2389c","modified":1655540201907},{"_id":"public/2019/07/13/macos-find-port-by-cmd/index.html","hash":"79d2ac8aee7f1a2d84dd5fee9583bd9fcc4c3098","modified":1655540201907},{"_id":"public/2018/04/09/postgresql-10-install-ubuntu/index.html","hash":"24a9368ff3bf2f4650ebe3897550018e731d7861","modified":1655540201907},{"_id":"public/2017/07/22/sql-join/index.html","hash":"7f9b43ec513cdae2aa4cabddd6227a0260d1e9d2","modified":1655540201907},{"_id":"public/2017/06/11/new-start/index.html","hash":"1b046a28af19ad90b74fbce30cb6ad2eeae6a833","modified":1655540201907},{"_id":"public/2017/06/05/swoole-configure/index.html","hash":"c867af5bd9c93f4bbbe4f33c08072bc097acef0d","modified":1655540201907},{"_id":"public/2017/01/02/damned-xcode/index.html","hash":"d2f55120f0649d1e46668199620a5529d1ca77fd","modified":1655540201907},{"_id":"public/2016/12/13/laravel-queue/index.html","hash":"f482bc751468f8e32f9b4446e048b1ec953034d0","modified":1655540201907},{"_id":"public/tags/Android/index.html","hash":"eccdc5657a68090a99a86678dc9f4d7efd25d572","modified":1655540201907},{"_id":"public/tags/DNS/index.html","hash":"02c07bbfbdc9bb32911689ad58aa1f661de1d028","modified":1655540201907},{"_id":"public/tags/mosquitto/index.html","hash":"4414c9ceaa78b0fa10d10a6917ca4c2f7c45bffa","modified":1655540201907},{"_id":"public/tags/mqtt/index.html","hash":"35d02694d7bb7a73b4795735e9fffeda743d9133","modified":1655540201907},{"_id":"public/tags/PostgreSQL/index.html","hash":"502d17ecb4d3cb30212839da9b4d8d7a84e3e05c","modified":1656300479066},{"_id":"public/tags/PostgreSQL/page/2/index.html","hash":"9d39e1d423a866ed9a4635afcd606467110a9ad5","modified":1656300479066},{"_id":"public/tags/xcode/index.html","hash":"411236656d82e6eadd11124e55202e72652f1a85","modified":1655540201907},{"_id":"public/tags/opencore-amr/index.html","hash":"c1f0999b1a8f481588cca75b5a98a1883b3d1aa3","modified":1655540201907},{"_id":"public/tags/amr/index.html","hash":"a2f9c111c73970f18e18b096070aff4beb099d57","modified":1655540201907},{"_id":"public/tags/ios/index.html","hash":"26111e84effbac5d3099a047a93227037d81e940","modified":1655540201907},{"_id":"public/tags/PHP/index.html","hash":"8b132c66a5138b914fc85b1a7f28439fe8efd095","modified":1655540201907},{"_id":"public/tags/Swoole/index.html","hash":"aa51d57e1424a2c1722722f17c11f3d3a51a1023","modified":1655540201907},{"_id":"public/tags/FreeBSD/index.html","hash":"2d2b88ead368ab41cea3c2dbdfbee99d01e14784","modified":1655540201907},{"_id":"public/tags/daemontool/index.html","hash":"2b6646ee6ed7a4e67e25d382378bf515464dcdd0","modified":1655540201907},{"_id":"public/tags/supervisord/index.html","hash":"3791000a7e205dd70470864603b05baff142fa0c","modified":1655540201907},{"_id":"public/tags/swift3/index.html","hash":"0dfeefac5cef3da5d128f3ed14a786e7d047c8e0","modified":1655540201907},{"_id":"public/tags/FFmpeg/index.html","hash":"a69b87c993a67ec359e7069cb7f8e7d7a759da79","modified":1655540201907},{"_id":"public/tags/视频剪裁/index.html","hash":"b96f55ae33232a0904a6ae7aa189c2493611cdb8","modified":1655540201907},{"_id":"public/tags/nginx/index.html","hash":"a9fcc1766119da943acc8259b4e6c2ac0a72bed1","modified":1655540201907},{"_id":"public/tags/ipv6/index.html","hash":"b1e6585880e7c4c1cfcd72f6aead521e30cd87a3","modified":1655540201907},{"_id":"public/tags/tunnelbroker/index.html","hash":"318872d847e96eba709b35419df0b35cb07d63dc","modified":1655540201907},{"_id":"public/tags/golang/index.html","hash":"2d9dfded14576c80e8ba158c78adb268d0c46396","modified":1655540201907},{"_id":"public/tags/gin/index.html","hash":"e3fcc1b5a9106358ccc3c364b2b64c61ab9f16fd","modified":1655540201907},{"_id":"public/tags/websocket/index.html","hash":"fec0c5e303120a24088eb2d63463eb157a708757","modified":1655540201907},{"_id":"public/tags/udp/index.html","hash":"69d76a2b693ce4b1851260171fc5122d7a11885c","modified":1655540201907},{"_id":"public/tags/iptables/index.html","hash":"7551f3f32188ac0d0d142ed5bf16825a371b8de6","modified":1655540201907},{"_id":"public/tags/kcp/index.html","hash":"c74bbdb5b68699fc18a6f2531e63cbe15af88320","modified":1655540201907},{"_id":"public/tags/tun/index.html","hash":"5e3d74bcfef26cdcfaf48e55a1fd0c2d940200d7","modified":1656300479066},{"_id":"public/tags/Java/index.html","hash":"fc16a5b1a8b0a61811d1d7d559e0d332dd12fd99","modified":1655540201907},{"_id":"public/tags/kotlin/index.html","hash":"de52b7b69f1f86f9ad7b84ee6b6bc52e105f3236","modified":1655540201907},{"_id":"public/tags/async/index.html","hash":"97d6691fd51bddd97632050940a7fe7cf9a46943","modified":1655540201907},{"_id":"public/tags/laravel/index.html","hash":"b27e5123b6349a21c39527477931e942476ab85e","modified":1655540201907},{"_id":"public/tags/notification/index.html","hash":"00ec934713fcf10166b5c8840b0633be0016738f","modified":1655540201907},{"_id":"public/tags/Job/index.html","hash":"cebdc5199d9aa3a9029e54e7b6e8193ab68d818c","modified":1655540201907},{"_id":"public/tags/Queue/index.html","hash":"06374d5f6e7436c13135b046bb73df5af3718786","modified":1655540201907},{"_id":"public/tags/shell/index.html","hash":"e9c1c580217bcedc8874a6ff81e39cf764c5bb6f","modified":1655540201907},{"_id":"public/tags/lets-encrypt/index.html","hash":"ec78919b4e292e1c48e6bbab9d6ab072dead6cd3","modified":1655540201907},{"_id":"public/tags/ssl/index.html","hash":"d896080b744f626dfda798c5e55389ca8e427e03","modified":1655540201907},{"_id":"public/tags/https/index.html","hash":"19b6b776124839a575e6870ce5c5c4b1a473d4c3","modified":1655540201907},{"_id":"public/tags/MacOS/index.html","hash":"c33db6aa221848e956be9032aa13252b989846e8","modified":1655540201907},{"_id":"public/tags/lsof/index.html","hash":"e1cbd54f2b4c7671e0da85bc5173db75955f55a1","modified":1655540201907},{"_id":"public/tags/netstat/index.html","hash":"9bd3a95ad5830a8ec4f606235ef0e09f804ed472","modified":1655540201907},{"_id":"public/tags/设计/index.html","hash":"f5dbf0267c3d27dc82e666a0eb79f2fe53260f55","modified":1655540201907},{"_id":"public/tags/Kafka/index.html","hash":"8e24551b66a6d683fb5a4e3616d5f7271d854ae1","modified":1655540201907},{"_id":"public/tags/NSQ/index.html","hash":"64905065b7df03d9011a601c4d8e65029a248c89","modified":1655540201907},{"_id":"public/tags/openWRT/index.html","hash":"c19c4f60ed72e75751fd9856e8f6a86661d193c4","modified":1655540201907},{"_id":"public/tags/编译/index.html","hash":"297cca677254663a33e9bc1cdddce3d026c00c7f","modified":1655540201907},{"_id":"public/tags/ip6tables/index.html","hash":"1c2fcbc4f8d26ae7afbd7f521e847cde2bbb8272","modified":1655540201907},{"_id":"public/tags/OpenWRT/index.html","hash":"2beaf9073675204c4f3c0610aecb0db52061e571","modified":1655540201907},{"_id":"public/tags/RaspberryPi/index.html","hash":"cfcfc9c3b353ec659f2ebaa39d848986ec886b28","modified":1655540201907},{"_id":"public/tags/音频/index.html","hash":"01c4b1e13ad4e7254634b5e386057951a42045ad","modified":1655540201907},{"_id":"public/tags/plan9/index.html","hash":"eef557c8535c30c32645cffc6ca693230cbe46a4","modified":1655540201907},{"_id":"public/tags/架构/index.html","hash":"e3276bb39d9c929d6937cf4cc28370e296339637","modified":1655540201907},{"_id":"public/tags/FDW/index.html","hash":"cfaf5271ecb830d4d9e76d7521ff6bc6b292e671","modified":1655540201907},{"_id":"public/tags/外部表/index.html","hash":"2bd0caea1d2fcec8d73eb2f79621d1460d95a636","modified":1655540201907},{"_id":"public/tags/Ubuntu/index.html","hash":"cb10026a8a791ccd88c683f95226acea470bf98a","modified":1655540201907},{"_id":"public/tags/initdb/index.html","hash":"59796ef8bae2ed2cee5931a415f0acd6e89e1bd4","modified":1655540201907},{"_id":"public/tags/索引/index.html","hash":"d5e926ccc8711d572d0e317dd96c88dd0234aa0f","modified":1655540201907},{"_id":"public/tags/Citus/index.html","hash":"5ce8d07342bd3113b628f67ff87282647fa48e97","modified":1655540201907},{"_id":"public/tags/性能优化/index.html","hash":"fc866a81443eafa380c2345fdf9a134b50ba57fb","modified":1655540201907},{"_id":"public/tags/file-fdw/index.html","hash":"b5e45d7108d50f150a2bf3883e483f3c9e55a6d5","modified":1655540201907},{"_id":"public/tags/log/index.html","hash":"45e38cb710386e24bda05a062731435696d08c67","modified":1655540201907},{"_id":"public/tags/SSL/index.html","hash":"d5d10582a6b7c5b24fc811f0569dcd73f7c5d97e","modified":1655540201907},{"_id":"public/tags/SQL/index.html","hash":"3cd9a2c9064a4952de2e072aabfd4e39ec0b37d0","modified":1655540201907},{"_id":"public/tags/JOIN/index.html","hash":"c961ac29058df37dd89567616ba4302d737b7f23","modified":1655540201907},{"_id":"public/tags/net/index.html","hash":"6f1cb03bec149462c6caba82d8e784e51b6c3c76","modified":1655540201907},{"_id":"public/tags/财报解读/index.html","hash":"0390f136092e2db872fd985823cac3cbacfc2a91","modified":1655540201907},{"_id":"public/tags/运维/index.html","hash":"10dd07260b4b3ed5a5f2103e9668a8a9bbd3a1d5","modified":1655540201907},{"_id":"public/tags/性能/index.html","hash":"4939e07217178eb970eff25a6fb37792c49f559c","modified":1655540201907},{"_id":"public/tags/webpack/index.html","hash":"e328aa501a5f5d7cbac98cac1266f257f55081bc","modified":1655540201907},{"_id":"public/tags/font-awesome/index.html","hash":"61dbf069cd6ea0d5b2a20b17303daa81e308f78f","modified":1655540201907},{"_id":"public/tags/电子商务法/index.html","hash":"c33b4d989d2ae46becd0a439bb04c5c66d8cc5ce","modified":1655540201907},{"_id":"public/2021/02/01/ffmpeg-resize/index.html","hash":"da75653b49f88a645f2ba26248297bf533df5420","modified":1655540201907},{"_id":"public/2021/02/01/build-mosquitto-on-freebsd/index.html","hash":"8a775489350463811ea6823532d6589bf2add2b6","modified":1655540201907},{"_id":"public/2021/01/07/electronic-commerce-law/index.html","hash":"0439bd98c4337d11ed402034a0935ee062ccd8a9","modified":1655540201907},{"_id":"public/2020/08/14/postgresql-citus/index.html","hash":"cd9e10e0c80af02d402dbbfe785c7dc3b26473d1","modified":1655540201907},{"_id":"public/2020/08/04/openwrt-ipv6-firewall-forward/index.html","hash":"5e968ef4f59ce20d18b81d2b1ef47ca978f91b92","modified":1655540201907},{"_id":"public/2020/07/06/openwrt-on-raspberrypi-play-audio/index.html","hash":"1870e6e18e5b59266438a760aa200481e7d958a0","modified":1655540201907},{"_id":"public/2020/06/29/postgresql-brin-index/index.html","hash":"288d517c2aa91207b1fd30ce0ac439e364c64e45","modified":1655540201907},{"_id":"public/2020/06/29/golang-udp-server/index.html","hash":"13cee11b547658ecea66f8081816615bb743daf8","modified":1655540201907},{"_id":"public/2020/03/10/openwrt-compile/index.html","hash":"14682187ba657ad0927407143a067946e1aab303","modified":1655540201907},{"_id":"public/2020/03/10/java-async-sync/index.html","hash":"0cf51e2045fe15b470418bcc0b65d63de171a27e","modified":1655540201907},{"_id":"public/2020/02/05/tcpdump/index.html","hash":"9d5294bc1ecc4c5a2f075f2237944829c9909339","modified":1655540201907},{"_id":"public/2019/12/14/iptables/index.html","hash":"a604c66596f09612989714d8d81c7e32a2e012a9","modified":1655540201907},{"_id":"public/2019/12/04/openwrt-on-raspberry-pi/index.html","hash":"bf75f729c051348be76a0e14c01f0824a160bd78","modified":1655540201907},{"_id":"public/2019/11/11/kcp-tun-config/index.html","hash":"e62c9547cd8b0641d572aa31a48fe6dbad4461fd","modified":1655540201907},{"_id":"public/2019/10/28/postgresql-12/index.html","hash":"e7536f6186f491efde15c06d205827a373e66269","modified":1655540201907},{"_id":"public/2019/10/26/postgresql-ssl/index.html","hash":"cb6a9fda67059f1c82104641c89725131301b5c7","modified":1655540201907},{"_id":"public/2019/10/23/build-postgresql12-on-freebsd12/index.html","hash":"d238bcf306ad8937be5e8e42bf5e00322c2992fc","modified":1655540201907},{"_id":"public/2019/08/05/plan-9-effect/index.html","hash":"fd4b555d9ca5cc68cd6ad98813676600fa599e0b","modified":1655540201907},{"_id":"public/2019/07/30/tencent-vs-huwwei-2019/index.html","hash":"03d4783085a41b99c4903ef4c61c04fabec77f39","modified":1655540201907},{"_id":"public/2019/07/30/gin-with-websocket/index.html","hash":"5ff77e5b4953e30da27315ab6d3e82df39215b32","modified":1655540201907},{"_id":"public/2019/07/16/android-custom-dns/index.html","hash":"2e5c581a034f27e91d8d9d9505e6d118792a2610","modified":1655540201907},{"_id":"public/2019/07/15/nsq-deploy/index.html","hash":"03286db327f14398ee0a38ecd03e46457b068cf9","modified":1655540201907},{"_id":"public/2019/07/14/nsq-vs-kafka/index.html","hash":"e5f3589f5fd89eab3835906716d54b286bf110fd","modified":1655540201907},{"_id":"public/2019/07/10/postgresql-file-fdw-analysis-nginx-log/index.html","hash":"dea42be1fd785b7b8b7f251dca6fa74ee1e843c8","modified":1655540201907},{"_id":"public/2018/09/07/postgres_fdw/index.html","hash":"5c240edc3987d194add79f632cb049524621cc64","modified":1655540201907},{"_id":"public/2018/06/16/freebsd-disk-resize/index.html","hash":"053bb25a8c2887e150fdfa38bd9d299dd95b4955","modified":1655540201907},{"_id":"public/2017/07/22/freebsd/index.html","hash":"06e6d5f7987dcb31607f592def641fd6515192f7","modified":1655540201907},{"_id":"public/2017/07/12/postgresql-init/index.html","hash":"06b2567fd64622e344261b3bdf0daedbba43f05b","modified":1655540201907},{"_id":"public/2017/06/20/byebye-swoole/index.html","hash":"b856a19e458f20ba23cb33231cee0274c6e21d22","modified":1655540201907},{"_id":"public/2017/06/17/daemontools/index.html","hash":"dfac106d9549e6fee37e7b4399bc2f23c6a3de52","modified":1655540201907},{"_id":"public/2017/06/12/truss-lsof-strace-ltrace/index.html","hash":"4b2d82127b54ad50642d1a619a5901c94ca1437c","modified":1655540201907},{"_id":"public/2017/03/19/freebsd-nginx-ipv6-with-tunnelbroker/index.html","hash":"c0be61e6eb1215ad42111fd78ebc28c1556f2877","modified":1655540201907},{"_id":"public/2017/02/21/webpack-font-awesome/index.html","hash":"23e3fa74e3aad007114bead1ddc0dd3dd94064d5","modified":1655540201907},{"_id":"public/2017/01/12/lets-encrypt-nginx/index.html","hash":"fff8b89ed59896c0fddae66da440c7959a91bafd","modified":1655540201907},{"_id":"public/2017/01/05/build-opencore-amr/index.html","hash":"a6294def62dc707d2235918dab8c1145e38e1de8","modified":1655540201907},{"_id":"public/2016/12/15/laravel-notification/index.html","hash":"6836e1c3fa5f87778247142d08b1611fe3c062aa","modified":1655540201907},{"_id":"public/2016/12/15/postgresql-config/index.html","hash":"1111fb080b15c6ec5bd63358c3e88f860f878369","modified":1655540201907},{"_id":"public/archives/index.html","hash":"32fe98a1f81287fda5a8ac61fcf03560ecc03921","modified":1656300479066},{"_id":"public/archives/page/2/index.html","hash":"32fe98a1f81287fda5a8ac61fcf03560ecc03921","modified":1656300479066},{"_id":"public/archives/page/3/index.html","hash":"32fe98a1f81287fda5a8ac61fcf03560ecc03921","modified":1656300479066},{"_id":"public/archives/page/4/index.html","hash":"32fe98a1f81287fda5a8ac61fcf03560ecc03921","modified":1656300479066},{"_id":"public/archives/page/5/index.html","hash":"32fe98a1f81287fda5a8ac61fcf03560ecc03921","modified":1656300479066},{"_id":"public/archives/2016/index.html","hash":"41dba36c8b386b4d872a459d58220ea5459df5fe","modified":1656300479066},{"_id":"public/archives/2016/12/index.html","hash":"7d0943b51b0c53a8bfba3080acb851fbf4142cff","modified":1656300479066},{"_id":"public/archives/2017/index.html","hash":"364bada7f897ce78e44a192da0634391a44e8437","modified":1656300479066},{"_id":"public/archives/2017/page/2/index.html","hash":"364bada7f897ce78e44a192da0634391a44e8437","modified":1656300479066},{"_id":"public/archives/2017/01/index.html","hash":"7366b9da27ac7bce6e4da5091eac8f15fbe733eb","modified":1656300479066},{"_id":"public/archives/2017/02/index.html","hash":"26894df81177c2ea0b49565a14ff39e41c3391ed","modified":1656300479066},{"_id":"public/archives/2017/03/index.html","hash":"1cb4d80f9ef3e90600a581ea8f2759a5c9f36cf4","modified":1656300479066},{"_id":"public/archives/2017/06/index.html","hash":"eeda21dc8b4ad0e95f15e61eef8a75d9e49f28b8","modified":1656300479066},{"_id":"public/archives/2017/07/index.html","hash":"7be05f6dd157bdbee835d5c63e169dcd057fcd31","modified":1656300479066},{"_id":"public/archives/2018/index.html","hash":"c23a1a7ac25f6c46a16ef0ed15786b4f43a77f23","modified":1656300479066},{"_id":"public/archives/2018/04/index.html","hash":"9d144b7a3030ad1d121546b9a979ae9878dbf65a","modified":1656300479066},{"_id":"public/archives/2018/06/index.html","hash":"c33fbe84f9d931c9c8d26db6e77ea66ae2278c10","modified":1656300479066},{"_id":"public/archives/2018/09/index.html","hash":"c742f3041870db83f81e10157faf3492710f70b3","modified":1656300479066},{"_id":"public/archives/2019/index.html","hash":"51645b35cb5a22a7348796e92f7913237d23b47c","modified":1656300479066},{"_id":"public/archives/2019/page/2/index.html","hash":"51645b35cb5a22a7348796e92f7913237d23b47c","modified":1656300479066},{"_id":"public/archives/2019/07/index.html","hash":"eb6fce6eff50f1626827a304c8b767232dbc0f36","modified":1656300479066},{"_id":"public/archives/2019/08/index.html","hash":"49e2a4e9cb8fc240cb21a7b304ce5eac5b7606a6","modified":1656300479066},{"_id":"public/archives/2019/10/index.html","hash":"1ccce5d6711526c7fe0abae8d9f86dcce0d692d8","modified":1656300479066},{"_id":"public/archives/2019/11/index.html","hash":"4f8e3052c5cd47b52e006dc00bf6412ac849de59","modified":1656300479066},{"_id":"public/archives/2019/12/index.html","hash":"b74eef3016a0e1834ff68c453ac6869aee90a506","modified":1656300479066},{"_id":"public/archives/2020/index.html","hash":"a96829801c077018c954a64ed315fce15e97b7dc","modified":1656300479066},{"_id":"public/archives/2020/02/index.html","hash":"cbc70ee8a53102f82ef38261eb050b393726e955","modified":1656300479066},{"_id":"public/archives/2020/03/index.html","hash":"610c67e7f7ca64ca18af7a23de4d32492bc6c1c1","modified":1656300479066},{"_id":"public/archives/2020/06/index.html","hash":"2481d5b4f26fc9b117ca12c49d773a78e2bfd461","modified":1656300479066},{"_id":"public/archives/2020/07/index.html","hash":"d0bb85f9cbd262a3bcd25e01ecd28219a86d9946","modified":1656300479066},{"_id":"public/archives/2020/08/index.html","hash":"ac32f0b3724c8aef3cc7a7d1d14f43de3214eaa0","modified":1656300479066},{"_id":"public/archives/2021/index.html","hash":"6f59ba47ebe7422609d1c0015f917b2e64ead80d","modified":1656300479066},{"_id":"public/archives/2021/01/index.html","hash":"56a2e8753fbbcdbe7c48a5a731dff3cbad9e5b95","modified":1656300479066},{"_id":"public/archives/2021/02/index.html","hash":"ed346b5e821df780b236b78467ed33f93f2b0bb7","modified":1656300479066},{"_id":"public/index.html","hash":"43f602380ce3f89be0a8fc1689875365cb7c3469","modified":1656300479066},{"_id":"public/page/2/index.html","hash":"82e541e1ad98775b47703e0f621b6049da4a2949","modified":1656300479066},{"_id":"public/page/3/index.html","hash":"9a0ac5843bb13dbb3ad88b694fdf1f1909b7a812","modified":1656300479066},{"_id":"public/page/4/index.html","hash":"4cbfaa661f697e2f0bcc3572ebaa35c8eaaac9bb","modified":1656300479066},{"_id":"public/page/5/index.html","hash":"5b69dfc56de47d02036abcc30f1aba47a17b1dea","modified":1656300479066},{"_id":"public/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1613539727077},{"_id":"public/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1613539727077},{"_id":"public/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1613539727077},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1613539727077},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1613539727077},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1613539727077},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1613539727077},{"_id":"public/images/avatar.jpg","hash":"b94fd3f8ad2c76f705492969f216a675d9d89dcd","modified":1613539727077},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1613539727077},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1613539727077},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1613539727077},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1613539727077},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1613539727077},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1613539727077},{"_id":"public/js/back2top.js","hash":"75df1f6c1271bf36972c9131da9c3d7fa93a350e","modified":1613539727077},{"_id":"public/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1613539727077},{"_id":"public/js/dark-light-toggle.js","hash":"2f1debecc80b741320c7c0a40a0e945b6aaaab85","modified":1613539727077},{"_id":"public/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1613539727077},{"_id":"public/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1613539727077},{"_id":"public/js/left-side-toggle.js","hash":"f0b53b6b4ea5aa16ac8d7b5b20b591c00b4520c5","modified":1613539727077},{"_id":"public/js/main.js","hash":"efa31ffa9ff787d7392dc4a6d932815c23eedc45","modified":1613539727077},{"_id":"public/js/toc.js","hash":"bd3928d9e0de3393fcc3a636332789542a574b21","modified":1613539727077},{"_id":"public/js/utils.js","hash":"7cfed17e6c64f2dd98c4aec46dfbbb5db6598bf1","modified":1613539727077},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613539727077},{"_id":"public/css/layout/category-list.css","hash":"0d23f6ebc9760a05b8c9e84a750545600090ced4","modified":1613539727077},{"_id":"public/css/layout/article-content.css","hash":"da891247f945e50321ccfea8c2566c49fc8de71e","modified":1613539727077},{"_id":"public/css/layout/category-content.css","hash":"bd620b11d390a1c6d010ce8dbe9643dc45246a27","modified":1613539727077},{"_id":"public/css/layout/home-content.css","hash":"e7dd727f868e4729ed2f69157d0f87ef61c2f758","modified":1613539727077},{"_id":"public/css/layout/page.css","hash":"45921704960a9fe6d9b3414238e680fd414b7873","modified":1613539727077},{"_id":"public/css/layout/tag-content.css","hash":"3d1f21376cf0692a009ee20ca15b7e2886301a1c","modified":1613539727077},{"_id":"public/css/layout/common/animated.css","hash":"da0b2d56f1fedfe17d3a39d82fe79f9e736cb206","modified":1613539727077},{"_id":"public/css/layout/common/basic.css","hash":"e893c15db9fe90c39645983cabc7c67b401d8663","modified":1613539727077},{"_id":"public/css/layout/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613539727077},{"_id":"public/css/layout/common/markdown.css","hash":"8e4932693a6a7c1defb9a5a8ac263c9104867efd","modified":1613539727077},{"_id":"public/css/layout/common/codeblock/code-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613539727077},{"_id":"public/css/layout/common/variables.css","hash":"20b30b0ac621c8d0d966bdc279b82e44b6495e7a","modified":1613539727077},{"_id":"public/css/layout/common/codeblock/copy-code.css","hash":"9cf9b6ae9904f08f5d01e9414f08c3588c1dda49","modified":1613539727077},{"_id":"public/css/layout/common/codeblock/highlight.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613539727077},{"_id":"public/css/style.css","hash":"5712466ee856e70e88bff54e3cbcb0f54cdeaafe","modified":1613539727077},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1613539727077},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1613539727077},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1613539727077},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1613539727077},{"_id":"public/webfonts/fa-regular-400.svg","hash":"c41a688158d577e3a2738137992d49b05b17ab8f","modified":1613539727077},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1613539727077},{"_id":"public/webfonts/fa-brands-400.svg","hash":"69a0ff79a9d93a451e9fa90bd79ae7008d2a9da5","modified":1613539727077},{"_id":"public/webfonts/fa-solid-900.svg","hash":"36de6a298660ed3feaab37900f7b28c3e981d80e","modified":1613539727077},{"_id":"source/_posts/freebsd-lldb-debug-programe.md","hash":"c2fcc4052efaba291799f89da499e9ce01102b00","modified":1614419917363},{"_id":"public/2021/02/27/freebsd-lldb-debug-programe/index.html","hash":"93af0cc281ab5909639bc0d064c29c1394709b4e","modified":1655540201907},{"_id":"public/tags/lldb/index.html","hash":"79725b59f8a4eabec3fab206b0a9165da3ffdfc5","modified":1655540201907},{"_id":"source/_posts/mqtt5-protocol.md","hash":"9c4e4ceaa32d3d256a9cb6a43e9e3c3371135502","modified":1615795592992},{"_id":"public/tags/MQTT/index.html","hash":"92399ffe83c580ee52be46bebbd455e8293d9a7e","modified":1655540201907},{"_id":"public/tags/协议/index.html","hash":"0c22e2289e291b715dd34eead69324afff061d11","modified":1655540201907},{"_id":"public/2021/03/15/mqtt5-protocol/index.html","hash":"4843a4ed76fe8aea793403ab96f2e7cf539f6c9e","modified":1655540201907},{"_id":"public/archives/2021/03/index.html","hash":"ff053e2f5aabe85a20341148d8e11cab6767e096","modified":1656300479066},{"_id":"source/_posts/aliyun-freebsd-mount-cloud-disk.md","hash":"b0a27ae573307ba49ab80c98dbb9656b3a4191c5","modified":1627978374870},{"_id":"public/2021/08/03/aliyun-freebsd-mount-cloud-disk/index.html","hash":"b837bc4ed36042751468eb2aa57013c1b7ee9a36","modified":1655540201907},{"_id":"public/tags/mount/index.html","hash":"0e58e6fc952a695d23d73a754f1a7b64f1160846","modified":1655540201907},{"_id":"public/tags/阿里云/index.html","hash":"390728eb53648ce1380379b353f420c1b7f32dc2","modified":1655540201907},{"_id":"public/archives/2021/08/index.html","hash":"a6bbc65ae21c555b0ac050603f265348408241fc","modified":1656300479066},{"_id":"source/_posts/golang-auto-deploy.md","hash":"96a2dce8c483313984f72f9c909c6bc778585168","modified":1631349607432},{"_id":"public/tags/部署/index.html","hash":"c1cb758f62645506360723ffae7493e694e5288d","modified":1655540201907},{"_id":"public/2021/09/09/golang-auto-deploy/index.html","hash":"e454b432ca287c46b28868edf19e75603a051539","modified":1655540201907},{"_id":"public/archives/2021/09/index.html","hash":"e0ab08d919b0ddf8752ca287ef3d9f6e27154022","modified":1656300479066},{"_id":"source/_posts/inflexdb-vs-timescaledb.md","hash":"f36a4e5ff02c9745066ed2a44aaf7aaf83cbe848","modified":1632238135242},{"_id":"public/page/6/index.html","hash":"54fbba2273094628863ff7baa533713228e1f6dc","modified":1656300479066},{"_id":"public/tags/influxdb/index.html","hash":"5817702a0c670c4e038e7b021a87446d28b2b94f","modified":1632235300231},{"_id":"public/tags/TimescaleDB/index.html","hash":"e5a7b9c84d2de88c1f5fda7f0434a46a57272e38","modified":1632235300231},{"_id":"public/2021/09/21/inflexdb-vs-timescaledb/index.html","hash":"1a20645e109302ec095394eeaf3b41ac6d94c959","modified":1632238136540},{"_id":"public/archives/page/6/index.html","hash":"32fe98a1f81287fda5a8ac61fcf03560ecc03921","modified":1656300479066},{"_id":"public/tags/InfluxDB/index.html","hash":"17b3479b86edbbe16fedf803b273e7df8a1165fb","modified":1632238136540},{"_id":"source/_posts/postgresql-best-backup-and-restore.md","hash":"e31b2f17ccb4c4bf8229019a0f0ca105db8a4176","modified":1637030527235},{"_id":"public/tags/时间线/index.html","hash":"b6ae2c36570acce0c8224d926a4f2bda0c427953","modified":1655540201907},{"_id":"public/tags/备份/index.html","hash":"7520c6a99b318ce1742ff5a8bd1b1412982d63e8","modified":1655540201907},{"_id":"public/tags/恢复/index.html","hash":"bf2764da78abaf9805d0fab58d19f15cd2e79ebe","modified":1655540201907},{"_id":"public/2021/11/16/postgresql-best-backup-and-restore/index.html","hash":"27e4b0297e711d8a1b1848cd72db1fd57d82d247","modified":1655540201907},{"_id":"public/archives/2021/11/index.html","hash":"73d11c8dce838fcc620a9dee51fa118322971a15","modified":1656300479066},{"_id":"source/_posts/unbearable-past.md","hash":"74db894d2b3a2bf715b9de5466d159075d05f255","modified":1639814732821},{"_id":"public/2021/12/18/unbearable-past/index.html","hash":"7af71da8a832edc4ec2e60f8698d200acd25a6b3","modified":1656300479066},{"_id":"public/archives/2021/page/2/index.html","hash":"6f59ba47ebe7422609d1c0015f917b2e64ead80d","modified":1656300479066},{"_id":"public/archives/2021/12/index.html","hash":"594702abc241c15223a9fb318a43a1215a1c161e","modified":1656300479066},{"_id":"source/_posts/linux-virtual-bridge-and-tun-tap.md","hash":"c0d2039d7722ec68bc3053bbec1dd1a323031ea0","modified":1656297415523},{"_id":"source/_posts/postgresql-cross-os-problem.md","hash":"5c98dd9f89565fdd74bf605e8bd4629216ddacee","modified":1656300470380},{"_id":"source/_posts/wget-menu.md","hash":"e5969bfdeceaaccd55f4b078f668ad3d3cfe03ac","modified":1656298070989},{"_id":"public/tags/linux/index.html","hash":"cf1065653414efba5a903fb3dcdf8097cd98c71e","modified":1656300479066},{"_id":"public/tags/tap/index.html","hash":"b34149fa4be582653f67534e7deb4767ed657001","modified":1656300479066},{"_id":"public/tags/bridge/index.html","hash":"ce7a928870462b23970efe787b07eb5ccaba711a","modified":1656300479066},{"_id":"public/tags/wget/index.html","hash":"66645bd1e67bd935a5b5cd37d6ab0e91d85ce5cf","modified":1656300479066},{"_id":"public/2022/06/27/postgresql-cross-os-problem/index.html","hash":"5feaa3e1e0fd30ac76c9f87406904229bbcb9214","modified":1656300479066},{"_id":"public/2022/06/27/wget-menu/index.html","hash":"a6e632c1f5f7e525418eaa7516a8bd8c2d4b580d","modified":1656300479066},{"_id":"public/2022/06/27/linux-virtual-bridge-and-tun-tap/index.html","hash":"b259e20f3b4602ebbf329ce5915b73a33f7bae47","modified":1656300479066},{"_id":"public/archives/2022/index.html","hash":"fc739eadb5efc76ac5d7cf001b05d4bcce3eae4b","modified":1656300479066},{"_id":"public/archives/2022/06/index.html","hash":"d04789fd672ace0724a6acde1da91c4e3cda3b7d","modified":1656300479066}],"Category":[],"Data":[],"Page":[{"title":"ip-tool","date":"2021-01-16T12:44:17.000Z","layout":"ip-tool","_content":"","source":"ip-tool/index.md","raw":"---\ntitle: ip-tool\ndate: 2021-01-16 20:44:17\nlayout: ip-tool\n---\n","updated":"2021-01-16T12:52:19.514Z","path":"ip-tool/index.html","comments":1,"_id":"ckl8zw5qt00002aah1qm90199","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-01-16T12:28:17.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-16 20:28:17\n---\n","updated":"2021-01-16T12:28:17.967Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckl8zw5qy00022aahdg3ee6hd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android 指定 DNS （为什么新用户安装完你的App后，与Api服务连接失败？）","date":"2019-07-16T13:54:30.000Z","_content":"\n> 过去一直有个问题：发现我的新用户在安装完App后，打开时提示没有网络（连接到我的Api服务器失败）<br>\n> 直到今天翻qiniu的SDK时才明白过来，问题可能在**DNS**<br>\n> 七牛的SDK一直使用了一个叫`HappyDNS`的一个库。我一直以为这是“脱裤子放屁”。<br>\n> 直到今天才明白这中间的“中国特色”\n\n# Android\n\n## 环境\n\n- 开发工具：Android Studio\n- 语言：Kotlin\n- 依赖包：\n    - com.squareup.okhttp3:okhttp:3.14.2\n    - com.qiniu:happy-dns:0.2.13\n\n## 关键代码\n\n```kotlin\nval client = OkHttpClient.Builder()\n                             .dns {\n                                 if (it == \"my.api.host.domain.name\") {\n                                     InetAddress.getAllByName(Config.SERVER_IP).toMutableList()\n                                 }else{\n                                     try{\n                                         val resolvers = mutableListOf<IResolver>()\n                                         try{\n                                             resolvers.add(Resolver(InetAddress.getByName(\"119.29.29.29\")))\n                                         }catch (e:Exception){}\n                                         try{\n                                             resolvers.add(Resolver(InetAddress.getByName(\"114.114.114.114\")))\n                                         }catch (e:Exception){}\n                                         try{\n                                             resolvers.add(Resolver(InetAddress.getByName(\"8.8.8.8\")))\n                                         }catch (e:Exception){}\n                                         if (resolvers.size == 0) throw UnknownHostException(\"$it resolver fail\")\n                                         DnsManager(NetworkInfo.normal,resolvers.toTypedArray()).queryInetAdress(Domain(it)).toMutableList()\n                                     }catch (e:Exception){\n                                         Dns.SYSTEM.lookup(it)\n                                     }\n                                 }\n                             }.build()\n```\n","source":"_posts/android-custom-dns.md","raw":"---\ntitle: Android 指定 DNS （为什么新用户安装完你的App后，与Api服务连接失败？）\ndate: 2019-07-16 21:54:30\ntags: [Android, DNS]\n---\n\n> 过去一直有个问题：发现我的新用户在安装完App后，打开时提示没有网络（连接到我的Api服务器失败）<br>\n> 直到今天翻qiniu的SDK时才明白过来，问题可能在**DNS**<br>\n> 七牛的SDK一直使用了一个叫`HappyDNS`的一个库。我一直以为这是“脱裤子放屁”。<br>\n> 直到今天才明白这中间的“中国特色”\n\n# Android\n\n## 环境\n\n- 开发工具：Android Studio\n- 语言：Kotlin\n- 依赖包：\n    - com.squareup.okhttp3:okhttp:3.14.2\n    - com.qiniu:happy-dns:0.2.13\n\n## 关键代码\n\n```kotlin\nval client = OkHttpClient.Builder()\n                             .dns {\n                                 if (it == \"my.api.host.domain.name\") {\n                                     InetAddress.getAllByName(Config.SERVER_IP).toMutableList()\n                                 }else{\n                                     try{\n                                         val resolvers = mutableListOf<IResolver>()\n                                         try{\n                                             resolvers.add(Resolver(InetAddress.getByName(\"119.29.29.29\")))\n                                         }catch (e:Exception){}\n                                         try{\n                                             resolvers.add(Resolver(InetAddress.getByName(\"114.114.114.114\")))\n                                         }catch (e:Exception){}\n                                         try{\n                                             resolvers.add(Resolver(InetAddress.getByName(\"8.8.8.8\")))\n                                         }catch (e:Exception){}\n                                         if (resolvers.size == 0) throw UnknownHostException(\"$it resolver fail\")\n                                         DnsManager(NetworkInfo.normal,resolvers.toTypedArray()).queryInetAdress(Domain(it)).toMutableList()\n                                     }catch (e:Exception){\n                                         Dns.SYSTEM.lookup(it)\n                                     }\n                                 }\n                             }.build()\n```\n","slug":"android-custom-dns","published":1,"updated":"2021-01-06T09:56:16.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5qv00012aah3s0g34gs","content":"<blockquote>\n<p>过去一直有个问题：发现我的新用户在安装完App后，打开时提示没有网络（连接到我的Api服务器失败）<br><br>直到今天翻qiniu的SDK时才明白过来，问题可能在<strong>DNS</strong><br><br>七牛的SDK一直使用了一个叫<code>HappyDNS</code>的一个库。我一直以为这是“脱裤子放屁”。<br><br>直到今天才明白这中间的“中国特色”</p>\n</blockquote>\n<h1 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>开发工具：Android Studio</li>\n<li>语言：Kotlin</li>\n<li>依赖包：<ul>\n<li>com.squareup.okhttp3:okhttp:3.14.2</li>\n<li>com.qiniu:happy-dns:0.2.13</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> client = OkHttpClient.Builder()</span><br><span class=\"line\">                             .dns &#123;</span><br><span class=\"line\">                                 <span class=\"keyword\">if</span> (it == <span class=\"string\">&quot;my.api.host.domain.name&quot;</span>) &#123;</span><br><span class=\"line\">                                     InetAddress.getAllByName(Config.SERVER_IP).toMutableList()</span><br><span class=\"line\">                                 &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                     <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                         <span class=\"keyword\">val</span> resolvers = mutableListOf&lt;IResolver&gt;()</span><br><span class=\"line\">                                         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                             resolvers.add(Resolver(InetAddress.getByName(<span class=\"string\">&quot;119.29.29.29&quot;</span>)))</span><br><span class=\"line\">                                         &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;&#125;</span><br><span class=\"line\">                                         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                             resolvers.add(Resolver(InetAddress.getByName(<span class=\"string\">&quot;114.114.114.114&quot;</span>)))</span><br><span class=\"line\">                                         &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;&#125;</span><br><span class=\"line\">                                         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                             resolvers.add(Resolver(InetAddress.getByName(<span class=\"string\">&quot;8.8.8.8&quot;</span>)))</span><br><span class=\"line\">                                         &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;&#125;</span><br><span class=\"line\">                                         <span class=\"keyword\">if</span> (resolvers.size == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> UnknownHostException(<span class=\"string\">&quot;<span class=\"variable\">$it</span> resolver fail&quot;</span>)</span><br><span class=\"line\">                                         DnsManager(NetworkInfo.normal,resolvers.toTypedArray()).queryInetAdress(Domain(it)).toMutableList()</span><br><span class=\"line\">                                     &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">                                         Dns.SYSTEM.lookup(it)</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                 &#125;</span><br><span class=\"line\">                             &#125;.build()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>过去一直有个问题：发现我的新用户在安装完App后，打开时提示没有网络（连接到我的Api服务器失败）<br><br>直到今天翻qiniu的SDK时才明白过来，问题可能在<strong>DNS</strong><br><br>七牛的SDK一直使用了一个叫<code>HappyDNS</code>的一个库。我一直以为这是“脱裤子放屁”。<br><br>直到今天才明白这中间的“中国特色”</p>\n</blockquote>\n<h1 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>开发工具：Android Studio</li>\n<li>语言：Kotlin</li>\n<li>依赖包：<ul>\n<li>com.squareup.okhttp3:okhttp:3.14.2</li>\n<li>com.qiniu:happy-dns:0.2.13</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> client = OkHttpClient.Builder()</span><br><span class=\"line\">                             .dns &#123;</span><br><span class=\"line\">                                 <span class=\"keyword\">if</span> (it == <span class=\"string\">&quot;my.api.host.domain.name&quot;</span>) &#123;</span><br><span class=\"line\">                                     InetAddress.getAllByName(Config.SERVER_IP).toMutableList()</span><br><span class=\"line\">                                 &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                     <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                         <span class=\"keyword\">val</span> resolvers = mutableListOf&lt;IResolver&gt;()</span><br><span class=\"line\">                                         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                             resolvers.add(Resolver(InetAddress.getByName(<span class=\"string\">&quot;119.29.29.29&quot;</span>)))</span><br><span class=\"line\">                                         &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;&#125;</span><br><span class=\"line\">                                         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                             resolvers.add(Resolver(InetAddress.getByName(<span class=\"string\">&quot;114.114.114.114&quot;</span>)))</span><br><span class=\"line\">                                         &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;&#125;</span><br><span class=\"line\">                                         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                                             resolvers.add(Resolver(InetAddress.getByName(<span class=\"string\">&quot;8.8.8.8&quot;</span>)))</span><br><span class=\"line\">                                         &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;&#125;</span><br><span class=\"line\">                                         <span class=\"keyword\">if</span> (resolvers.size == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> UnknownHostException(<span class=\"string\">&quot;<span class=\"variable\">$it</span> resolver fail&quot;</span>)</span><br><span class=\"line\">                                         DnsManager(NetworkInfo.normal,resolvers.toTypedArray()).queryInetAdress(Domain(it)).toMutableList()</span><br><span class=\"line\">                                     &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">                                         Dns.SYSTEM.lookup(it)</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                 &#125;</span><br><span class=\"line\">                             &#125;.build()</span><br></pre></td></tr></table></figure>"},{"title":"FreeBSD 12 构建 mosquitto v2.0.10 + websockets + TLS + PostgreSQL认证","date":"2021-01-31T16:07:53.000Z","_content":"\n# MQTT服务器需求\n\n- 支持Websocket\n- 支持命令行输出json输出\n- 支持通过PostgreSQL认证用户\n\n```mermaid\ngraph LR\npg[(PostgreSQL)]\nauth(Auth plugin)\nmos([Mosquitto])\nws(LibWebsockets)\nc(MQTT Client)\nb(Web Browser)\n\nclick auth \"https://github.com/iegomez/mosquitto-go-auth\" _blank\nclick pg \"https://www.postgresql.org/\" \"PostgreSQL 官方\" _blank\nclick mos \"https://mosquitto.org/\" \"mosquitto 官方\" _blank\n\npg --- auth\nauth --- mos\nmos --- ws\nws --- b\nmos --- c\n```\n\n# 源码\n\n## mosquitto 资源\n\n官网源码包下载地址： https://mosquitto.org/download/\n\n- 当前最新版本2.0.10： https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz\n\n## 官方推荐认证扩展\n\nhttps://github.com/iegomez/mosquitto-go-auth\n\n# 编译\n\n## 编译 mosquitto\n\n### 安装依赖：\n\n- `gmake` 编译工具\n- `cmake` 编译工具\n- `libcjson` 命令行支持json格式输出依赖\n- `libwebsockets` websocket依赖\n\n```shell\npkg install gmake libcjson\n```\n\n根据开发者描述:https://github.com/eclipse/mosquitto/issues/2060\n`libwebsockets` 高于`v2.4.2`后会默认关闭`LWS_WITH_EXTERNAL_POLL`选项.导致`mosquitto`功能受损.\n\n所以,要么选择低版本的`libwebsockets`,要么重新手动编译高版本.\n\n这里选择重新手动编译高版本,开启`LWS_WITH_EXTERNAL_POLL`选项.\n\n* `cmake` 编译:\n\n```shell\ngit clone https://libwebsockets.org/repo/libwebsockets\ncd libwebsockets\ngit checkout v4.1.6\n```\n> 在`Unix`上编译时,需将`CMakefile.txt`中的`-Werror`项,删去!!!!\n> 否则编译不了\n```shell\ncd ..\nmkdir build\ncd build\ncmake \\\n-DLWS_WITH_EXTERNAL_POLL=ON \\\n-DLWS_WITH_HTTP2=ON \\\n-DLWS_WITHOUT_TESTAPPS=ON \\\n-DLWS_UNIX_SOCK=ON \\\n-DLWS_IPV6=ON \\\n../libwebsockets\nmake\nmake install\n```\n\n- `cmake` on MocOS\n```shell\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/opt/libwebsockets \\\n-DLWS_WITH_EXTERNAL_POLL=ON \\\n-DLWS_WITH_HTTP2=ON \\\n-DLWS_WITHOUT_TESTAPPS=ON \\\n-DLWS_UNIX_SOCK=ON \\\n-DLWS_IPV6=ON \\\n-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\\n../libwebsockets\n```\n\n### 编译\n\n* `gmake` 编译:\n\n配置`config.mk`\n\n- WITH_WEBSOCKETS:=no -> yes\n- WITH_CJSON:=yes\n\n```shell\ngmake CFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\"\ngmake install\n```\n\n* `cmake` 编译:\n\n```shell\nmkdir build\ncd build\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local \\\n-DOPENSSL_ROOT_DIR=/usr/local \\\n-DWITH_WEBSOCKETS=ON \\\n-DDOCUMENTATION=OFF \\\n-DCMAKE_C_FLAGS=\"-I/usr/local/include\" \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-L/usr/local/lib\" \\\n../mosquitto\nmake\nmake install\n```\n\n- 'cmake' on MacOS\n```shell\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/opt/mosquitto \\\n-DDOCUMENTATION=OFF \\\n-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\\n-DWITH_WEBSOCKETS=ON \\\n-E env LDFLAGS=\"-L/usr/local/opt/cjson/lib -L/usr/local/opt/libwebsockets/lib\" \\\n-DCMAKE_C_FLAGS=\"-I/usr/local/opt/cjson/include -I/usr/local/opt/libwebsockets/include -I/usr/local/opt/openssl/include\" \\\n../mosquitto\n```\n\n## 编译 mosquitto-go-auth\n\n### 安装依赖：\n\n- `go` 编译工具，此为`golang`源码\n\n```shell\npkg install go\n```\n\n### 配置国内源\n\n```shell\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n\n### 编译\n\n```shell\ngmake\n```\n","source":"_posts/build-mosquitto-on-freebsd.md","raw":"---\ntitle: FreeBSD 12 构建 mosquitto v2.0.10 + websockets + TLS + PostgreSQL认证 \ndate: 2021-02-01 00:07:53\ntags: [mosquitto, mqtt, PostgreSQL]\n---\n\n# MQTT服务器需求\n\n- 支持Websocket\n- 支持命令行输出json输出\n- 支持通过PostgreSQL认证用户\n\n```mermaid\ngraph LR\npg[(PostgreSQL)]\nauth(Auth plugin)\nmos([Mosquitto])\nws(LibWebsockets)\nc(MQTT Client)\nb(Web Browser)\n\nclick auth \"https://github.com/iegomez/mosquitto-go-auth\" _blank\nclick pg \"https://www.postgresql.org/\" \"PostgreSQL 官方\" _blank\nclick mos \"https://mosquitto.org/\" \"mosquitto 官方\" _blank\n\npg --- auth\nauth --- mos\nmos --- ws\nws --- b\nmos --- c\n```\n\n# 源码\n\n## mosquitto 资源\n\n官网源码包下载地址： https://mosquitto.org/download/\n\n- 当前最新版本2.0.10： https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz\n\n## 官方推荐认证扩展\n\nhttps://github.com/iegomez/mosquitto-go-auth\n\n# 编译\n\n## 编译 mosquitto\n\n### 安装依赖：\n\n- `gmake` 编译工具\n- `cmake` 编译工具\n- `libcjson` 命令行支持json格式输出依赖\n- `libwebsockets` websocket依赖\n\n```shell\npkg install gmake libcjson\n```\n\n根据开发者描述:https://github.com/eclipse/mosquitto/issues/2060\n`libwebsockets` 高于`v2.4.2`后会默认关闭`LWS_WITH_EXTERNAL_POLL`选项.导致`mosquitto`功能受损.\n\n所以,要么选择低版本的`libwebsockets`,要么重新手动编译高版本.\n\n这里选择重新手动编译高版本,开启`LWS_WITH_EXTERNAL_POLL`选项.\n\n* `cmake` 编译:\n\n```shell\ngit clone https://libwebsockets.org/repo/libwebsockets\ncd libwebsockets\ngit checkout v4.1.6\n```\n> 在`Unix`上编译时,需将`CMakefile.txt`中的`-Werror`项,删去!!!!\n> 否则编译不了\n```shell\ncd ..\nmkdir build\ncd build\ncmake \\\n-DLWS_WITH_EXTERNAL_POLL=ON \\\n-DLWS_WITH_HTTP2=ON \\\n-DLWS_WITHOUT_TESTAPPS=ON \\\n-DLWS_UNIX_SOCK=ON \\\n-DLWS_IPV6=ON \\\n../libwebsockets\nmake\nmake install\n```\n\n- `cmake` on MocOS\n```shell\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/opt/libwebsockets \\\n-DLWS_WITH_EXTERNAL_POLL=ON \\\n-DLWS_WITH_HTTP2=ON \\\n-DLWS_WITHOUT_TESTAPPS=ON \\\n-DLWS_UNIX_SOCK=ON \\\n-DLWS_IPV6=ON \\\n-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\\n../libwebsockets\n```\n\n### 编译\n\n* `gmake` 编译:\n\n配置`config.mk`\n\n- WITH_WEBSOCKETS:=no -> yes\n- WITH_CJSON:=yes\n\n```shell\ngmake CFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\"\ngmake install\n```\n\n* `cmake` 编译:\n\n```shell\nmkdir build\ncd build\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local \\\n-DOPENSSL_ROOT_DIR=/usr/local \\\n-DWITH_WEBSOCKETS=ON \\\n-DDOCUMENTATION=OFF \\\n-DCMAKE_C_FLAGS=\"-I/usr/local/include\" \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-L/usr/local/lib\" \\\n../mosquitto\nmake\nmake install\n```\n\n- 'cmake' on MacOS\n```shell\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/opt/mosquitto \\\n-DDOCUMENTATION=OFF \\\n-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\\n-DWITH_WEBSOCKETS=ON \\\n-E env LDFLAGS=\"-L/usr/local/opt/cjson/lib -L/usr/local/opt/libwebsockets/lib\" \\\n-DCMAKE_C_FLAGS=\"-I/usr/local/opt/cjson/include -I/usr/local/opt/libwebsockets/include -I/usr/local/opt/openssl/include\" \\\n../mosquitto\n```\n\n## 编译 mosquitto-go-auth\n\n### 安装依赖：\n\n- `go` 编译工具，此为`golang`源码\n\n```shell\npkg install go\n```\n\n### 配置国内源\n\n```shell\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n\n### 编译\n\n```shell\ngmake\n```\n","slug":"build-mosquitto-on-freebsd","published":1,"updated":"2021-04-08T16:07:54.746Z","_id":"ckl8zw5qz00032aah57c59i6x","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MQTT服务器需求\"><a href=\"#MQTT服务器需求\" class=\"headerlink\" title=\"MQTT服务器需求\"></a>MQTT服务器需求</h1><ul>\n<li>支持Websocket</li>\n<li>支持命令行输出json输出</li>\n<li>支持通过PostgreSQL认证用户</li>\n</ul>\n<pre class=\"mermaid\">graph LR\npg[(PostgreSQL)]\nauth(Auth plugin)\nmos([Mosquitto])\nws(LibWebsockets)\nc(MQTT Client)\nb(Web Browser)\n\nclick auth \"https://github.com/iegomez/mosquitto-go-auth\" _blank\nclick pg \"https://www.postgresql.org/\" \"PostgreSQL 官方\" _blank\nclick mos \"https://mosquitto.org/\" \"mosquitto 官方\" _blank\n\npg --- auth\nauth --- mos\nmos --- ws\nws --- b\nmos --- c</pre>\n\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><h2 id=\"mosquitto-资源\"><a href=\"#mosquitto-资源\" class=\"headerlink\" title=\"mosquitto 资源\"></a>mosquitto 资源</h2><p>官网源码包下载地址： <a class=\"link\"   href=\"https://mosquitto.org/download/\" >https://mosquitto.org/download/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>当前最新版本2.0.10： <a class=\"link\"   href=\"https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz\" >https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h2 id=\"官方推荐认证扩展\"><a href=\"#官方推荐认证扩展\" class=\"headerlink\" title=\"官方推荐认证扩展\"></a>官方推荐认证扩展</h2><p><a class=\"link\"   href=\"https://github.com/iegomez/mosquitto-go-auth\" >https://github.com/iegomez/mosquitto-go-auth<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h2 id=\"编译-mosquitto\"><a href=\"#编译-mosquitto\" class=\"headerlink\" title=\"编译 mosquitto\"></a>编译 mosquitto</h2><h3 id=\"安装依赖：\"><a href=\"#安装依赖：\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h3><ul>\n<li><code>gmake</code> 编译工具</li>\n<li><code>cmake</code> 编译工具</li>\n<li><code>libcjson</code> 命令行支持json格式输出依赖</li>\n<li><code>libwebsockets</code> websocket依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install gmake libcjson</span><br></pre></td></tr></table></figure>\n<p>根据开发者描述:<a class=\"link\"   href=\"https://github.com/eclipse/mosquitto/issues/2060\" >https://github.com/eclipse/mosquitto/issues/2060<i class=\"fas fa-external-link-alt\"></i></a><br><code>libwebsockets</code> 高于<code>v2.4.2</code>后会默认关闭<code>LWS_WITH_EXTERNAL_POLL</code>选项.导致<code>mosquitto</code>功能受损.</p>\n<p>所以,要么选择低版本的<code>libwebsockets</code>,要么重新手动编译高版本.</p>\n<p>这里选择重新手动编译高版本,开启<code>LWS_WITH_EXTERNAL_POLL</code>选项.</p>\n<ul>\n<li><code>cmake</code> 编译:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://libwebsockets.org/repo/libwebsockets</span><br><span class=\"line\">cd libwebsockets</span><br><span class=\"line\">git checkout v4.1.6</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在<code>Unix</code>上编译时,需将<code>CMakefile.txt</code>中的<code>-Werror</code>项,删去!!!!<br>否则编译不了</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake \\</span><br><span class=\"line\">-DLWS_WITH_EXTERNAL_POLL=ON \\</span><br><span class=\"line\">-DLWS_WITH_HTTP2=ON \\</span><br><span class=\"line\">-DLWS_WITHOUT_TESTAPPS=ON \\</span><br><span class=\"line\">-DLWS_UNIX_SOCK=ON \\</span><br><span class=\"line\">-DLWS_IPV6=ON \\</span><br><span class=\"line\">../libwebsockets</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cmake</code> on MocOS<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/local/opt/libwebsockets \\</span><br><span class=\"line\">-DLWS_WITH_EXTERNAL_POLL=ON \\</span><br><span class=\"line\">-DLWS_WITH_HTTP2=ON \\</span><br><span class=\"line\">-DLWS_WITHOUT_TESTAPPS=ON \\</span><br><span class=\"line\">-DLWS_UNIX_SOCK=ON \\</span><br><span class=\"line\">-DLWS_IPV6=ON \\</span><br><span class=\"line\">-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\</span><br><span class=\"line\">../libwebsockets</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3></li>\n</ul>\n<ul>\n<li><code>gmake</code> 编译:</li>\n</ul>\n<p>配置<code>config.mk</code></p>\n<ul>\n<li>WITH_WEBSOCKETS:=no -&gt; yes</li>\n<li>WITH_CJSON:=yes</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmake CFLAGS=&quot;-I/usr/local/include&quot; LDFLAGS=&quot;-L/usr/local/lib&quot;</span><br><span class=\"line\">gmake install</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cmake</code> 编译:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/local \\</span><br><span class=\"line\">-DOPENSSL_ROOT_DIR=/usr/local \\</span><br><span class=\"line\">-DWITH_WEBSOCKETS=ON \\</span><br><span class=\"line\">-DDOCUMENTATION=OFF \\</span><br><span class=\"line\">-DCMAKE_C_FLAGS=&quot;-I/usr/local/include&quot; \\</span><br><span class=\"line\">-DCMAKE_EXE_LINKER_FLAGS=&quot;-L/usr/local/lib&quot; \\</span><br><span class=\"line\">../mosquitto</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<ul>\n<li>‘cmake’ on MacOS<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/local/opt/mosquitto \\</span><br><span class=\"line\">-DDOCUMENTATION=OFF \\</span><br><span class=\"line\">-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\</span><br><span class=\"line\">-DWITH_WEBSOCKETS=ON \\</span><br><span class=\"line\">-E env LDFLAGS=&quot;-L/usr/local/opt/cjson/lib -L/usr/local/opt/libwebsockets/lib&quot; \\</span><br><span class=\"line\">-DCMAKE_C_FLAGS=&quot;-I/usr/local/opt/cjson/include -I/usr/local/opt/libwebsockets/include -I/usr/local/opt/openssl/include&quot; \\</span><br><span class=\"line\">../mosquitto</span><br></pre></td></tr></table></figure>\n<h2 id=\"编译-mosquitto-go-auth\"><a href=\"#编译-mosquitto-go-auth\" class=\"headerlink\" title=\"编译 mosquitto-go-auth\"></a>编译 mosquitto-go-auth</h2></li>\n</ul>\n<h3 id=\"安装依赖：-1\"><a href=\"#安装依赖：-1\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h3><ul>\n<li><code>go</code> 编译工具，此为<code>golang</code>源码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install go</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置国内源\"><a href=\"#配置国内源\" class=\"headerlink\" title=\"配置国内源\"></a>配置国内源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br><span class=\"line\">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译-2\"><a href=\"#编译-2\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmake</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MQTT服务器需求\"><a href=\"#MQTT服务器需求\" class=\"headerlink\" title=\"MQTT服务器需求\"></a>MQTT服务器需求</h1><ul>\n<li>支持Websocket</li>\n<li>支持命令行输出json输出</li>\n<li>支持通过PostgreSQL认证用户</li>\n</ul>\n<pre class=\"mermaid\">graph LR\npg[(PostgreSQL)]\nauth(Auth plugin)\nmos([Mosquitto])\nws(LibWebsockets)\nc(MQTT Client)\nb(Web Browser)\n\nclick auth \"https://github.com/iegomez/mosquitto-go-auth\" _blank\nclick pg \"https://www.postgresql.org/\" \"PostgreSQL 官方\" _blank\nclick mos \"https://mosquitto.org/\" \"mosquitto 官方\" _blank\n\npg --- auth\nauth --- mos\nmos --- ws\nws --- b\nmos --- c</pre>\n\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><h2 id=\"mosquitto-资源\"><a href=\"#mosquitto-资源\" class=\"headerlink\" title=\"mosquitto 资源\"></a>mosquitto 资源</h2><p>官网源码包下载地址： <a class=\"link\"   href=\"https://mosquitto.org/download/\" >https://mosquitto.org/download/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>当前最新版本2.0.10： <a class=\"link\"   href=\"https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz\" >https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h2 id=\"官方推荐认证扩展\"><a href=\"#官方推荐认证扩展\" class=\"headerlink\" title=\"官方推荐认证扩展\"></a>官方推荐认证扩展</h2><p><a class=\"link\"   href=\"https://github.com/iegomez/mosquitto-go-auth\" >https://github.com/iegomez/mosquitto-go-auth<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h2 id=\"编译-mosquitto\"><a href=\"#编译-mosquitto\" class=\"headerlink\" title=\"编译 mosquitto\"></a>编译 mosquitto</h2><h3 id=\"安装依赖：\"><a href=\"#安装依赖：\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h3><ul>\n<li><code>gmake</code> 编译工具</li>\n<li><code>cmake</code> 编译工具</li>\n<li><code>libcjson</code> 命令行支持json格式输出依赖</li>\n<li><code>libwebsockets</code> websocket依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install gmake libcjson</span><br></pre></td></tr></table></figure>\n<p>根据开发者描述:<a class=\"link\"   href=\"https://github.com/eclipse/mosquitto/issues/2060\" >https://github.com/eclipse/mosquitto/issues/2060<i class=\"fas fa-external-link-alt\"></i></a><br><code>libwebsockets</code> 高于<code>v2.4.2</code>后会默认关闭<code>LWS_WITH_EXTERNAL_POLL</code>选项.导致<code>mosquitto</code>功能受损.</p>\n<p>所以,要么选择低版本的<code>libwebsockets</code>,要么重新手动编译高版本.</p>\n<p>这里选择重新手动编译高版本,开启<code>LWS_WITH_EXTERNAL_POLL</code>选项.</p>\n<ul>\n<li><code>cmake</code> 编译:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://libwebsockets.org/repo/libwebsockets</span><br><span class=\"line\">cd libwebsockets</span><br><span class=\"line\">git checkout v4.1.6</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在<code>Unix</code>上编译时,需将<code>CMakefile.txt</code>中的<code>-Werror</code>项,删去!!!!<br>否则编译不了</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake \\</span><br><span class=\"line\">-DLWS_WITH_EXTERNAL_POLL=ON \\</span><br><span class=\"line\">-DLWS_WITH_HTTP2=ON \\</span><br><span class=\"line\">-DLWS_WITHOUT_TESTAPPS=ON \\</span><br><span class=\"line\">-DLWS_UNIX_SOCK=ON \\</span><br><span class=\"line\">-DLWS_IPV6=ON \\</span><br><span class=\"line\">../libwebsockets</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cmake</code> on MocOS<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/local/opt/libwebsockets \\</span><br><span class=\"line\">-DLWS_WITH_EXTERNAL_POLL=ON \\</span><br><span class=\"line\">-DLWS_WITH_HTTP2=ON \\</span><br><span class=\"line\">-DLWS_WITHOUT_TESTAPPS=ON \\</span><br><span class=\"line\">-DLWS_UNIX_SOCK=ON \\</span><br><span class=\"line\">-DLWS_IPV6=ON \\</span><br><span class=\"line\">-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\</span><br><span class=\"line\">../libwebsockets</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3></li>\n</ul>\n<ul>\n<li><code>gmake</code> 编译:</li>\n</ul>\n<p>配置<code>config.mk</code></p>\n<ul>\n<li>WITH_WEBSOCKETS:=no -&gt; yes</li>\n<li>WITH_CJSON:=yes</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmake CFLAGS=&quot;-I/usr/local/include&quot; LDFLAGS=&quot;-L/usr/local/lib&quot;</span><br><span class=\"line\">gmake install</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cmake</code> 编译:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/local \\</span><br><span class=\"line\">-DOPENSSL_ROOT_DIR=/usr/local \\</span><br><span class=\"line\">-DWITH_WEBSOCKETS=ON \\</span><br><span class=\"line\">-DDOCUMENTATION=OFF \\</span><br><span class=\"line\">-DCMAKE_C_FLAGS=&quot;-I/usr/local/include&quot; \\</span><br><span class=\"line\">-DCMAKE_EXE_LINKER_FLAGS=&quot;-L/usr/local/lib&quot; \\</span><br><span class=\"line\">../mosquitto</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<ul>\n<li>‘cmake’ on MacOS<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/local/opt/mosquitto \\</span><br><span class=\"line\">-DDOCUMENTATION=OFF \\</span><br><span class=\"line\">-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \\</span><br><span class=\"line\">-DWITH_WEBSOCKETS=ON \\</span><br><span class=\"line\">-E env LDFLAGS=&quot;-L/usr/local/opt/cjson/lib -L/usr/local/opt/libwebsockets/lib&quot; \\</span><br><span class=\"line\">-DCMAKE_C_FLAGS=&quot;-I/usr/local/opt/cjson/include -I/usr/local/opt/libwebsockets/include -I/usr/local/opt/openssl/include&quot; \\</span><br><span class=\"line\">../mosquitto</span><br></pre></td></tr></table></figure>\n<h2 id=\"编译-mosquitto-go-auth\"><a href=\"#编译-mosquitto-go-auth\" class=\"headerlink\" title=\"编译 mosquitto-go-auth\"></a>编译 mosquitto-go-auth</h2></li>\n</ul>\n<h3 id=\"安装依赖：-1\"><a href=\"#安装依赖：-1\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h3><ul>\n<li><code>go</code> 编译工具，此为<code>golang</code>源码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install go</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置国内源\"><a href=\"#配置国内源\" class=\"headerlink\" title=\"配置国内源\"></a>配置国内源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br><span class=\"line\">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译-2\"><a href=\"#编译-2\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmake</span><br></pre></td></tr></table></figure>"},{"title":"编译opencore-amr for iOS8并支持bitcode","date":"2017-01-05T09:28:45.000Z","_content":"\n# 作用\n\n`amr` 是一个很适合在线传输的音频格式。但悲摧的是`apple`早就不支持它了。原因不明。\n\n另一层是微信也是使用的这种格式来录制音频。\n\n不只`apple`不支持它，万能的`cocoapods`也没有支持的。只好自己动手了。\n\n止于当前，我找到最合适的，就是`opencore-amr`库。这个库12年写就。这么多年也没见怎么更新。[捂脸]😂\n\n找到了一个好心人写的支持`bitcode`和8.0的编译脚本\n\n# 原料\n\ngithub:[opencore-amr-IOS](https://github.com/feuvan/opencore-amr-iOS)\n\nsourceforge:[opencore-amr 0.1.3](https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.3.tar.gz/download)\n\n## 编译脚本\n```bash\n#!/bin/sh\n\nset -xe\n\nVERSION=\"0.1.3\"\nSDKVERSION=\"8.4\"\nLIBSRCNAME=\"opencore-amr\"\n\nCURRENTPATH=`pwd`\n\nmkdir -p \"${CURRENTPATH}/src\"\ntar zxvf ${LIBSRCNAME}-${VERSION}.tar.gz -C \"${CURRENTPATH}/src\"\ncd \"${CURRENTPATH}/src/${LIBSRCNAME}-${VERSION}\"\n\nDEVELOPER=`xcode-select -print-path`\nDEST=\"${CURRENTPATH}/lib-ios\"\nmkdir -p \"${DEST}\"\n\nARCHS=\"armv7 armv7s arm64 i386 x86_64\"\n# ARCHS=\"armv7\"\nLIBS=\"libopencore-amrnb.a libopencore-amrwb.a\"\n\nDEVELOPER=`xcode-select -print-path`\n\nfor arch in $ARCHS; do\ncase $arch in\narm*)\n\nIOSV=\"-miphoneos-version-min=7.0\"\nif [ $arch == \"arm64\" ]\nthen\nIOSV=\"-miphoneos-version-min=7.0\"\nfi\n\necho \"Building for iOS $arch ****************\"\nSDKROOT=\"$(xcrun --sdk iphoneos --show-sdk-path)\"\nCC=\"$(xcrun --sdk iphoneos -f clang)\"\nCXX=\"$(xcrun --sdk iphoneos -f clang++)\"\nCPP=\"$(xcrun -sdk iphonesimulator -f clang++)\"\nCFLAGS=\"-isysroot $SDKROOT -arch $arch $IOSV -isystem $SDKROOT/usr/include -fembed-bitcode\"\nCXXFLAGS=$CFLAGS\nCPPFLAGS=$CFLAGS\nexport CC CXX CFLAGS CXXFLAGS CPPFLAGS\n\n./configure \\\n--host=arm-apple-darwin \\\n--prefix=$DEST \\\n--disable-shared --enable-static\n;;\n*)\nIOSV=\"-mios-simulator-version-min=7.0\"\necho \"Building for iOS $arch*****************\"\n\nSDKROOT=`xcodebuild -version -sdk iphonesimulator Path`\nCC=\"$(xcrun -sdk iphoneos -f clang)\"\nCXX=\"$(xcrun -sdk iphonesimulator -f clang++)\"\nCPP=\"$(xcrun -sdk iphonesimulator -f clang++)\"\nCFLAGS=\"-isysroot $SDKROOT -arch $arch $IOSV -isystem $SDKROOT/usr/include -fembed-bitcode\"\nCXXFLAGS=$CFLAGS\nCPPFLAGS=$CFLAGS\nexport CC CXX CFLAGS CXXFLAGS CPPFLAGS\n./configure \\\n--prefix=$DEST \\\n--disable-shared\n;;\nesac\nmake > /dev/null\nmake install\nmake clean\nfor i in $LIBS; do\nmv $DEST/lib/$i $DEST/lib/$i.$arch\ndone\ndone\n\nfor i in $LIBS; do\ninput=\"\"\nfor arch in $ARCHS; do\ninput=\"$input $DEST/lib/$i.$arch\"\ndone\nlipo -create -output $DEST/lib/$i $input\ndone\n```\n## 编译方式\n```bash\n> mkdir opencore-amr\n> cd opencore-amr\n> #把上方的脚本内容放到build.sh中。去下载0.1.3版的包，弄成下边的样子\n> ls\nbuild.sh\t\t\t\topencore-amr-0.1.3.tar.gz\n> bash build.sh\n> .....\n> #完事后果子在：lib-ios文件夹中\n> ls\n  build.sh\t\t\tlib-ios\t\t\t\topencore-amr-0.1.3.tar.gz\tsrc\n```\n","source":"_posts/build-opencore-amr.md","raw":"---\ntitle: 编译opencore-amr for iOS8并支持bitcode\ndate: 2017-01-05 17:28:45\ntags: [xcode, opencore-amr, amr, ios]\n---\n\n# 作用\n\n`amr` 是一个很适合在线传输的音频格式。但悲摧的是`apple`早就不支持它了。原因不明。\n\n另一层是微信也是使用的这种格式来录制音频。\n\n不只`apple`不支持它，万能的`cocoapods`也没有支持的。只好自己动手了。\n\n止于当前，我找到最合适的，就是`opencore-amr`库。这个库12年写就。这么多年也没见怎么更新。[捂脸]😂\n\n找到了一个好心人写的支持`bitcode`和8.0的编译脚本\n\n# 原料\n\ngithub:[opencore-amr-IOS](https://github.com/feuvan/opencore-amr-iOS)\n\nsourceforge:[opencore-amr 0.1.3](https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.3.tar.gz/download)\n\n## 编译脚本\n```bash\n#!/bin/sh\n\nset -xe\n\nVERSION=\"0.1.3\"\nSDKVERSION=\"8.4\"\nLIBSRCNAME=\"opencore-amr\"\n\nCURRENTPATH=`pwd`\n\nmkdir -p \"${CURRENTPATH}/src\"\ntar zxvf ${LIBSRCNAME}-${VERSION}.tar.gz -C \"${CURRENTPATH}/src\"\ncd \"${CURRENTPATH}/src/${LIBSRCNAME}-${VERSION}\"\n\nDEVELOPER=`xcode-select -print-path`\nDEST=\"${CURRENTPATH}/lib-ios\"\nmkdir -p \"${DEST}\"\n\nARCHS=\"armv7 armv7s arm64 i386 x86_64\"\n# ARCHS=\"armv7\"\nLIBS=\"libopencore-amrnb.a libopencore-amrwb.a\"\n\nDEVELOPER=`xcode-select -print-path`\n\nfor arch in $ARCHS; do\ncase $arch in\narm*)\n\nIOSV=\"-miphoneos-version-min=7.0\"\nif [ $arch == \"arm64\" ]\nthen\nIOSV=\"-miphoneos-version-min=7.0\"\nfi\n\necho \"Building for iOS $arch ****************\"\nSDKROOT=\"$(xcrun --sdk iphoneos --show-sdk-path)\"\nCC=\"$(xcrun --sdk iphoneos -f clang)\"\nCXX=\"$(xcrun --sdk iphoneos -f clang++)\"\nCPP=\"$(xcrun -sdk iphonesimulator -f clang++)\"\nCFLAGS=\"-isysroot $SDKROOT -arch $arch $IOSV -isystem $SDKROOT/usr/include -fembed-bitcode\"\nCXXFLAGS=$CFLAGS\nCPPFLAGS=$CFLAGS\nexport CC CXX CFLAGS CXXFLAGS CPPFLAGS\n\n./configure \\\n--host=arm-apple-darwin \\\n--prefix=$DEST \\\n--disable-shared --enable-static\n;;\n*)\nIOSV=\"-mios-simulator-version-min=7.0\"\necho \"Building for iOS $arch*****************\"\n\nSDKROOT=`xcodebuild -version -sdk iphonesimulator Path`\nCC=\"$(xcrun -sdk iphoneos -f clang)\"\nCXX=\"$(xcrun -sdk iphonesimulator -f clang++)\"\nCPP=\"$(xcrun -sdk iphonesimulator -f clang++)\"\nCFLAGS=\"-isysroot $SDKROOT -arch $arch $IOSV -isystem $SDKROOT/usr/include -fembed-bitcode\"\nCXXFLAGS=$CFLAGS\nCPPFLAGS=$CFLAGS\nexport CC CXX CFLAGS CXXFLAGS CPPFLAGS\n./configure \\\n--prefix=$DEST \\\n--disable-shared\n;;\nesac\nmake > /dev/null\nmake install\nmake clean\nfor i in $LIBS; do\nmv $DEST/lib/$i $DEST/lib/$i.$arch\ndone\ndone\n\nfor i in $LIBS; do\ninput=\"\"\nfor arch in $ARCHS; do\ninput=\"$input $DEST/lib/$i.$arch\"\ndone\nlipo -create -output $DEST/lib/$i $input\ndone\n```\n## 编译方式\n```bash\n> mkdir opencore-amr\n> cd opencore-amr\n> #把上方的脚本内容放到build.sh中。去下载0.1.3版的包，弄成下边的样子\n> ls\nbuild.sh\t\t\t\topencore-amr-0.1.3.tar.gz\n> bash build.sh\n> .....\n> #完事后果子在：lib-ios文件夹中\n> ls\n  build.sh\t\t\tlib-ios\t\t\t\topencore-amr-0.1.3.tar.gz\tsrc\n```\n","slug":"build-opencore-amr","published":1,"updated":"2021-01-06T09:56:16.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r200052aah9w07ceyf","content":"<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p><code>amr</code> 是一个很适合在线传输的音频格式。但悲摧的是<code>apple</code>早就不支持它了。原因不明。</p>\n<p>另一层是微信也是使用的这种格式来录制音频。</p>\n<p>不只<code>apple</code>不支持它，万能的<code>cocoapods</code>也没有支持的。只好自己动手了。</p>\n<p>止于当前，我找到最合适的，就是<code>opencore-amr</code>库。这个库12年写就。这么多年也没见怎么更新。[捂脸]😂</p>\n<p>找到了一个好心人写的支持<code>bitcode</code>和8.0的编译脚本</p>\n<h1 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h1><p>github:<a class=\"link\"   href=\"https://github.com/feuvan/opencore-amr-iOS\" >opencore-amr-IOS<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>sourceforge:<a class=\"link\"   href=\"https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.3.tar.gz/download\" >opencore-amr 0.1.3<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"编译脚本\"><a href=\"#编译脚本\" class=\"headerlink\" title=\"编译脚本\"></a>编译脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -xe</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION=<span class=\"string\">&quot;0.1.3&quot;</span></span><br><span class=\"line\">SDKVERSION=<span class=\"string\">&quot;8.4&quot;</span></span><br><span class=\"line\">LIBSRCNAME=<span class=\"string\">&quot;opencore-amr&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">CURRENTPATH=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/src&quot;</span></span><br><span class=\"line\">tar zxvf <span class=\"variable\">$&#123;LIBSRCNAME&#125;</span>-<span class=\"variable\">$&#123;VERSION&#125;</span>.tar.gz -C <span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/src&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/src/<span class=\"variable\">$&#123;LIBSRCNAME&#125;</span>-<span class=\"variable\">$&#123;VERSION&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEVELOPER=`xcode-select -print-path`</span><br><span class=\"line\">DEST=<span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/lib-ios&quot;</span></span><br><span class=\"line\">mkdir -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;DEST&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ARCHS=<span class=\"string\">&quot;armv7 armv7s arm64 i386 x86_64&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># ARCHS=&quot;armv7&quot;</span></span><br><span class=\"line\">LIBS=<span class=\"string\">&quot;libopencore-amrnb.a libopencore-amrwb.a&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEVELOPER=`xcode-select -print-path`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> arch <span class=\"keyword\">in</span> <span class=\"variable\">$ARCHS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$arch</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">arm*)</span><br><span class=\"line\"></span><br><span class=\"line\">IOSV=<span class=\"string\">&quot;-miphoneos-version-min=7.0&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$arch</span> == <span class=\"string\">&quot;arm64&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">IOSV=<span class=\"string\">&quot;-miphoneos-version-min=7.0&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Building for iOS <span class=\"variable\">$arch</span> ****************&quot;</span></span><br><span class=\"line\">SDKROOT=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun --sdk iphoneos --show-sdk-path)</span>&quot;</span></span><br><span class=\"line\">CC=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun --sdk iphoneos -f clang)</span>&quot;</span></span><br><span class=\"line\">CXX=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun --sdk iphoneos -f clang++)</span>&quot;</span></span><br><span class=\"line\">CPP=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphonesimulator -f clang++)</span>&quot;</span></span><br><span class=\"line\">CFLAGS=<span class=\"string\">&quot;-isysroot <span class=\"variable\">$SDKROOT</span> -arch <span class=\"variable\">$arch</span> <span class=\"variable\">$IOSV</span> -isystem <span class=\"variable\">$SDKROOT</span>/usr/include -fembed-bitcode&quot;</span></span><br><span class=\"line\">CXXFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\">CPPFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CC CXX CFLAGS CXXFLAGS CPPFLAGS</span><br><span class=\"line\"></span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--host=arm-apple-darwin \\</span><br><span class=\"line\">--prefix=<span class=\"variable\">$DEST</span> \\</span><br><span class=\"line\">--disable-shared --enable-static</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">IOSV=<span class=\"string\">&quot;-mios-simulator-version-min=7.0&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Building for iOS <span class=\"variable\">$arch</span>*****************&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SDKROOT=`xcodebuild -version -sdk iphonesimulator Path`</span><br><span class=\"line\">CC=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphoneos -f clang)</span>&quot;</span></span><br><span class=\"line\">CXX=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphonesimulator -f clang++)</span>&quot;</span></span><br><span class=\"line\">CPP=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphonesimulator -f clang++)</span>&quot;</span></span><br><span class=\"line\">CFLAGS=<span class=\"string\">&quot;-isysroot <span class=\"variable\">$SDKROOT</span> -arch <span class=\"variable\">$arch</span> <span class=\"variable\">$IOSV</span> -isystem <span class=\"variable\">$SDKROOT</span>/usr/include -fembed-bitcode&quot;</span></span><br><span class=\"line\">CXXFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\">CPPFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CC CXX CFLAGS CXXFLAGS CPPFLAGS</span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=<span class=\"variable\">$DEST</span> \\</span><br><span class=\"line\">--disable-shared</span><br><span class=\"line\">;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\">make &gt; /dev/null</span><br><span class=\"line\">make install</span><br><span class=\"line\">make clean</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$LIBS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">mv <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span> <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span>.<span class=\"variable\">$arch</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$LIBS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">input=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> arch <span class=\"keyword\">in</span> <span class=\"variable\">$ARCHS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">input=<span class=\"string\">&quot;<span class=\"variable\">$input</span> <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span>.<span class=\"variable\">$arch</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">lipo -create -output <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span> <span class=\"variable\">$input</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编译方式\"><a href=\"#编译方式\" class=\"headerlink\" title=\"编译方式\"></a>编译方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir opencore-amr</span><br><span class=\"line\">&gt; <span class=\"built_in\">cd</span> opencore-amr</span><br><span class=\"line\">&gt; <span class=\"comment\">#把上方的脚本内容放到build.sh中。去下载0.1.3版的包，弄成下边的样子</span></span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">build.sh\t\t\t\topencore-amr-0.1.3.tar.gz</span><br><span class=\"line\">&gt; bash build.sh</span><br><span class=\"line\">&gt; .....</span><br><span class=\"line\">&gt; <span class=\"comment\">#完事后果子在：lib-ios文件夹中</span></span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">  build.sh\t\t\tlib-ios\t\t\t\topencore-amr-0.1.3.tar.gz\tsrc</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p><code>amr</code> 是一个很适合在线传输的音频格式。但悲摧的是<code>apple</code>早就不支持它了。原因不明。</p>\n<p>另一层是微信也是使用的这种格式来录制音频。</p>\n<p>不只<code>apple</code>不支持它，万能的<code>cocoapods</code>也没有支持的。只好自己动手了。</p>\n<p>止于当前，我找到最合适的，就是<code>opencore-amr</code>库。这个库12年写就。这么多年也没见怎么更新。[捂脸]😂</p>\n<p>找到了一个好心人写的支持<code>bitcode</code>和8.0的编译脚本</p>\n<h1 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h1><p>github:<a class=\"link\"   href=\"https://github.com/feuvan/opencore-amr-iOS\" >opencore-amr-IOS<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>sourceforge:<a class=\"link\"   href=\"https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.3.tar.gz/download\" >opencore-amr 0.1.3<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"编译脚本\"><a href=\"#编译脚本\" class=\"headerlink\" title=\"编译脚本\"></a>编译脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -xe</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION=<span class=\"string\">&quot;0.1.3&quot;</span></span><br><span class=\"line\">SDKVERSION=<span class=\"string\">&quot;8.4&quot;</span></span><br><span class=\"line\">LIBSRCNAME=<span class=\"string\">&quot;opencore-amr&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">CURRENTPATH=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/src&quot;</span></span><br><span class=\"line\">tar zxvf <span class=\"variable\">$&#123;LIBSRCNAME&#125;</span>-<span class=\"variable\">$&#123;VERSION&#125;</span>.tar.gz -C <span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/src&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/src/<span class=\"variable\">$&#123;LIBSRCNAME&#125;</span>-<span class=\"variable\">$&#123;VERSION&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEVELOPER=`xcode-select -print-path`</span><br><span class=\"line\">DEST=<span class=\"string\">&quot;<span class=\"variable\">$&#123;CURRENTPATH&#125;</span>/lib-ios&quot;</span></span><br><span class=\"line\">mkdir -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;DEST&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ARCHS=<span class=\"string\">&quot;armv7 armv7s arm64 i386 x86_64&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># ARCHS=&quot;armv7&quot;</span></span><br><span class=\"line\">LIBS=<span class=\"string\">&quot;libopencore-amrnb.a libopencore-amrwb.a&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DEVELOPER=`xcode-select -print-path`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> arch <span class=\"keyword\">in</span> <span class=\"variable\">$ARCHS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$arch</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">arm*)</span><br><span class=\"line\"></span><br><span class=\"line\">IOSV=<span class=\"string\">&quot;-miphoneos-version-min=7.0&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$arch</span> == <span class=\"string\">&quot;arm64&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">IOSV=<span class=\"string\">&quot;-miphoneos-version-min=7.0&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Building for iOS <span class=\"variable\">$arch</span> ****************&quot;</span></span><br><span class=\"line\">SDKROOT=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun --sdk iphoneos --show-sdk-path)</span>&quot;</span></span><br><span class=\"line\">CC=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun --sdk iphoneos -f clang)</span>&quot;</span></span><br><span class=\"line\">CXX=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun --sdk iphoneos -f clang++)</span>&quot;</span></span><br><span class=\"line\">CPP=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphonesimulator -f clang++)</span>&quot;</span></span><br><span class=\"line\">CFLAGS=<span class=\"string\">&quot;-isysroot <span class=\"variable\">$SDKROOT</span> -arch <span class=\"variable\">$arch</span> <span class=\"variable\">$IOSV</span> -isystem <span class=\"variable\">$SDKROOT</span>/usr/include -fembed-bitcode&quot;</span></span><br><span class=\"line\">CXXFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\">CPPFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CC CXX CFLAGS CXXFLAGS CPPFLAGS</span><br><span class=\"line\"></span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--host=arm-apple-darwin \\</span><br><span class=\"line\">--prefix=<span class=\"variable\">$DEST</span> \\</span><br><span class=\"line\">--disable-shared --enable-static</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">IOSV=<span class=\"string\">&quot;-mios-simulator-version-min=7.0&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Building for iOS <span class=\"variable\">$arch</span>*****************&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SDKROOT=`xcodebuild -version -sdk iphonesimulator Path`</span><br><span class=\"line\">CC=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphoneos -f clang)</span>&quot;</span></span><br><span class=\"line\">CXX=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphonesimulator -f clang++)</span>&quot;</span></span><br><span class=\"line\">CPP=<span class=\"string\">&quot;<span class=\"subst\">$(xcrun -sdk iphonesimulator -f clang++)</span>&quot;</span></span><br><span class=\"line\">CFLAGS=<span class=\"string\">&quot;-isysroot <span class=\"variable\">$SDKROOT</span> -arch <span class=\"variable\">$arch</span> <span class=\"variable\">$IOSV</span> -isystem <span class=\"variable\">$SDKROOT</span>/usr/include -fembed-bitcode&quot;</span></span><br><span class=\"line\">CXXFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\">CPPFLAGS=<span class=\"variable\">$CFLAGS</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CC CXX CFLAGS CXXFLAGS CPPFLAGS</span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=<span class=\"variable\">$DEST</span> \\</span><br><span class=\"line\">--disable-shared</span><br><span class=\"line\">;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\">make &gt; /dev/null</span><br><span class=\"line\">make install</span><br><span class=\"line\">make clean</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$LIBS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">mv <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span> <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span>.<span class=\"variable\">$arch</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$LIBS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">input=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> arch <span class=\"keyword\">in</span> <span class=\"variable\">$ARCHS</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">input=<span class=\"string\">&quot;<span class=\"variable\">$input</span> <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span>.<span class=\"variable\">$arch</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">lipo -create -output <span class=\"variable\">$DEST</span>/lib/<span class=\"variable\">$i</span> <span class=\"variable\">$input</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编译方式\"><a href=\"#编译方式\" class=\"headerlink\" title=\"编译方式\"></a>编译方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir opencore-amr</span><br><span class=\"line\">&gt; <span class=\"built_in\">cd</span> opencore-amr</span><br><span class=\"line\">&gt; <span class=\"comment\">#把上方的脚本内容放到build.sh中。去下载0.1.3版的包，弄成下边的样子</span></span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">build.sh\t\t\t\topencore-amr-0.1.3.tar.gz</span><br><span class=\"line\">&gt; bash build.sh</span><br><span class=\"line\">&gt; .....</span><br><span class=\"line\">&gt; <span class=\"comment\">#完事后果子在：lib-ios文件夹中</span></span><br><span class=\"line\">&gt; ls</span><br><span class=\"line\">  build.sh\t\t\tlib-ios\t\t\t\topencore-amr-0.1.3.tar.gz\tsrc</span><br></pre></td></tr></table></figure>"},{"title":"PHP Swoole 从入门到放弃","date":"2017-06-20T07:26:12.000Z","_content":"\n被Swoole文档上各种“高XX”说得口水流了一地。天真的我，决定花些时间，把自己项目的新业务迁移到swoole平台上来。\n\n> 今天谨以此文纪念我为了swoole而逝去的时光！\n\n以下是这段时间以来尝试过程中的各种痛：\n\n-----\n\n> 高可用。可以通过给主进程发USR1信号来热更新代码，过程很优雅。我只要一个信号就全GET到了。\n* 事实上。这有个蛋疼的前提：你必须先把server段的代码与worker段的业务代码分开。因为woker重启后，只能reload 启动后include进来的代码。这就操了大蛋了。\n\n-----\n\n> 高效编码。提供了协程，可以用同步的代码，得到异步的善果！nodejs还要async/await一下呢！\n* 事实上。使用协程有两个条件！\n1. 只能在指定的地方使用，要是在别的地方使用，得用个回调，把代码包起来。与便与其它业务代码隔离开！\n2. 只能使用提供的几样东西。用开发者的话说：缓存只能使用redis，数据库只能用mysql。\n* 这里还有更多其它蛋疼的事：\n1. worker 中不能使用同步代码。因为它会阻塞整个完美的worker进程。顿时PHP的很多的第三方库成了废物。即便要用，也要丢到task进程中去。\n2. task 进程有队列，但是，它只做了内部私有封装了的队列。还提出了若干条不清不楚的使用时的限制。如果任务失败，自己不收集，就无法重现。如果宕机，所有队列里的事，全了了账。队列里的事务也都成了悬案。这一点与laravel的队列比起来，可用性差得太TM远了！\n3. 逃不过的回调。其实PHP其它扩展也有异步的，譬如：ext-pgsql。可以用swoole的Event监听pgsql的socket可获得兼容的异步，但回调的问题就回来了。swoole重要的服务定义也是全程用回调的。包括worker/task/server/process这些对象生命周期。\n4. 不兼容。使用swoole的协程，其它不足不能用其它的异步PHP库做弥补，因为它们各自的event-loop不同。这一点怪不得swoole开发者。如果共用，不是通晓底层的大师级操刀，会出现各种稀奇古怪的问题。\n5. 功能弱。这一点主要表现在websocket Server这个对象上。swoole的websocket。声称自动的握手使用的是XX协议。但不支持使用websocket的内部的“协议”。如果带上协议名，就会拒绝。并且还有个让人蛋疼！如果自己实现握手协议，在很多版本中，它会自动地在返回的header中加入其它的头，导致被客户端拒绝！这一点开发者对此无能为力，因为swoole的response对象中的header，开发者只能加，不能改，不能删。它还不支持accept。什么样来路的请求都是直接到握手，如果要拒绝accept一些不合法的来源都不能轻易做到。\n6. 奇葩的异步http client。设计得还是满好的。但不知道什么原因，使用它请求腾讯的服务器，就是不稳定。40%会被拒。但如果使用nodejs 的 request。就能做到100%稳定！\n\n-----\n\n> 二进制分发。一次编译分发到各种平台。\n* 一来，分发的需求不大。不同的环境需要不同的定制，服务器环境与开发环境的配置注定不能完全相同。\n* 二来，编译起来就坑死人了。简单编译很多“高XX”的东西得不到。如果编译的系统有类库缺失，在configure中不会中止，只会在check的时候放个小小的'no'结尾。三个不同的系统平台上编译一下，包你眼花。PHPer对C的make了解并不深，很难编译出一个真正满意的结果。缺失类库的情况下编译出的so文件，放到PHP里后，一运行，PHP就会出一个`segmentfault`。并且有些第三方库要到放源码内部编译，有的是在外部单独编译安装。其中`jemalloc`库编译的时候还得加上专门为支持swoole而用的函数前缀。而文档对这里讲解，我就“呵呵”了。\n\n-----\n\n> 社区及支持\n* 哎！今天我就是在github的issue里把swoole骂上天，恐怕傲慢的开发者也未必能看到我！虽然swoole项目天天有更新，但swoole开发者是在做他自己的事。我们swoole的用户如同苍蝇！","source":"_posts/byebye-swoole.md","raw":"---\ntitle: PHP Swoole 从入门到放弃\ndate: 2017-06-20 15:26:12\ntags: [PHP, Swoole]\n---\n\n被Swoole文档上各种“高XX”说得口水流了一地。天真的我，决定花些时间，把自己项目的新业务迁移到swoole平台上来。\n\n> 今天谨以此文纪念我为了swoole而逝去的时光！\n\n以下是这段时间以来尝试过程中的各种痛：\n\n-----\n\n> 高可用。可以通过给主进程发USR1信号来热更新代码，过程很优雅。我只要一个信号就全GET到了。\n* 事实上。这有个蛋疼的前提：你必须先把server段的代码与worker段的业务代码分开。因为woker重启后，只能reload 启动后include进来的代码。这就操了大蛋了。\n\n-----\n\n> 高效编码。提供了协程，可以用同步的代码，得到异步的善果！nodejs还要async/await一下呢！\n* 事实上。使用协程有两个条件！\n1. 只能在指定的地方使用，要是在别的地方使用，得用个回调，把代码包起来。与便与其它业务代码隔离开！\n2. 只能使用提供的几样东西。用开发者的话说：缓存只能使用redis，数据库只能用mysql。\n* 这里还有更多其它蛋疼的事：\n1. worker 中不能使用同步代码。因为它会阻塞整个完美的worker进程。顿时PHP的很多的第三方库成了废物。即便要用，也要丢到task进程中去。\n2. task 进程有队列，但是，它只做了内部私有封装了的队列。还提出了若干条不清不楚的使用时的限制。如果任务失败，自己不收集，就无法重现。如果宕机，所有队列里的事，全了了账。队列里的事务也都成了悬案。这一点与laravel的队列比起来，可用性差得太TM远了！\n3. 逃不过的回调。其实PHP其它扩展也有异步的，譬如：ext-pgsql。可以用swoole的Event监听pgsql的socket可获得兼容的异步，但回调的问题就回来了。swoole重要的服务定义也是全程用回调的。包括worker/task/server/process这些对象生命周期。\n4. 不兼容。使用swoole的协程，其它不足不能用其它的异步PHP库做弥补，因为它们各自的event-loop不同。这一点怪不得swoole开发者。如果共用，不是通晓底层的大师级操刀，会出现各种稀奇古怪的问题。\n5. 功能弱。这一点主要表现在websocket Server这个对象上。swoole的websocket。声称自动的握手使用的是XX协议。但不支持使用websocket的内部的“协议”。如果带上协议名，就会拒绝。并且还有个让人蛋疼！如果自己实现握手协议，在很多版本中，它会自动地在返回的header中加入其它的头，导致被客户端拒绝！这一点开发者对此无能为力，因为swoole的response对象中的header，开发者只能加，不能改，不能删。它还不支持accept。什么样来路的请求都是直接到握手，如果要拒绝accept一些不合法的来源都不能轻易做到。\n6. 奇葩的异步http client。设计得还是满好的。但不知道什么原因，使用它请求腾讯的服务器，就是不稳定。40%会被拒。但如果使用nodejs 的 request。就能做到100%稳定！\n\n-----\n\n> 二进制分发。一次编译分发到各种平台。\n* 一来，分发的需求不大。不同的环境需要不同的定制，服务器环境与开发环境的配置注定不能完全相同。\n* 二来，编译起来就坑死人了。简单编译很多“高XX”的东西得不到。如果编译的系统有类库缺失，在configure中不会中止，只会在check的时候放个小小的'no'结尾。三个不同的系统平台上编译一下，包你眼花。PHPer对C的make了解并不深，很难编译出一个真正满意的结果。缺失类库的情况下编译出的so文件，放到PHP里后，一运行，PHP就会出一个`segmentfault`。并且有些第三方库要到放源码内部编译，有的是在外部单独编译安装。其中`jemalloc`库编译的时候还得加上专门为支持swoole而用的函数前缀。而文档对这里讲解，我就“呵呵”了。\n\n-----\n\n> 社区及支持\n* 哎！今天我就是在github的issue里把swoole骂上天，恐怕傲慢的开发者也未必能看到我！虽然swoole项目天天有更新，但swoole开发者是在做他自己的事。我们swoole的用户如同苍蝇！","slug":"byebye-swoole","published":1,"updated":"2021-01-06T09:56:16.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r300062aahaxio7iox","content":"<p>被Swoole文档上各种“高XX”说得口水流了一地。天真的我，决定花些时间，把自己项目的新业务迁移到swoole平台上来。</p>\n<blockquote>\n<p>今天谨以此文纪念我为了swoole而逝去的时光！</p>\n</blockquote>\n<p>以下是这段时间以来尝试过程中的各种痛：</p>\n<hr>\n<blockquote>\n<p>高可用。可以通过给主进程发USR1信号来热更新代码，过程很优雅。我只要一个信号就全GET到了。</p>\n</blockquote>\n<ul>\n<li>事实上。这有个蛋疼的前提：你必须先把server段的代码与worker段的业务代码分开。因为woker重启后，只能reload 启动后include进来的代码。这就操了大蛋了。</li>\n</ul>\n<hr>\n<blockquote>\n<p>高效编码。提供了协程，可以用同步的代码，得到异步的善果！nodejs还要async/await一下呢！</p>\n</blockquote>\n<ul>\n<li>事实上。使用协程有两个条件！</li>\n</ul>\n<ol>\n<li>只能在指定的地方使用，要是在别的地方使用，得用个回调，把代码包起来。与便与其它业务代码隔离开！</li>\n<li>只能使用提供的几样东西。用开发者的话说：缓存只能使用redis，数据库只能用mysql。</li>\n</ol>\n<ul>\n<li>这里还有更多其它蛋疼的事：</li>\n</ul>\n<ol>\n<li>worker 中不能使用同步代码。因为它会阻塞整个完美的worker进程。顿时PHP的很多的第三方库成了废物。即便要用，也要丢到task进程中去。</li>\n<li>task 进程有队列，但是，它只做了内部私有封装了的队列。还提出了若干条不清不楚的使用时的限制。如果任务失败，自己不收集，就无法重现。如果宕机，所有队列里的事，全了了账。队列里的事务也都成了悬案。这一点与laravel的队列比起来，可用性差得太TM远了！</li>\n<li>逃不过的回调。其实PHP其它扩展也有异步的，譬如：ext-pgsql。可以用swoole的Event监听pgsql的socket可获得兼容的异步，但回调的问题就回来了。swoole重要的服务定义也是全程用回调的。包括worker/task/server/process这些对象生命周期。</li>\n<li>不兼容。使用swoole的协程，其它不足不能用其它的异步PHP库做弥补，因为它们各自的event-loop不同。这一点怪不得swoole开发者。如果共用，不是通晓底层的大师级操刀，会出现各种稀奇古怪的问题。</li>\n<li>功能弱。这一点主要表现在websocket Server这个对象上。swoole的websocket。声称自动的握手使用的是XX协议。但不支持使用websocket的内部的“协议”。如果带上协议名，就会拒绝。并且还有个让人蛋疼！如果自己实现握手协议，在很多版本中，它会自动地在返回的header中加入其它的头，导致被客户端拒绝！这一点开发者对此无能为力，因为swoole的response对象中的header，开发者只能加，不能改，不能删。它还不支持accept。什么样来路的请求都是直接到握手，如果要拒绝accept一些不合法的来源都不能轻易做到。</li>\n<li>奇葩的异步http client。设计得还是满好的。但不知道什么原因，使用它请求腾讯的服务器，就是不稳定。40%会被拒。但如果使用nodejs 的 request。就能做到100%稳定！</li>\n</ol>\n<hr>\n<blockquote>\n<p>二进制分发。一次编译分发到各种平台。</p>\n</blockquote>\n<ul>\n<li>一来，分发的需求不大。不同的环境需要不同的定制，服务器环境与开发环境的配置注定不能完全相同。</li>\n<li>二来，编译起来就坑死人了。简单编译很多“高XX”的东西得不到。如果编译的系统有类库缺失，在configure中不会中止，只会在check的时候放个小小的’no’结尾。三个不同的系统平台上编译一下，包你眼花。PHPer对C的make了解并不深，很难编译出一个真正满意的结果。缺失类库的情况下编译出的so文件，放到PHP里后，一运行，PHP就会出一个<code>segmentfault</code>。并且有些第三方库要到放源码内部编译，有的是在外部单独编译安装。其中<code>jemalloc</code>库编译的时候还得加上专门为支持swoole而用的函数前缀。而文档对这里讲解，我就“呵呵”了。</li>\n</ul>\n<hr>\n<blockquote>\n<p>社区及支持</p>\n</blockquote>\n<ul>\n<li>哎！今天我就是在github的issue里把swoole骂上天，恐怕傲慢的开发者也未必能看到我！虽然swoole项目天天有更新，但swoole开发者是在做他自己的事。我们swoole的用户如同苍蝇！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>被Swoole文档上各种“高XX”说得口水流了一地。天真的我，决定花些时间，把自己项目的新业务迁移到swoole平台上来。</p>\n<blockquote>\n<p>今天谨以此文纪念我为了swoole而逝去的时光！</p>\n</blockquote>\n<p>以下是这段时间以来尝试过程中的各种痛：</p>\n<hr>\n<blockquote>\n<p>高可用。可以通过给主进程发USR1信号来热更新代码，过程很优雅。我只要一个信号就全GET到了。</p>\n</blockquote>\n<ul>\n<li>事实上。这有个蛋疼的前提：你必须先把server段的代码与worker段的业务代码分开。因为woker重启后，只能reload 启动后include进来的代码。这就操了大蛋了。</li>\n</ul>\n<hr>\n<blockquote>\n<p>高效编码。提供了协程，可以用同步的代码，得到异步的善果！nodejs还要async/await一下呢！</p>\n</blockquote>\n<ul>\n<li>事实上。使用协程有两个条件！</li>\n</ul>\n<ol>\n<li>只能在指定的地方使用，要是在别的地方使用，得用个回调，把代码包起来。与便与其它业务代码隔离开！</li>\n<li>只能使用提供的几样东西。用开发者的话说：缓存只能使用redis，数据库只能用mysql。</li>\n</ol>\n<ul>\n<li>这里还有更多其它蛋疼的事：</li>\n</ul>\n<ol>\n<li>worker 中不能使用同步代码。因为它会阻塞整个完美的worker进程。顿时PHP的很多的第三方库成了废物。即便要用，也要丢到task进程中去。</li>\n<li>task 进程有队列，但是，它只做了内部私有封装了的队列。还提出了若干条不清不楚的使用时的限制。如果任务失败，自己不收集，就无法重现。如果宕机，所有队列里的事，全了了账。队列里的事务也都成了悬案。这一点与laravel的队列比起来，可用性差得太TM远了！</li>\n<li>逃不过的回调。其实PHP其它扩展也有异步的，譬如：ext-pgsql。可以用swoole的Event监听pgsql的socket可获得兼容的异步，但回调的问题就回来了。swoole重要的服务定义也是全程用回调的。包括worker/task/server/process这些对象生命周期。</li>\n<li>不兼容。使用swoole的协程，其它不足不能用其它的异步PHP库做弥补，因为它们各自的event-loop不同。这一点怪不得swoole开发者。如果共用，不是通晓底层的大师级操刀，会出现各种稀奇古怪的问题。</li>\n<li>功能弱。这一点主要表现在websocket Server这个对象上。swoole的websocket。声称自动的握手使用的是XX协议。但不支持使用websocket的内部的“协议”。如果带上协议名，就会拒绝。并且还有个让人蛋疼！如果自己实现握手协议，在很多版本中，它会自动地在返回的header中加入其它的头，导致被客户端拒绝！这一点开发者对此无能为力，因为swoole的response对象中的header，开发者只能加，不能改，不能删。它还不支持accept。什么样来路的请求都是直接到握手，如果要拒绝accept一些不合法的来源都不能轻易做到。</li>\n<li>奇葩的异步http client。设计得还是满好的。但不知道什么原因，使用它请求腾讯的服务器，就是不稳定。40%会被拒。但如果使用nodejs 的 request。就能做到100%稳定！</li>\n</ol>\n<hr>\n<blockquote>\n<p>二进制分发。一次编译分发到各种平台。</p>\n</blockquote>\n<ul>\n<li>一来，分发的需求不大。不同的环境需要不同的定制，服务器环境与开发环境的配置注定不能完全相同。</li>\n<li>二来，编译起来就坑死人了。简单编译很多“高XX”的东西得不到。如果编译的系统有类库缺失，在configure中不会中止，只会在check的时候放个小小的’no’结尾。三个不同的系统平台上编译一下，包你眼花。PHPer对C的make了解并不深，很难编译出一个真正满意的结果。缺失类库的情况下编译出的so文件，放到PHP里后，一运行，PHP就会出一个<code>segmentfault</code>。并且有些第三方库要到放源码内部编译，有的是在外部单独编译安装。其中<code>jemalloc</code>库编译的时候还得加上专门为支持swoole而用的函数前缀。而文档对这里讲解，我就“呵呵”了。</li>\n</ul>\n<hr>\n<blockquote>\n<p>社区及支持</p>\n</blockquote>\n<ul>\n<li>哎！今天我就是在github的issue里把swoole骂上天，恐怕傲慢的开发者也未必能看到我！虽然swoole项目天天有更新，但swoole开发者是在做他自己的事。我们swoole的用户如同苍蝇！</li>\n</ul>\n"},{"title":"在FreeBSD12上编译PostgreSQL12","date":"2019-10-23T09:37:40.000Z","_content":"\n## 问题\n### 在`PostgreSQL12`源码里运行 `./configure`报：\n```bash\nchecking for readline.h... no\nconfigure: error: readline header not found\n```\n且`readline`库已经安装过了。\n```bash\n# pkg info readline\nreadline-8.0.0\nName           : readline\nVersion        : 8.0.0\n```\n\n原因是：`/usr/local/lib`和`/usr/local/include`不在`configure`脚本的搜索路径中。\n可以通过`--with-includes`配置项加入进去就好了。\n```bash\n./configure --with-includes=/usr/local/include --with-libraries=/usr/local/lib\n```\n\n### `llvm-config`找不到\n```bash\npkg install llvm90\n\nln -s /usr/local/bin/llvm-config90 /usr/local/bin/llvm-config\n```\n\n## 完整构建\n```bash\n./configure --with-libraries=/usr/local/lib --with-includes=/usr/local/include --enable-thread-safety --disable-debug --with-openssl --with-llvm --prefix=/usr/local/pg12 --localstatedir=/var --build=amd64-bluse-freebsd12.0 build_alias=amd64-bluse-freebsd12.0 --with-uuid=bsd --with-icu --enable-nls='zh_CN'\nmake world\nmake install-world\n```\n\n- `--enable-thread-safety` 线程安全\n- `--disable-debug` 禁用debug，该是有助于提升生产时运行性能\n- `--with-openssl` 支持加密传输\n- `--with-llvm` 支持即时编译，使得在处理复杂任务时，性能有望再提升20%～30%\n- `--build` 编译平台，格式：硬件平台-编译方-系统平台。如：“x86_64-myName-freebsd12.0”\n- `build_alias` 编译平台别名\n- `--with-uuid` 在`FreeBSD`上选择`bsd`应该是最合适的\n- `--with-icu` 支持排序，依赖`pkgconf`包\n- `--enable-nls` 软件本地化。可指定多种语言。依赖`GNU`的`gettext`","source":"_posts/build-postgresql12-on-freebsd12.md","raw":"---\ntitle: 在FreeBSD12上编译PostgreSQL12\ndate: 2019-10-23 17:37:40\ntags: [FreeBSD, PostgreSQL]\n---\n\n## 问题\n### 在`PostgreSQL12`源码里运行 `./configure`报：\n```bash\nchecking for readline.h... no\nconfigure: error: readline header not found\n```\n且`readline`库已经安装过了。\n```bash\n# pkg info readline\nreadline-8.0.0\nName           : readline\nVersion        : 8.0.0\n```\n\n原因是：`/usr/local/lib`和`/usr/local/include`不在`configure`脚本的搜索路径中。\n可以通过`--with-includes`配置项加入进去就好了。\n```bash\n./configure --with-includes=/usr/local/include --with-libraries=/usr/local/lib\n```\n\n### `llvm-config`找不到\n```bash\npkg install llvm90\n\nln -s /usr/local/bin/llvm-config90 /usr/local/bin/llvm-config\n```\n\n## 完整构建\n```bash\n./configure --with-libraries=/usr/local/lib --with-includes=/usr/local/include --enable-thread-safety --disable-debug --with-openssl --with-llvm --prefix=/usr/local/pg12 --localstatedir=/var --build=amd64-bluse-freebsd12.0 build_alias=amd64-bluse-freebsd12.0 --with-uuid=bsd --with-icu --enable-nls='zh_CN'\nmake world\nmake install-world\n```\n\n- `--enable-thread-safety` 线程安全\n- `--disable-debug` 禁用debug，该是有助于提升生产时运行性能\n- `--with-openssl` 支持加密传输\n- `--with-llvm` 支持即时编译，使得在处理复杂任务时，性能有望再提升20%～30%\n- `--build` 编译平台，格式：硬件平台-编译方-系统平台。如：“x86_64-myName-freebsd12.0”\n- `build_alias` 编译平台别名\n- `--with-uuid` 在`FreeBSD`上选择`bsd`应该是最合适的\n- `--with-icu` 支持排序，依赖`pkgconf`包\n- `--enable-nls` 软件本地化。可指定多种语言。依赖`GNU`的`gettext`","slug":"build-postgresql12-on-freebsd12","published":1,"updated":"2021-01-06T09:56:16.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r400072aahgs3p2q1l","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"在PostgreSQL12源码里运行-configure报：\"><a href=\"#在PostgreSQL12源码里运行-configure报：\" class=\"headerlink\" title=\"在PostgreSQL12源码里运行 ./configure报：\"></a>在<code>PostgreSQL12</code>源码里运行 <code>./configure</code>报：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> readline.h... no</span><br><span class=\"line\">configure: error: readline header not found</span><br></pre></td></tr></table></figure>\n<p>且<code>readline</code>库已经安装过了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pkg info readline</span></span><br><span class=\"line\">readline-8.0.0</span><br><span class=\"line\">Name           : readline</span><br><span class=\"line\">Version        : 8.0.0</span><br></pre></td></tr></table></figure>\n<p>原因是：<code>/usr/local/lib</code>和<code>/usr/local/include</code>不在<code>configure</code>脚本的搜索路径中。<br>可以通过<code>--with-includes</code>配置项加入进去就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-includes=/usr/<span class=\"built_in\">local</span>/include --with-libraries=/usr/<span class=\"built_in\">local</span>/lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"llvm-config找不到\"><a href=\"#llvm-config找不到\" class=\"headerlink\" title=\"llvm-config找不到\"></a><code>llvm-config</code>找不到</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install llvm90</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/bin/llvm-config90 /usr/<span class=\"built_in\">local</span>/bin/llvm-config</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整构建\"><a href=\"#完整构建\" class=\"headerlink\" title=\"完整构建\"></a>完整构建</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-libraries=/usr/<span class=\"built_in\">local</span>/lib --with-includes=/usr/<span class=\"built_in\">local</span>/include --enable-thread-safety --disable-debug --with-openssl --with-llvm --prefix=/usr/<span class=\"built_in\">local</span>/pg12 --localstatedir=/var --build=amd64-bluse-freebsd12.0 build_alias=amd64-bluse-freebsd12.0 --with-uuid=bsd --with-icu --enable-nls=<span class=\"string\">&#x27;zh_CN&#x27;</span></span><br><span class=\"line\">make world</span><br><span class=\"line\">make install-world</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--enable-thread-safety</code> 线程安全</li>\n<li><code>--disable-debug</code> 禁用debug，该是有助于提升生产时运行性能</li>\n<li><code>--with-openssl</code> 支持加密传输</li>\n<li><code>--with-llvm</code> 支持即时编译，使得在处理复杂任务时，性能有望再提升20%～30%</li>\n<li><code>--build</code> 编译平台，格式：硬件平台-编译方-系统平台。如：“x86_64-myName-freebsd12.0”</li>\n<li><code>build_alias</code> 编译平台别名</li>\n<li><code>--with-uuid</code> 在<code>FreeBSD</code>上选择<code>bsd</code>应该是最合适的</li>\n<li><code>--with-icu</code> 支持排序，依赖<code>pkgconf</code>包</li>\n<li><code>--enable-nls</code> 软件本地化。可指定多种语言。依赖<code>GNU</code>的<code>gettext</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"在PostgreSQL12源码里运行-configure报：\"><a href=\"#在PostgreSQL12源码里运行-configure报：\" class=\"headerlink\" title=\"在PostgreSQL12源码里运行 ./configure报：\"></a>在<code>PostgreSQL12</code>源码里运行 <code>./configure</code>报：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> readline.h... no</span><br><span class=\"line\">configure: error: readline header not found</span><br></pre></td></tr></table></figure>\n<p>且<code>readline</code>库已经安装过了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pkg info readline</span></span><br><span class=\"line\">readline-8.0.0</span><br><span class=\"line\">Name           : readline</span><br><span class=\"line\">Version        : 8.0.0</span><br></pre></td></tr></table></figure>\n<p>原因是：<code>/usr/local/lib</code>和<code>/usr/local/include</code>不在<code>configure</code>脚本的搜索路径中。<br>可以通过<code>--with-includes</code>配置项加入进去就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-includes=/usr/<span class=\"built_in\">local</span>/include --with-libraries=/usr/<span class=\"built_in\">local</span>/lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"llvm-config找不到\"><a href=\"#llvm-config找不到\" class=\"headerlink\" title=\"llvm-config找不到\"></a><code>llvm-config</code>找不到</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install llvm90</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/bin/llvm-config90 /usr/<span class=\"built_in\">local</span>/bin/llvm-config</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整构建\"><a href=\"#完整构建\" class=\"headerlink\" title=\"完整构建\"></a>完整构建</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-libraries=/usr/<span class=\"built_in\">local</span>/lib --with-includes=/usr/<span class=\"built_in\">local</span>/include --enable-thread-safety --disable-debug --with-openssl --with-llvm --prefix=/usr/<span class=\"built_in\">local</span>/pg12 --localstatedir=/var --build=amd64-bluse-freebsd12.0 build_alias=amd64-bluse-freebsd12.0 --with-uuid=bsd --with-icu --enable-nls=<span class=\"string\">&#x27;zh_CN&#x27;</span></span><br><span class=\"line\">make world</span><br><span class=\"line\">make install-world</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--enable-thread-safety</code> 线程安全</li>\n<li><code>--disable-debug</code> 禁用debug，该是有助于提升生产时运行性能</li>\n<li><code>--with-openssl</code> 支持加密传输</li>\n<li><code>--with-llvm</code> 支持即时编译，使得在处理复杂任务时，性能有望再提升20%～30%</li>\n<li><code>--build</code> 编译平台，格式：硬件平台-编译方-系统平台。如：“x86_64-myName-freebsd12.0”</li>\n<li><code>build_alias</code> 编译平台别名</li>\n<li><code>--with-uuid</code> 在<code>FreeBSD</code>上选择<code>bsd</code>应该是最合适的</li>\n<li><code>--with-icu</code> 支持排序，依赖<code>pkgconf</code>包</li>\n<li><code>--enable-nls</code> 软件本地化。可指定多种语言。依赖<code>GNU</code>的<code>gettext</code></li>\n</ul>\n"},{"title":"daemontools系列小工具","date":"2017-06-17T06:17:12.000Z","_content":"\n# 前言\n\n为什么要讲一个如此\"古老\"的守护工具？为什么不用supervisord？\n\n`supervisord` 有个问题疼死我了。一远程管理一下它守护下的进程，[CPU就会100%](https://github.com/Supervisor/supervisor/issues/807)。这个问题年久失修。\n\n它的supervisorctl里的指令，常reload一下会让所有的服务死了，自己也死了！也不重启，得手动重启。\n\n更让人揪心的是，当业务负载繁重时，这个工具就成了\"仙人掌\"，碰不得，前段时间发现一次半夜里无端地持续了2个多小时把CPU提到了100%。\n\n用了它可让阿里云破费了不少短信费。天天有警告！\n\n不得已再花些时间学习了一下其它的守护工具了。这个daemontools偏老，看上去更稳妥。\n\n以下实操基于FreeBSD11（Linux有systend，守护嘎嘎的！）\n\n# 介绍\n\n[Daemontools](http://cr.yp.to/daemontools.html)是管理Unix服务的工具，它提供一组工具来管理一系列用户进程，当进程由于某些原因down掉之后，daemontools会自动重启进程\n\n# 注意\n\n* 被管理的进程不能以daemon形式运行，例如nginx.conf 必须关闭daemon， daemon off;\n* 不要在/var/service/建任何目录， /var/service/只存放一些symbol link\n* 只需要完成安装 、 配置两步即可\n\n# 安装启动\n\n```bash\npkg install daemontools\necho 'svscan_enable=\"YES\"' > /etc/rc.conf\nservice svscan start\n```\n启动成功多出了2个进程：\n\n```text\nroot  7616   0.0  0.1   8344  1676  -  S    10:28     0:00.04 /usr/local/bin/svscan /var/service\nroot  7617   0.0  0.1   6240  1616  -  I    10:28     0:00.00 /usr/local/bin/readproctitle service errors: ......................................................................\n```\n`svscan`启动后监视`/var/service`目录，当这里有服务的软连接时，svscan会为每个服务主恸一个`supervise`服务。\n`supervise` 执行服务目录下的`run`，如果服务目录下还有`down`文件存在，就不会自动启动，需人工手动启动此服务。\n\n`supervise`的状态信息以2进制的形式存放在服务目录的`supervise`下面，并且提供了下面的工具来操作：\n\n* svstat： 读取状态信息\n* svc： 启动/停止/挂起等\n* svok： 检查是否运行成功\n* svscan：可靠的启动/var/service目录下的服务。如果某个服务加入后，没有启动，可以调用此命令，强制启动。\n\n# 添加服务\n## 普通添加\n先创建一个测试用的需要被守护的项目。放到：`/var/server/testprocess/`\n```text\nroot@freebsd:/var/server/testprocess # ll\ntotal 12\n-rwxr-xr-x  1 root  wheel  122 Jun 17 10:30 main.py*\n-rwxr-xr-x  1 root  wheel  333 Jun 17 10:47 run*\nroot@freebsd:/var/server/testprocess # cat main.py\n#!/usr/local/bin/python2\nimport time\nimport logging\n\nwhile True:\n    time.sleep(1)\n    logging.warning(\"sleep 1 second\")\n\nroot@freebsd:/var/server/testprocess # cat run\n#!/bin/sh\nexec /usr/local/bin/python2 /var/server/testprocess/main.py >> /tmp/main.py.log 2>&1\n```\n然后在`/var/service`目录下建立软链接\n```bash\nroot@freebsd:/var/server/testprocess # ln -s /var/server/testprocess /var/service/testprocess\n```\n这个时候可以检查一下服务是否正在运行：\n```test\nroot  7618  0.0  0.1   6252  1632  -  I    10:28     0:00.00 supervise testprocess\nroot  7747  0.0  0.4  39308  7416  -  S    10:48     0:00.72 /usr/local/bin/python2 /var/server/testprocess/main.py (python2.7)\n```\n上面这种方式的坏处是必须以root用户运行，如果想以其他用户运行，则需要做如下改进，假设用户为bluse，id为1001：\n\n## 以指定用户身份运行\n\n改进一下run的执行方式：\n```text\nroot@freebsd:/var/server/testprocess # cat run\n#!/bin/sh\nwho=`id -u`\nif [ $who -eq 0 ]; then\n    exec /usr/local/bin/setuidgid bluse /usr/local/bin/python2 /var/server/testprocess/main.py >> /tmp/main.py.log 2>&1\nelif [ $who -eq 1001 ]; then\n    exec /usr/local/bin/python2 /var/server/service/testprocess/main.py >> /tmp/main.py.log 2>&1\nelse\n    echo \"neither root or bluse\"\nfi\n```\n就可以了\n\n# 管理服务\n\n使用svstat来查看服务\n```textmate\nroot@freebsd:/var/server/testprocess # svstat /var/server/testprocess/\n/var/server/testprocess/: up (pid 7747) 2680 seconds\n```\n\n使用svc来管理服务\n```textmate\nNAME\n       svc - controls services monitored by supervise(8).\n\nSYNOPSIS\n       svc [ -udopchaitkx ] services\n\nDESCRIPTION\n       services consists of any number of arguments, each argument naming a\n       directory used by supervise(8).\n\n       svc applies all the options to each service in turn.\n\nOPTIONS\n       -u     Up. If the service is not running, start it. If the service\n              stops, restart it.\n\n       -d     Down. If the service is running, send it a TERM signal and then\n              a CONT signal. After it stops, do not restart it.\n\n       -o     Once. If the service is not running, start it. Do not restart it\n              if it stops.\n\n       -p     Pause. Send the service a STOP signal.\n\n       -c     Continue. Send the service a CONT signal.\n\n       -h     Hangup. Send the service a HUP signal.\n\n       -a     Alarm. Send the service an ALRM signal.\n\n       -i     Interrupt. Send the service an INT signal.\n\n       -t     Terminate. Send the service a TERM signal.\n\n       -k     Kill. Send the service a KILL signal.\n\n       -x     Exit.  supervise(8) will exit as soon as the service is down. If\n              you use this option on a stable system, you're doing something\n              wrong; supervise(8) is designed to run forever.\n```\n\n# daemontools 中的其它工具\n\nlog工具：\n\n* The readproctitle program\n* The multilog program\n* The tai64n program\n* The tai64nlocal program\n\n环境工具：\n\n* The setuidgid program\n* The envuidgid program\n* The envdir program\n* The softlimit program\n* The setlock program","source":"_posts/daemontools.md","raw":"---\ntitle: daemontools系列小工具\ndate: 2017-06-17 14:17:12\ntags: [daemontool, FreeBSD, supervisord]\n---\n\n# 前言\n\n为什么要讲一个如此\"古老\"的守护工具？为什么不用supervisord？\n\n`supervisord` 有个问题疼死我了。一远程管理一下它守护下的进程，[CPU就会100%](https://github.com/Supervisor/supervisor/issues/807)。这个问题年久失修。\n\n它的supervisorctl里的指令，常reload一下会让所有的服务死了，自己也死了！也不重启，得手动重启。\n\n更让人揪心的是，当业务负载繁重时，这个工具就成了\"仙人掌\"，碰不得，前段时间发现一次半夜里无端地持续了2个多小时把CPU提到了100%。\n\n用了它可让阿里云破费了不少短信费。天天有警告！\n\n不得已再花些时间学习了一下其它的守护工具了。这个daemontools偏老，看上去更稳妥。\n\n以下实操基于FreeBSD11（Linux有systend，守护嘎嘎的！）\n\n# 介绍\n\n[Daemontools](http://cr.yp.to/daemontools.html)是管理Unix服务的工具，它提供一组工具来管理一系列用户进程，当进程由于某些原因down掉之后，daemontools会自动重启进程\n\n# 注意\n\n* 被管理的进程不能以daemon形式运行，例如nginx.conf 必须关闭daemon， daemon off;\n* 不要在/var/service/建任何目录， /var/service/只存放一些symbol link\n* 只需要完成安装 、 配置两步即可\n\n# 安装启动\n\n```bash\npkg install daemontools\necho 'svscan_enable=\"YES\"' > /etc/rc.conf\nservice svscan start\n```\n启动成功多出了2个进程：\n\n```text\nroot  7616   0.0  0.1   8344  1676  -  S    10:28     0:00.04 /usr/local/bin/svscan /var/service\nroot  7617   0.0  0.1   6240  1616  -  I    10:28     0:00.00 /usr/local/bin/readproctitle service errors: ......................................................................\n```\n`svscan`启动后监视`/var/service`目录，当这里有服务的软连接时，svscan会为每个服务主恸一个`supervise`服务。\n`supervise` 执行服务目录下的`run`，如果服务目录下还有`down`文件存在，就不会自动启动，需人工手动启动此服务。\n\n`supervise`的状态信息以2进制的形式存放在服务目录的`supervise`下面，并且提供了下面的工具来操作：\n\n* svstat： 读取状态信息\n* svc： 启动/停止/挂起等\n* svok： 检查是否运行成功\n* svscan：可靠的启动/var/service目录下的服务。如果某个服务加入后，没有启动，可以调用此命令，强制启动。\n\n# 添加服务\n## 普通添加\n先创建一个测试用的需要被守护的项目。放到：`/var/server/testprocess/`\n```text\nroot@freebsd:/var/server/testprocess # ll\ntotal 12\n-rwxr-xr-x  1 root  wheel  122 Jun 17 10:30 main.py*\n-rwxr-xr-x  1 root  wheel  333 Jun 17 10:47 run*\nroot@freebsd:/var/server/testprocess # cat main.py\n#!/usr/local/bin/python2\nimport time\nimport logging\n\nwhile True:\n    time.sleep(1)\n    logging.warning(\"sleep 1 second\")\n\nroot@freebsd:/var/server/testprocess # cat run\n#!/bin/sh\nexec /usr/local/bin/python2 /var/server/testprocess/main.py >> /tmp/main.py.log 2>&1\n```\n然后在`/var/service`目录下建立软链接\n```bash\nroot@freebsd:/var/server/testprocess # ln -s /var/server/testprocess /var/service/testprocess\n```\n这个时候可以检查一下服务是否正在运行：\n```test\nroot  7618  0.0  0.1   6252  1632  -  I    10:28     0:00.00 supervise testprocess\nroot  7747  0.0  0.4  39308  7416  -  S    10:48     0:00.72 /usr/local/bin/python2 /var/server/testprocess/main.py (python2.7)\n```\n上面这种方式的坏处是必须以root用户运行，如果想以其他用户运行，则需要做如下改进，假设用户为bluse，id为1001：\n\n## 以指定用户身份运行\n\n改进一下run的执行方式：\n```text\nroot@freebsd:/var/server/testprocess # cat run\n#!/bin/sh\nwho=`id -u`\nif [ $who -eq 0 ]; then\n    exec /usr/local/bin/setuidgid bluse /usr/local/bin/python2 /var/server/testprocess/main.py >> /tmp/main.py.log 2>&1\nelif [ $who -eq 1001 ]; then\n    exec /usr/local/bin/python2 /var/server/service/testprocess/main.py >> /tmp/main.py.log 2>&1\nelse\n    echo \"neither root or bluse\"\nfi\n```\n就可以了\n\n# 管理服务\n\n使用svstat来查看服务\n```textmate\nroot@freebsd:/var/server/testprocess # svstat /var/server/testprocess/\n/var/server/testprocess/: up (pid 7747) 2680 seconds\n```\n\n使用svc来管理服务\n```textmate\nNAME\n       svc - controls services monitored by supervise(8).\n\nSYNOPSIS\n       svc [ -udopchaitkx ] services\n\nDESCRIPTION\n       services consists of any number of arguments, each argument naming a\n       directory used by supervise(8).\n\n       svc applies all the options to each service in turn.\n\nOPTIONS\n       -u     Up. If the service is not running, start it. If the service\n              stops, restart it.\n\n       -d     Down. If the service is running, send it a TERM signal and then\n              a CONT signal. After it stops, do not restart it.\n\n       -o     Once. If the service is not running, start it. Do not restart it\n              if it stops.\n\n       -p     Pause. Send the service a STOP signal.\n\n       -c     Continue. Send the service a CONT signal.\n\n       -h     Hangup. Send the service a HUP signal.\n\n       -a     Alarm. Send the service an ALRM signal.\n\n       -i     Interrupt. Send the service an INT signal.\n\n       -t     Terminate. Send the service a TERM signal.\n\n       -k     Kill. Send the service a KILL signal.\n\n       -x     Exit.  supervise(8) will exit as soon as the service is down. If\n              you use this option on a stable system, you're doing something\n              wrong; supervise(8) is designed to run forever.\n```\n\n# daemontools 中的其它工具\n\nlog工具：\n\n* The readproctitle program\n* The multilog program\n* The tai64n program\n* The tai64nlocal program\n\n环境工具：\n\n* The setuidgid program\n* The envuidgid program\n* The envdir program\n* The softlimit program\n* The setlock program","slug":"daemontools","published":1,"updated":"2021-01-06T09:56:16.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r500092aahc7dt5s6j","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>为什么要讲一个如此”古老”的守护工具？为什么不用supervisord？</p>\n<p><code>supervisord</code> 有个问题疼死我了。一远程管理一下它守护下的进程，<a class=\"link\"   href=\"https://github.com/Supervisor/supervisor/issues/807\" >CPU就会100%<i class=\"fas fa-external-link-alt\"></i></a>。这个问题年久失修。</p>\n<p>它的supervisorctl里的指令，常reload一下会让所有的服务死了，自己也死了！也不重启，得手动重启。</p>\n<p>更让人揪心的是，当业务负载繁重时，这个工具就成了”仙人掌”，碰不得，前段时间发现一次半夜里无端地持续了2个多小时把CPU提到了100%。</p>\n<p>用了它可让阿里云破费了不少短信费。天天有警告！</p>\n<p>不得已再花些时间学习了一下其它的守护工具了。这个daemontools偏老，看上去更稳妥。</p>\n<p>以下实操基于FreeBSD11（Linux有systend，守护嘎嘎的！）</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p><a class=\"link\"   href=\"http://cr.yp.to/daemontools.html\" >Daemontools<i class=\"fas fa-external-link-alt\"></i></a>是管理Unix服务的工具，它提供一组工具来管理一系列用户进程，当进程由于某些原因down掉之后，daemontools会自动重启进程</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ul>\n<li>被管理的进程不能以daemon形式运行，例如nginx.conf 必须关闭daemon， daemon off;</li>\n<li>不要在/var/service/建任何目录， /var/service/只存放一些symbol link</li>\n<li>只需要完成安装 、 配置两步即可</li>\n</ul>\n<h1 id=\"安装启动\"><a href=\"#安装启动\" class=\"headerlink\" title=\"安装启动\"></a>安装启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install daemontools</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;svscan_enable=&quot;YES&quot;&#x27;</span> &gt; /etc/rc.conf</span><br><span class=\"line\">service svscan start</span><br></pre></td></tr></table></figure>\n<p>启动成功多出了2个进程：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root  7616   0.0  0.1   8344  1676  -  S    10:28     0:00.04 /usr/local/bin/svscan /var/service</span><br><span class=\"line\">root  7617   0.0  0.1   6240  1616  -  I    10:28     0:00.00 /usr/local/bin/readproctitle service errors: ......................................................................</span><br></pre></td></tr></table></figure>\n<p><code>svscan</code>启动后监视<code>/var/service</code>目录，当这里有服务的软连接时，svscan会为每个服务主恸一个<code>supervise</code>服务。<br><code>supervise</code> 执行服务目录下的<code>run</code>，如果服务目录下还有<code>down</code>文件存在，就不会自动启动，需人工手动启动此服务。</p>\n<p><code>supervise</code>的状态信息以2进制的形式存放在服务目录的<code>supervise</code>下面，并且提供了下面的工具来操作：</p>\n<ul>\n<li>svstat： 读取状态信息</li>\n<li>svc： 启动/停止/挂起等</li>\n<li>svok： 检查是否运行成功</li>\n<li>svscan：可靠的启动/var/service目录下的服务。如果某个服务加入后，没有启动，可以调用此命令，强制启动。</li>\n</ul>\n<h1 id=\"添加服务\"><a href=\"#添加服务\" class=\"headerlink\" title=\"添加服务\"></a>添加服务</h1><h2 id=\"普通添加\"><a href=\"#普通添加\" class=\"headerlink\" title=\"普通添加\"></a>普通添加</h2><p>先创建一个测试用的需要被守护的项目。放到：<code>/var/server/testprocess/</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:/var/server/testprocess # ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rwxr-xr-x  1 root  wheel  122 Jun 17 10:30 main.py*</span><br><span class=\"line\">-rwxr-xr-x  1 root  wheel  333 Jun 17 10:47 run*</span><br><span class=\"line\">root@freebsd:/var/server/testprocess # cat main.py</span><br><span class=\"line\">#!/usr/local/bin/python2</span><br><span class=\"line\">import time</span><br><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\">    logging.warning(&quot;sleep 1 second&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">root@freebsd:/var/server/testprocess # cat run</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">exec /usr/local/bin/python2 /var/server/testprocess/main.py &gt;&gt; /tmp/main.py.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>然后在<code>/var/service</code>目录下建立软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:/var/server/testprocess <span class=\"comment\"># ln -s /var/server/testprocess /var/service/testprocess</span></span><br></pre></td></tr></table></figure>\n<p>这个时候可以检查一下服务是否正在运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root  7618  0.0  0.1   6252  1632  -  I    10:28     0:00.00 supervise testprocess</span><br><span class=\"line\">root  7747  0.0  0.4  39308  7416  -  S    10:48     0:00.72 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python2 &#x2F;var&#x2F;server&#x2F;testprocess&#x2F;main.py (python2.7)</span><br></pre></td></tr></table></figure>\n<p>上面这种方式的坏处是必须以root用户运行，如果想以其他用户运行，则需要做如下改进，假设用户为bluse，id为1001：</p>\n<h2 id=\"以指定用户身份运行\"><a href=\"#以指定用户身份运行\" class=\"headerlink\" title=\"以指定用户身份运行\"></a>以指定用户身份运行</h2><p>改进一下run的执行方式：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:/var/server/testprocess # cat run</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">who=`id -u`</span><br><span class=\"line\">if [ $who -eq 0 ]; then</span><br><span class=\"line\">    exec /usr/local/bin/setuidgid bluse /usr/local/bin/python2 /var/server/testprocess/main.py &gt;&gt; /tmp/main.py.log 2&gt;&amp;1</span><br><span class=\"line\">elif [ $who -eq 1001 ]; then</span><br><span class=\"line\">    exec /usr/local/bin/python2 /var/server/service/testprocess/main.py &gt;&gt; /tmp/main.py.log 2&gt;&amp;1</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;neither root or bluse&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>就可以了</p>\n<h1 id=\"管理服务\"><a href=\"#管理服务\" class=\"headerlink\" title=\"管理服务\"></a>管理服务</h1><p>使用svstat来查看服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:&#x2F;var&#x2F;server&#x2F;testprocess # svstat &#x2F;var&#x2F;server&#x2F;testprocess&#x2F;</span><br><span class=\"line\">&#x2F;var&#x2F;server&#x2F;testprocess&#x2F;: up (pid 7747) 2680 seconds</span><br></pre></td></tr></table></figure>\n<p>使用svc来管理服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME</span><br><span class=\"line\">       svc - controls services monitored by supervise(8).</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">       svc [ -udopchaitkx ] services</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\">       services consists of any number of arguments, each argument naming a</span><br><span class=\"line\">       directory used by supervise(8).</span><br><span class=\"line\"></span><br><span class=\"line\">       svc applies all the options to each service in turn.</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS</span><br><span class=\"line\">       -u     Up. If the service is not running, start it. If the service</span><br><span class=\"line\">              stops, restart it.</span><br><span class=\"line\"></span><br><span class=\"line\">       -d     Down. If the service is running, send it a TERM signal and then</span><br><span class=\"line\">              a CONT signal. After it stops, do not restart it.</span><br><span class=\"line\"></span><br><span class=\"line\">       -o     Once. If the service is not running, start it. Do not restart it</span><br><span class=\"line\">              if it stops.</span><br><span class=\"line\"></span><br><span class=\"line\">       -p     Pause. Send the service a STOP signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -c     Continue. Send the service a CONT signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -h     Hangup. Send the service a HUP signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -a     Alarm. Send the service an ALRM signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -i     Interrupt. Send the service an INT signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -t     Terminate. Send the service a TERM signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -k     Kill. Send the service a KILL signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -x     Exit.  supervise(8) will exit as soon as the service is down. If</span><br><span class=\"line\">              you use this option on a stable system, you&#39;re doing something</span><br><span class=\"line\">              wrong; supervise(8) is designed to run forever.</span><br></pre></td></tr></table></figure>\n<h1 id=\"daemontools-中的其它工具\"><a href=\"#daemontools-中的其它工具\" class=\"headerlink\" title=\"daemontools 中的其它工具\"></a>daemontools 中的其它工具</h1><p>log工具：</p>\n<ul>\n<li>The readproctitle program</li>\n<li>The multilog program</li>\n<li>The tai64n program</li>\n<li>The tai64nlocal program</li>\n</ul>\n<p>环境工具：</p>\n<ul>\n<li>The setuidgid program</li>\n<li>The envuidgid program</li>\n<li>The envdir program</li>\n<li>The softlimit program</li>\n<li>The setlock program</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>为什么要讲一个如此”古老”的守护工具？为什么不用supervisord？</p>\n<p><code>supervisord</code> 有个问题疼死我了。一远程管理一下它守护下的进程，<a class=\"link\"   href=\"https://github.com/Supervisor/supervisor/issues/807\" >CPU就会100%<i class=\"fas fa-external-link-alt\"></i></a>。这个问题年久失修。</p>\n<p>它的supervisorctl里的指令，常reload一下会让所有的服务死了，自己也死了！也不重启，得手动重启。</p>\n<p>更让人揪心的是，当业务负载繁重时，这个工具就成了”仙人掌”，碰不得，前段时间发现一次半夜里无端地持续了2个多小时把CPU提到了100%。</p>\n<p>用了它可让阿里云破费了不少短信费。天天有警告！</p>\n<p>不得已再花些时间学习了一下其它的守护工具了。这个daemontools偏老，看上去更稳妥。</p>\n<p>以下实操基于FreeBSD11（Linux有systend，守护嘎嘎的！）</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p><a class=\"link\"   href=\"http://cr.yp.to/daemontools.html\" >Daemontools<i class=\"fas fa-external-link-alt\"></i></a>是管理Unix服务的工具，它提供一组工具来管理一系列用户进程，当进程由于某些原因down掉之后，daemontools会自动重启进程</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ul>\n<li>被管理的进程不能以daemon形式运行，例如nginx.conf 必须关闭daemon， daemon off;</li>\n<li>不要在/var/service/建任何目录， /var/service/只存放一些symbol link</li>\n<li>只需要完成安装 、 配置两步即可</li>\n</ul>\n<h1 id=\"安装启动\"><a href=\"#安装启动\" class=\"headerlink\" title=\"安装启动\"></a>安装启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install daemontools</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;svscan_enable=&quot;YES&quot;&#x27;</span> &gt; /etc/rc.conf</span><br><span class=\"line\">service svscan start</span><br></pre></td></tr></table></figure>\n<p>启动成功多出了2个进程：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root  7616   0.0  0.1   8344  1676  -  S    10:28     0:00.04 /usr/local/bin/svscan /var/service</span><br><span class=\"line\">root  7617   0.0  0.1   6240  1616  -  I    10:28     0:00.00 /usr/local/bin/readproctitle service errors: ......................................................................</span><br></pre></td></tr></table></figure>\n<p><code>svscan</code>启动后监视<code>/var/service</code>目录，当这里有服务的软连接时，svscan会为每个服务主恸一个<code>supervise</code>服务。<br><code>supervise</code> 执行服务目录下的<code>run</code>，如果服务目录下还有<code>down</code>文件存在，就不会自动启动，需人工手动启动此服务。</p>\n<p><code>supervise</code>的状态信息以2进制的形式存放在服务目录的<code>supervise</code>下面，并且提供了下面的工具来操作：</p>\n<ul>\n<li>svstat： 读取状态信息</li>\n<li>svc： 启动/停止/挂起等</li>\n<li>svok： 检查是否运行成功</li>\n<li>svscan：可靠的启动/var/service目录下的服务。如果某个服务加入后，没有启动，可以调用此命令，强制启动。</li>\n</ul>\n<h1 id=\"添加服务\"><a href=\"#添加服务\" class=\"headerlink\" title=\"添加服务\"></a>添加服务</h1><h2 id=\"普通添加\"><a href=\"#普通添加\" class=\"headerlink\" title=\"普通添加\"></a>普通添加</h2><p>先创建一个测试用的需要被守护的项目。放到：<code>/var/server/testprocess/</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:/var/server/testprocess # ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rwxr-xr-x  1 root  wheel  122 Jun 17 10:30 main.py*</span><br><span class=\"line\">-rwxr-xr-x  1 root  wheel  333 Jun 17 10:47 run*</span><br><span class=\"line\">root@freebsd:/var/server/testprocess # cat main.py</span><br><span class=\"line\">#!/usr/local/bin/python2</span><br><span class=\"line\">import time</span><br><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\">    logging.warning(&quot;sleep 1 second&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">root@freebsd:/var/server/testprocess # cat run</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">exec /usr/local/bin/python2 /var/server/testprocess/main.py &gt;&gt; /tmp/main.py.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>然后在<code>/var/service</code>目录下建立软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:/var/server/testprocess <span class=\"comment\"># ln -s /var/server/testprocess /var/service/testprocess</span></span><br></pre></td></tr></table></figure>\n<p>这个时候可以检查一下服务是否正在运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root  7618  0.0  0.1   6252  1632  -  I    10:28     0:00.00 supervise testprocess</span><br><span class=\"line\">root  7747  0.0  0.4  39308  7416  -  S    10:48     0:00.72 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python2 &#x2F;var&#x2F;server&#x2F;testprocess&#x2F;main.py (python2.7)</span><br></pre></td></tr></table></figure>\n<p>上面这种方式的坏处是必须以root用户运行，如果想以其他用户运行，则需要做如下改进，假设用户为bluse，id为1001：</p>\n<h2 id=\"以指定用户身份运行\"><a href=\"#以指定用户身份运行\" class=\"headerlink\" title=\"以指定用户身份运行\"></a>以指定用户身份运行</h2><p>改进一下run的执行方式：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:/var/server/testprocess # cat run</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">who=`id -u`</span><br><span class=\"line\">if [ $who -eq 0 ]; then</span><br><span class=\"line\">    exec /usr/local/bin/setuidgid bluse /usr/local/bin/python2 /var/server/testprocess/main.py &gt;&gt; /tmp/main.py.log 2&gt;&amp;1</span><br><span class=\"line\">elif [ $who -eq 1001 ]; then</span><br><span class=\"line\">    exec /usr/local/bin/python2 /var/server/service/testprocess/main.py &gt;&gt; /tmp/main.py.log 2&gt;&amp;1</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;neither root or bluse&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>就可以了</p>\n<h1 id=\"管理服务\"><a href=\"#管理服务\" class=\"headerlink\" title=\"管理服务\"></a>管理服务</h1><p>使用svstat来查看服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@freebsd:&#x2F;var&#x2F;server&#x2F;testprocess # svstat &#x2F;var&#x2F;server&#x2F;testprocess&#x2F;</span><br><span class=\"line\">&#x2F;var&#x2F;server&#x2F;testprocess&#x2F;: up (pid 7747) 2680 seconds</span><br></pre></td></tr></table></figure>\n<p>使用svc来管理服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME</span><br><span class=\"line\">       svc - controls services monitored by supervise(8).</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">       svc [ -udopchaitkx ] services</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\">       services consists of any number of arguments, each argument naming a</span><br><span class=\"line\">       directory used by supervise(8).</span><br><span class=\"line\"></span><br><span class=\"line\">       svc applies all the options to each service in turn.</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS</span><br><span class=\"line\">       -u     Up. If the service is not running, start it. If the service</span><br><span class=\"line\">              stops, restart it.</span><br><span class=\"line\"></span><br><span class=\"line\">       -d     Down. If the service is running, send it a TERM signal and then</span><br><span class=\"line\">              a CONT signal. After it stops, do not restart it.</span><br><span class=\"line\"></span><br><span class=\"line\">       -o     Once. If the service is not running, start it. Do not restart it</span><br><span class=\"line\">              if it stops.</span><br><span class=\"line\"></span><br><span class=\"line\">       -p     Pause. Send the service a STOP signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -c     Continue. Send the service a CONT signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -h     Hangup. Send the service a HUP signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -a     Alarm. Send the service an ALRM signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -i     Interrupt. Send the service an INT signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -t     Terminate. Send the service a TERM signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -k     Kill. Send the service a KILL signal.</span><br><span class=\"line\"></span><br><span class=\"line\">       -x     Exit.  supervise(8) will exit as soon as the service is down. If</span><br><span class=\"line\">              you use this option on a stable system, you&#39;re doing something</span><br><span class=\"line\">              wrong; supervise(8) is designed to run forever.</span><br></pre></td></tr></table></figure>\n<h1 id=\"daemontools-中的其它工具\"><a href=\"#daemontools-中的其它工具\" class=\"headerlink\" title=\"daemontools 中的其它工具\"></a>daemontools 中的其它工具</h1><p>log工具：</p>\n<ul>\n<li>The readproctitle program</li>\n<li>The multilog program</li>\n<li>The tai64n program</li>\n<li>The tai64nlocal program</li>\n</ul>\n<p>环境工具：</p>\n<ul>\n<li>The setuidgid program</li>\n<li>The envuidgid program</li>\n<li>The envdir program</li>\n<li>The softlimit program</li>\n<li>The setlock program</li>\n</ul>\n"},{"title":"swift3升级后居然不做后向兼容","date":"2017-01-02T03:40:11.000Z","_content":"\n坑死爹了！`apple`这次升级从系统OS到开发工具，没一个不是到处坑人。\n\nmac os 10，升级后，一插android手机就死机！windows蓝屏，它白屏！\n\nxcode升级至8后，上来就要给我的项目转码！想着我大小也是付费用户。每年都交着会费呢！应该给我的待遇不会差的。\n\n没成想，点完OK后。成百上千个错！错误数量999+！它居然不后向兼容！说好的只是语法变动点的嘛！\n\n我自己的项目代码就算了，当时alamofire，SwiftyJSON 等等，我有数十个第三方cocoapod库，没一个支持到swift3的，当时就慌了神了。\n\n想着我还有SVN。xcode这货对SVN的支持是业余级的。自带的提交麻烦就算了。版本还是老的。搞得我提交次数又少。\n\n现在网上翻了翻，好多人为了稳定还在用着xcode7呢！还是我too young!too simple!\n\n以此纪念我上过apple的当！","source":"_posts/damned-xcode.md","raw":"---\ntitle: swift3升级后居然不做后向兼容\ndate: 2017-01-02 11:40:11\ntags: [xcode, swift3]\n---\n\n坑死爹了！`apple`这次升级从系统OS到开发工具，没一个不是到处坑人。\n\nmac os 10，升级后，一插android手机就死机！windows蓝屏，它白屏！\n\nxcode升级至8后，上来就要给我的项目转码！想着我大小也是付费用户。每年都交着会费呢！应该给我的待遇不会差的。\n\n没成想，点完OK后。成百上千个错！错误数量999+！它居然不后向兼容！说好的只是语法变动点的嘛！\n\n我自己的项目代码就算了，当时alamofire，SwiftyJSON 等等，我有数十个第三方cocoapod库，没一个支持到swift3的，当时就慌了神了。\n\n想着我还有SVN。xcode这货对SVN的支持是业余级的。自带的提交麻烦就算了。版本还是老的。搞得我提交次数又少。\n\n现在网上翻了翻，好多人为了稳定还在用着xcode7呢！还是我too young!too simple!\n\n以此纪念我上过apple的当！","slug":"damned-xcode","published":1,"updated":"2021-01-06T09:56:16.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r6000a2aahaqzz7rhi","content":"<p>坑死爹了！<code>apple</code>这次升级从系统OS到开发工具，没一个不是到处坑人。</p>\n<p>mac os 10，升级后，一插android手机就死机！windows蓝屏，它白屏！</p>\n<p>xcode升级至8后，上来就要给我的项目转码！想着我大小也是付费用户。每年都交着会费呢！应该给我的待遇不会差的。</p>\n<p>没成想，点完OK后。成百上千个错！错误数量999+！它居然不后向兼容！说好的只是语法变动点的嘛！</p>\n<p>我自己的项目代码就算了，当时alamofire，SwiftyJSON 等等，我有数十个第三方cocoapod库，没一个支持到swift3的，当时就慌了神了。</p>\n<p>想着我还有SVN。xcode这货对SVN的支持是业余级的。自带的提交麻烦就算了。版本还是老的。搞得我提交次数又少。</p>\n<p>现在网上翻了翻，好多人为了稳定还在用着xcode7呢！还是我too young!too simple!</p>\n<p>以此纪念我上过apple的当！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>坑死爹了！<code>apple</code>这次升级从系统OS到开发工具，没一个不是到处坑人。</p>\n<p>mac os 10，升级后，一插android手机就死机！windows蓝屏，它白屏！</p>\n<p>xcode升级至8后，上来就要给我的项目转码！想着我大小也是付费用户。每年都交着会费呢！应该给我的待遇不会差的。</p>\n<p>没成想，点完OK后。成百上千个错！错误数量999+！它居然不后向兼容！说好的只是语法变动点的嘛！</p>\n<p>我自己的项目代码就算了，当时alamofire，SwiftyJSON 等等，我有数十个第三方cocoapod库，没一个支持到swift3的，当时就慌了神了。</p>\n<p>想着我还有SVN。xcode这货对SVN的支持是业余级的。自带的提交麻烦就算了。版本还是老的。搞得我提交次数又少。</p>\n<p>现在网上翻了翻，好多人为了稳定还在用着xcode7呢！还是我too young!too simple!</p>\n<p>以此纪念我上过apple的当！</p>\n"},{"title":"FFmpeg视频裁剪","date":"2021-02-01T07:51:45.000Z","_content":"\n视频裁剪就是选中你想要的矩形区域并只输出这个区域，去污不残留。裁剪通常和大小调整，填充和其他操作一起使用。\n\n# 基本裁切内容\n老版本的FFmpeg有`cropbottom`、`cropleft`、`cropright`、`croptop`几个指令，但是现在过时了。裁剪操作现在使用下表描述的`crop`滤镜。\n\n![image](https://user-images.githubusercontent.com/1764005/106429770-d9b79280-64a5-11eb-9531-c3673b9399bf.png)\n\n`ow`的值能够通过`oh`的值推导得出，反之亦然。但是不能通过`x`和y推导得出，因为它们是在`ow`和`oh`之后进行求值的。另外`x`能够通过`y`推导得出，反之亦然。\n\n好懵逼。先看人家举的栗子：\n\n```shell\nffmpeg -i input -vf crop=iw/3:ih:0:0 output\nffmpeg -i input -vf crop=iw/3:ih:iw/3:0 output\nffmpeg -i input -vf crop=iw/3:ih:iw/3*2:0 output\n```\n结果还是没明白人家什么意思。再看个图：\n![image](https://user-images.githubusercontent.com/1764005/106429885-09669a80-64a6-11eb-9c9c-cc4846b40487.png)\n\n# 中心裁剪\n当我们进行中心裁剪操作时，可以跳过`crop`滤镜`x`和`y`参数的输入。默认`x`和`y`的值分别是：`x_default = ( input width - output width)/2，y_default = ( input height - output height)/2`\n这意味着中心裁剪时默认值是自动设置的。那么裁剪中心区域的语法是：`ffmpeg -i input_file -vf crop=w:h output_file`\n例如`ffmpeg -i input.mpg -vf crop=iw/2:ih/2 output.mp4`表示以中心裁剪的方式裁出宽高为原视频一半的视频。\n","source":"_posts/ffmpeg-resize.md","raw":"---\ntitle: FFmpeg视频裁剪\ndate: 2021-02-01 15:51:45\ntags: [FFmpeg, 视频剪裁]\n---\n\n视频裁剪就是选中你想要的矩形区域并只输出这个区域，去污不残留。裁剪通常和大小调整，填充和其他操作一起使用。\n\n# 基本裁切内容\n老版本的FFmpeg有`cropbottom`、`cropleft`、`cropright`、`croptop`几个指令，但是现在过时了。裁剪操作现在使用下表描述的`crop`滤镜。\n\n![image](https://user-images.githubusercontent.com/1764005/106429770-d9b79280-64a5-11eb-9531-c3673b9399bf.png)\n\n`ow`的值能够通过`oh`的值推导得出，反之亦然。但是不能通过`x`和y推导得出，因为它们是在`ow`和`oh`之后进行求值的。另外`x`能够通过`y`推导得出，反之亦然。\n\n好懵逼。先看人家举的栗子：\n\n```shell\nffmpeg -i input -vf crop=iw/3:ih:0:0 output\nffmpeg -i input -vf crop=iw/3:ih:iw/3:0 output\nffmpeg -i input -vf crop=iw/3:ih:iw/3*2:0 output\n```\n结果还是没明白人家什么意思。再看个图：\n![image](https://user-images.githubusercontent.com/1764005/106429885-09669a80-64a6-11eb-9c9c-cc4846b40487.png)\n\n# 中心裁剪\n当我们进行中心裁剪操作时，可以跳过`crop`滤镜`x`和`y`参数的输入。默认`x`和`y`的值分别是：`x_default = ( input width - output width)/2，y_default = ( input height - output height)/2`\n这意味着中心裁剪时默认值是自动设置的。那么裁剪中心区域的语法是：`ffmpeg -i input_file -vf crop=w:h output_file`\n例如`ffmpeg -i input.mpg -vf crop=iw/2:ih/2 output.mp4`表示以中心裁剪的方式裁出宽高为原视频一半的视频。\n","slug":"ffmpeg-resize","published":1,"updated":"2021-02-01T07:58:01.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r7000c2aah3nms8dz2","content":"<p>视频裁剪就是选中你想要的矩形区域并只输出这个区域，去污不残留。裁剪通常和大小调整，填充和其他操作一起使用。</p>\n<h1 id=\"基本裁切内容\"><a href=\"#基本裁切内容\" class=\"headerlink\" title=\"基本裁切内容\"></a>基本裁切内容</h1><p>老版本的FFmpeg有<code>cropbottom</code>、<code>cropleft</code>、<code>cropright</code>、<code>croptop</code>几个指令，但是现在过时了。裁剪操作现在使用下表描述的<code>crop</code>滤镜。</p>\n<p><img src=\"https://user-images.githubusercontent.com/1764005/106429770-d9b79280-64a5-11eb-9531-c3673b9399bf.png\" alt=\"image\"></p>\n<p><code>ow</code>的值能够通过<code>oh</code>的值推导得出，反之亦然。但是不能通过<code>x</code>和y推导得出，因为它们是在<code>ow</code>和<code>oh</code>之后进行求值的。另外<code>x</code>能够通过<code>y</code>推导得出，反之亦然。</p>\n<p>好懵逼。先看人家举的栗子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input -vf crop=iw/3:ih:0:0 output</span><br><span class=\"line\">ffmpeg -i input -vf crop=iw/3:ih:iw/3:0 output</span><br><span class=\"line\">ffmpeg -i input -vf crop=iw/3:ih:iw/3*2:0 output</span><br></pre></td></tr></table></figure>\n<p>结果还是没明白人家什么意思。再看个图：<br><img src=\"https://user-images.githubusercontent.com/1764005/106429885-09669a80-64a6-11eb-9c9c-cc4846b40487.png\" alt=\"image\"></p>\n<h1 id=\"中心裁剪\"><a href=\"#中心裁剪\" class=\"headerlink\" title=\"中心裁剪\"></a>中心裁剪</h1><p>当我们进行中心裁剪操作时，可以跳过<code>crop</code>滤镜<code>x</code>和<code>y</code>参数的输入。默认<code>x</code>和<code>y</code>的值分别是：<code>x_default = ( input width - output width)/2，y_default = ( input height - output height)/2</code><br>这意味着中心裁剪时默认值是自动设置的。那么裁剪中心区域的语法是：<code>ffmpeg -i input_file -vf crop=w:h output_file</code><br>例如<code>ffmpeg -i input.mpg -vf crop=iw/2:ih/2 output.mp4</code>表示以中心裁剪的方式裁出宽高为原视频一半的视频。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>视频裁剪就是选中你想要的矩形区域并只输出这个区域，去污不残留。裁剪通常和大小调整，填充和其他操作一起使用。</p>\n<h1 id=\"基本裁切内容\"><a href=\"#基本裁切内容\" class=\"headerlink\" title=\"基本裁切内容\"></a>基本裁切内容</h1><p>老版本的FFmpeg有<code>cropbottom</code>、<code>cropleft</code>、<code>cropright</code>、<code>croptop</code>几个指令，但是现在过时了。裁剪操作现在使用下表描述的<code>crop</code>滤镜。</p>\n<p><img src=\"https://user-images.githubusercontent.com/1764005/106429770-d9b79280-64a5-11eb-9531-c3673b9399bf.png\" alt=\"image\"></p>\n<p><code>ow</code>的值能够通过<code>oh</code>的值推导得出，反之亦然。但是不能通过<code>x</code>和y推导得出，因为它们是在<code>ow</code>和<code>oh</code>之后进行求值的。另外<code>x</code>能够通过<code>y</code>推导得出，反之亦然。</p>\n<p>好懵逼。先看人家举的栗子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input -vf crop=iw/3:ih:0:0 output</span><br><span class=\"line\">ffmpeg -i input -vf crop=iw/3:ih:iw/3:0 output</span><br><span class=\"line\">ffmpeg -i input -vf crop=iw/3:ih:iw/3*2:0 output</span><br></pre></td></tr></table></figure>\n<p>结果还是没明白人家什么意思。再看个图：<br><img src=\"https://user-images.githubusercontent.com/1764005/106429885-09669a80-64a6-11eb-9c9c-cc4846b40487.png\" alt=\"image\"></p>\n<h1 id=\"中心裁剪\"><a href=\"#中心裁剪\" class=\"headerlink\" title=\"中心裁剪\"></a>中心裁剪</h1><p>当我们进行中心裁剪操作时，可以跳过<code>crop</code>滤镜<code>x</code>和<code>y</code>参数的输入。默认<code>x</code>和<code>y</code>的值分别是：<code>x_default = ( input width - output width)/2，y_default = ( input height - output height)/2</code><br>这意味着中心裁剪时默认值是自动设置的。那么裁剪中心区域的语法是：<code>ffmpeg -i input_file -vf crop=w:h output_file</code><br>例如<code>ffmpeg -i input.mpg -vf crop=iw/2:ih/2 output.mp4</code>表示以中心裁剪的方式裁出宽高为原视频一半的视频。</p>\n"},{"title":"FreeBSD 11 磁盘空间扩容","date":"2018-06-16T09:43:11.000Z","_content":"\n## 场景\n阿里云买了个60G的系统盘ECS。进去一看只有20G！\n原因是：它刷镜像时，只刷了前边的20G。后边的40G，就成了空白。结果交到我手上，就成了个半成品。\n只得自己给它扩容\n\n初始状态：\n```shell\nroot@log:~ # df -h\nFilesystem                     Size    Used   Avail Capacity  Mounted on\n/dev/ufsid/59a7effe7885633c     19G    4.1G     14G    23%    /\ndevfs                          1.0K    1.0K      0B   100%    /dev\n```\n### 第一步：查看\n```shell\nroot@log:~ # gpart show\n=>       63  125829057  vtbd0  MBR  (60G)\n         63          1         - free -  (512B)\n         64   41942975      1  freebsd  [active]  (20G)\n   41943039   83886081         - free -  (40G)\n```\n的确有40G的空白\n\n### 第二步：重置大小\n```shell\nroot@log:~ # gpart resize -i 1 -a 4k -s 59G vtbd0\nvtbd0s1 resized\n```\n`-i 1` 这里的`1`是抄写 `gpart show`中`vtbd0`一栏下当前正使用的磁盘的编号\n`-s 59G` 为什么要丢掉一个G？因为交换分区需要空间。\n\n### 第三步：执行配置\n```shell\nroot@log:~ # service growfs onestart\nGrowing root partition to fill device\nvtbd0s1 resized\nsuper-block backups (for fsck_ffs -b #) at:\n 42314112, 43596352, 44878592, 46160832, 47443072, 48725312, 50007552, 51289792, 52572032, 53854272, 55136512, 56418752, 57700992, 58983232, 60265472, 61547712, 62829952,\n 64112192, 65394432, 66676672, 67958912, 69241152, 70523392, 71805632, 73087872, 74370112, 75652352, 76934592, 78216832, 79499072, 80781312, 82063552, 83345792, 84628032,\n 85910272, 87192512, 88474752, 89756992, 91039232, 92321472, 93603712, 94885952, 96168192, 97450432, 98732672, 100014912, 101297152, 102579392, 103861632, 105143872, 106426112,\n 107708352, 108990592, 110272832, 111555072, 112837312, 114119552, 115401792, 116684032, 117966272, 119248512, 120530752, 121812992, 123095232, 124377472, 125659712\n```\n### 完成！并检查\n```shell\nroot@log:~ # df -h\nFilesystem                     Size    Used   Avail Capacity  Mounted on\n/dev/ufsid/59a7effe7885633c     58G    4.2G     49G     8%    /\ndevfs                          1.0K    1.0K      0B   100%    /dev\nroot@log:~ # gpart show\n=>       63  125829057  vtbd0  MBR  (60G)\n         63          1         - free -  (512B)\n         64  125829056      1  freebsd  [active]  (60G)\n\n```","source":"_posts/freebsd-disk-resize.md","raw":"---\ntitle: FreeBSD 11 磁盘空间扩容\ndate: 2018-06-16 17:43:11\ntags: [FreeBSD]\n---\n\n## 场景\n阿里云买了个60G的系统盘ECS。进去一看只有20G！\n原因是：它刷镜像时，只刷了前边的20G。后边的40G，就成了空白。结果交到我手上，就成了个半成品。\n只得自己给它扩容\n\n初始状态：\n```shell\nroot@log:~ # df -h\nFilesystem                     Size    Used   Avail Capacity  Mounted on\n/dev/ufsid/59a7effe7885633c     19G    4.1G     14G    23%    /\ndevfs                          1.0K    1.0K      0B   100%    /dev\n```\n### 第一步：查看\n```shell\nroot@log:~ # gpart show\n=>       63  125829057  vtbd0  MBR  (60G)\n         63          1         - free -  (512B)\n         64   41942975      1  freebsd  [active]  (20G)\n   41943039   83886081         - free -  (40G)\n```\n的确有40G的空白\n\n### 第二步：重置大小\n```shell\nroot@log:~ # gpart resize -i 1 -a 4k -s 59G vtbd0\nvtbd0s1 resized\n```\n`-i 1` 这里的`1`是抄写 `gpart show`中`vtbd0`一栏下当前正使用的磁盘的编号\n`-s 59G` 为什么要丢掉一个G？因为交换分区需要空间。\n\n### 第三步：执行配置\n```shell\nroot@log:~ # service growfs onestart\nGrowing root partition to fill device\nvtbd0s1 resized\nsuper-block backups (for fsck_ffs -b #) at:\n 42314112, 43596352, 44878592, 46160832, 47443072, 48725312, 50007552, 51289792, 52572032, 53854272, 55136512, 56418752, 57700992, 58983232, 60265472, 61547712, 62829952,\n 64112192, 65394432, 66676672, 67958912, 69241152, 70523392, 71805632, 73087872, 74370112, 75652352, 76934592, 78216832, 79499072, 80781312, 82063552, 83345792, 84628032,\n 85910272, 87192512, 88474752, 89756992, 91039232, 92321472, 93603712, 94885952, 96168192, 97450432, 98732672, 100014912, 101297152, 102579392, 103861632, 105143872, 106426112,\n 107708352, 108990592, 110272832, 111555072, 112837312, 114119552, 115401792, 116684032, 117966272, 119248512, 120530752, 121812992, 123095232, 124377472, 125659712\n```\n### 完成！并检查\n```shell\nroot@log:~ # df -h\nFilesystem                     Size    Used   Avail Capacity  Mounted on\n/dev/ufsid/59a7effe7885633c     58G    4.2G     49G     8%    /\ndevfs                          1.0K    1.0K      0B   100%    /dev\nroot@log:~ # gpart show\n=>       63  125829057  vtbd0  MBR  (60G)\n         63          1         - free -  (512B)\n         64  125829056      1  freebsd  [active]  (60G)\n\n```","slug":"freebsd-disk-resize","published":1,"updated":"2021-01-06T09:56:16.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r8000e2aahc9w77kxm","content":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>阿里云买了个60G的系统盘ECS。进去一看只有20G！<br>原因是：它刷镜像时，只刷了前边的20G。后边的40G，就成了空白。结果交到我手上，就成了个半成品。<br>只得自己给它扩容</p>\n<p>初始状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # df -h</span><br><span class=\"line\">Filesystem                     Size    Used   Avail Capacity  Mounted on</span><br><span class=\"line\">/dev/ufsid/59a7effe7885633c     19G    4.1G     14G    23%    /</span><br><span class=\"line\">devfs                          1.0K    1.0K      0B   100%    /dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一步：查看\"><a href=\"#第一步：查看\" class=\"headerlink\" title=\"第一步：查看\"></a>第一步：查看</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # gpart show</span><br><span class=\"line\">=&gt;       63  125829057  vtbd0  MBR  (60G)</span><br><span class=\"line\">         63          1         - free -  (512B)</span><br><span class=\"line\">         64   41942975      1  freebsd  [active]  (20G)</span><br><span class=\"line\">   41943039   83886081         - free -  (40G)</span><br></pre></td></tr></table></figure>\n<p>的确有40G的空白</p>\n<h3 id=\"第二步：重置大小\"><a href=\"#第二步：重置大小\" class=\"headerlink\" title=\"第二步：重置大小\"></a>第二步：重置大小</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # gpart resize -i 1 -a 4k -s 59G vtbd0</span><br><span class=\"line\">vtbd0s1 resized</span><br></pre></td></tr></table></figure>\n<p><code>-i 1</code> 这里的<code>1</code>是抄写 <code>gpart show</code>中<code>vtbd0</code>一栏下当前正使用的磁盘的编号<br><code>-s 59G</code> 为什么要丢掉一个G？因为交换分区需要空间。</p>\n<h3 id=\"第三步：执行配置\"><a href=\"#第三步：执行配置\" class=\"headerlink\" title=\"第三步：执行配置\"></a>第三步：执行配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # service growfs onestart</span><br><span class=\"line\">Growing root partition to fill device</span><br><span class=\"line\">vtbd0s1 resized</span><br><span class=\"line\">super-block backups (for fsck_ffs -b #) at:</span><br><span class=\"line\"> 42314112, 43596352, 44878592, 46160832, 47443072, 48725312, 50007552, 51289792, 52572032, 53854272, 55136512, 56418752, 57700992, 58983232, 60265472, 61547712, 62829952,</span><br><span class=\"line\"> 64112192, 65394432, 66676672, 67958912, 69241152, 70523392, 71805632, 73087872, 74370112, 75652352, 76934592, 78216832, 79499072, 80781312, 82063552, 83345792, 84628032,</span><br><span class=\"line\"> 85910272, 87192512, 88474752, 89756992, 91039232, 92321472, 93603712, 94885952, 96168192, 97450432, 98732672, 100014912, 101297152, 102579392, 103861632, 105143872, 106426112,</span><br><span class=\"line\"> 107708352, 108990592, 110272832, 111555072, 112837312, 114119552, 115401792, 116684032, 117966272, 119248512, 120530752, 121812992, 123095232, 124377472, 125659712</span><br></pre></td></tr></table></figure>\n<h3 id=\"完成！并检查\"><a href=\"#完成！并检查\" class=\"headerlink\" title=\"完成！并检查\"></a>完成！并检查</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # df -h</span><br><span class=\"line\">Filesystem                     Size    Used   Avail Capacity  Mounted on</span><br><span class=\"line\">/dev/ufsid/59a7effe7885633c     58G    4.2G     49G     8%    /</span><br><span class=\"line\">devfs                          1.0K    1.0K      0B   100%    /dev</span><br><span class=\"line\">root@log:~ # gpart show</span><br><span class=\"line\">=&gt;       63  125829057  vtbd0  MBR  (60G)</span><br><span class=\"line\">         63          1         - free -  (512B)</span><br><span class=\"line\">         64  125829056      1  freebsd  [active]  (60G)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>阿里云买了个60G的系统盘ECS。进去一看只有20G！<br>原因是：它刷镜像时，只刷了前边的20G。后边的40G，就成了空白。结果交到我手上，就成了个半成品。<br>只得自己给它扩容</p>\n<p>初始状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # df -h</span><br><span class=\"line\">Filesystem                     Size    Used   Avail Capacity  Mounted on</span><br><span class=\"line\">/dev/ufsid/59a7effe7885633c     19G    4.1G     14G    23%    /</span><br><span class=\"line\">devfs                          1.0K    1.0K      0B   100%    /dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一步：查看\"><a href=\"#第一步：查看\" class=\"headerlink\" title=\"第一步：查看\"></a>第一步：查看</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # gpart show</span><br><span class=\"line\">=&gt;       63  125829057  vtbd0  MBR  (60G)</span><br><span class=\"line\">         63          1         - free -  (512B)</span><br><span class=\"line\">         64   41942975      1  freebsd  [active]  (20G)</span><br><span class=\"line\">   41943039   83886081         - free -  (40G)</span><br></pre></td></tr></table></figure>\n<p>的确有40G的空白</p>\n<h3 id=\"第二步：重置大小\"><a href=\"#第二步：重置大小\" class=\"headerlink\" title=\"第二步：重置大小\"></a>第二步：重置大小</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # gpart resize -i 1 -a 4k -s 59G vtbd0</span><br><span class=\"line\">vtbd0s1 resized</span><br></pre></td></tr></table></figure>\n<p><code>-i 1</code> 这里的<code>1</code>是抄写 <code>gpart show</code>中<code>vtbd0</code>一栏下当前正使用的磁盘的编号<br><code>-s 59G</code> 为什么要丢掉一个G？因为交换分区需要空间。</p>\n<h3 id=\"第三步：执行配置\"><a href=\"#第三步：执行配置\" class=\"headerlink\" title=\"第三步：执行配置\"></a>第三步：执行配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # service growfs onestart</span><br><span class=\"line\">Growing root partition to fill device</span><br><span class=\"line\">vtbd0s1 resized</span><br><span class=\"line\">super-block backups (for fsck_ffs -b #) at:</span><br><span class=\"line\"> 42314112, 43596352, 44878592, 46160832, 47443072, 48725312, 50007552, 51289792, 52572032, 53854272, 55136512, 56418752, 57700992, 58983232, 60265472, 61547712, 62829952,</span><br><span class=\"line\"> 64112192, 65394432, 66676672, 67958912, 69241152, 70523392, 71805632, 73087872, 74370112, 75652352, 76934592, 78216832, 79499072, 80781312, 82063552, 83345792, 84628032,</span><br><span class=\"line\"> 85910272, 87192512, 88474752, 89756992, 91039232, 92321472, 93603712, 94885952, 96168192, 97450432, 98732672, 100014912, 101297152, 102579392, 103861632, 105143872, 106426112,</span><br><span class=\"line\"> 107708352, 108990592, 110272832, 111555072, 112837312, 114119552, 115401792, 116684032, 117966272, 119248512, 120530752, 121812992, 123095232, 124377472, 125659712</span><br></pre></td></tr></table></figure>\n<h3 id=\"完成！并检查\"><a href=\"#完成！并检查\" class=\"headerlink\" title=\"完成！并检查\"></a>完成！并检查</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@log:~ # df -h</span><br><span class=\"line\">Filesystem                     Size    Used   Avail Capacity  Mounted on</span><br><span class=\"line\">/dev/ufsid/59a7effe7885633c     58G    4.2G     49G     8%    /</span><br><span class=\"line\">devfs                          1.0K    1.0K      0B   100%    /dev</span><br><span class=\"line\">root@log:~ # gpart show</span><br><span class=\"line\">=&gt;       63  125829057  vtbd0  MBR  (60G)</span><br><span class=\"line\">         63          1         - free -  (512B)</span><br><span class=\"line\">         64  125829056      1  freebsd  [active]  (60G)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"FreeBSD上使用tunnelbroker隧道支持ipv6","date":"2017-03-19T04:11:21.000Z","_content":"\n# 起源\nIOS被拒，原因又是`IPV6 only`网络下访问异常！\n\n于是开始自检！\n\n先检查了代码，没有使用只能用于ipv4的代码。\n\n接口中也没有使用ipv4静态地址的请求。\n\n那就是网络问题了！\n\n先模拟了一下`ipv6`网络。成功配置了mac pro共享网络。访问了一下！没毛病！\n\n那就是`IPV6 only`网络至ipv4，且走国际线路，这个有些特别了！\n找了一下发现不少人吐嘈这个事，文章中甚至扬言要投靠`Android`^_^。\n且有公司已经把优化国内IPV4至苹果公司的ipv6-only的网络做成服务，当生意做了。\n\n这个问题自己解决就是给自己的服务器上加一个ipv6地址，就OK啦！\n但现实太骨感，阿里云没有ipv6。只好通过其它途径了。比较合适的方案就是使用[tunnelbroker](https://tunnelbroker.net/)提供的ipv6隧道了。\n\n# 动手\n* 注册账号\n* 验证邮箱\n完成后，登录进去，在左侧的`User Functions`下`Create Regular Tunnel`创建一个常规的就好。\n\n## 配置\n创建完通道后，在`Tunnel Details`下有个`Example Configurations`标签，这里能按你的系统生成配置指令。\n进去选择`Freebsd > 4.4`，得到：\n```text\nifconfig gif0 create\nifconfig gif0 tunnel [我的IP] 209.51.161.14  #我服务器的IP 帮我转发的ipv4IP\nifconfig gif0 inet6 2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128       # 出隧道后，我在公网上的ipv6地址 隧道方的服务ipv6地址\nroute -n add -inet6 default 2001:470:1f06:1458::1\nifconfig gif0 up\n```\n进去执行掉\n执行完后，`ifconfig`里就会多出来一个gif0设备。\n\nFreeBSD的/etc/rc.conf增加配置，把禁止ipv6的项删去。\n```text\n# IPv6 Tunnel Client\nipv6_enable=\"YES\"\ngif_interfaces=\"gif0\"\ngifconfig_gif0=\"[我的IP] 209.51.161.14\"\nipv6_ifconfig_gif0=\"2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128\"\nipv6_defaultrouter=\"2001:470:1f06:1458::1\"\n \n# IPv6 Gateway\nipv6_config_nfe0=\"2001:470:1f07:1458::1 prefixlen 64\"   #这个是路由地址：在‘Tunnel Details’ 里，是‘Routed IPv6 Prefixes’下的‘Routed /64’项。\nipv6_gateway_enable=\"YES\"\nrtadvd_enable=\"YES\"\nrtadvd_interfaces=\"nfe0\"\n```\n这个需要rtadvd服务，`service rtadvd start`。\n\n## nginx\nFreeBSD处理ipv4与v6是两条不同的道。\n所以在`nginx`里，要加上ipv6的监听，类似：\n```text\nlisten 443 ssl;\nlisten [::]:443 ssl;\n```\n再`sysctl net.inet6.ip6.forwarding`一下，看看是否支持转发。\n如果是0。就得放开！执行：`sysctl -w net.inet6.ip6.forwarding=1`。\n\n## dns\n进入DNSPOD给域名下加一条`AAAA`记录。地址用`2001:470:1f06:1458::2`。\n\n# 检测\n没有ipv6-only环境，怎么判断这一切生效了呢？只需打开浏览器访问：[`http://www.wangjunfeng.com.cn.ipv4.sixxs.org`](http://www.wangjunfeng.com.cn.ipv4.sixxs.org)。\n这里`www.wangjunfeng.com.cn`就是要支持的网址了。如果正常打开。就OK了！\n","source":"_posts/freebsd-nginx-ipv6-with-tunnelbroker.md","raw":"---\ntitle: FreeBSD上使用tunnelbroker隧道支持ipv6\ndate: 2017-03-19 12:11:21\ntags: [FreeBSD, nginx, ipv6, tunnelbroker]\n---\n\n# 起源\nIOS被拒，原因又是`IPV6 only`网络下访问异常！\n\n于是开始自检！\n\n先检查了代码，没有使用只能用于ipv4的代码。\n\n接口中也没有使用ipv4静态地址的请求。\n\n那就是网络问题了！\n\n先模拟了一下`ipv6`网络。成功配置了mac pro共享网络。访问了一下！没毛病！\n\n那就是`IPV6 only`网络至ipv4，且走国际线路，这个有些特别了！\n找了一下发现不少人吐嘈这个事，文章中甚至扬言要投靠`Android`^_^。\n且有公司已经把优化国内IPV4至苹果公司的ipv6-only的网络做成服务，当生意做了。\n\n这个问题自己解决就是给自己的服务器上加一个ipv6地址，就OK啦！\n但现实太骨感，阿里云没有ipv6。只好通过其它途径了。比较合适的方案就是使用[tunnelbroker](https://tunnelbroker.net/)提供的ipv6隧道了。\n\n# 动手\n* 注册账号\n* 验证邮箱\n完成后，登录进去，在左侧的`User Functions`下`Create Regular Tunnel`创建一个常规的就好。\n\n## 配置\n创建完通道后，在`Tunnel Details`下有个`Example Configurations`标签，这里能按你的系统生成配置指令。\n进去选择`Freebsd > 4.4`，得到：\n```text\nifconfig gif0 create\nifconfig gif0 tunnel [我的IP] 209.51.161.14  #我服务器的IP 帮我转发的ipv4IP\nifconfig gif0 inet6 2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128       # 出隧道后，我在公网上的ipv6地址 隧道方的服务ipv6地址\nroute -n add -inet6 default 2001:470:1f06:1458::1\nifconfig gif0 up\n```\n进去执行掉\n执行完后，`ifconfig`里就会多出来一个gif0设备。\n\nFreeBSD的/etc/rc.conf增加配置，把禁止ipv6的项删去。\n```text\n# IPv6 Tunnel Client\nipv6_enable=\"YES\"\ngif_interfaces=\"gif0\"\ngifconfig_gif0=\"[我的IP] 209.51.161.14\"\nipv6_ifconfig_gif0=\"2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128\"\nipv6_defaultrouter=\"2001:470:1f06:1458::1\"\n \n# IPv6 Gateway\nipv6_config_nfe0=\"2001:470:1f07:1458::1 prefixlen 64\"   #这个是路由地址：在‘Tunnel Details’ 里，是‘Routed IPv6 Prefixes’下的‘Routed /64’项。\nipv6_gateway_enable=\"YES\"\nrtadvd_enable=\"YES\"\nrtadvd_interfaces=\"nfe0\"\n```\n这个需要rtadvd服务，`service rtadvd start`。\n\n## nginx\nFreeBSD处理ipv4与v6是两条不同的道。\n所以在`nginx`里，要加上ipv6的监听，类似：\n```text\nlisten 443 ssl;\nlisten [::]:443 ssl;\n```\n再`sysctl net.inet6.ip6.forwarding`一下，看看是否支持转发。\n如果是0。就得放开！执行：`sysctl -w net.inet6.ip6.forwarding=1`。\n\n## dns\n进入DNSPOD给域名下加一条`AAAA`记录。地址用`2001:470:1f06:1458::2`。\n\n# 检测\n没有ipv6-only环境，怎么判断这一切生效了呢？只需打开浏览器访问：[`http://www.wangjunfeng.com.cn.ipv4.sixxs.org`](http://www.wangjunfeng.com.cn.ipv4.sixxs.org)。\n这里`www.wangjunfeng.com.cn`就是要支持的网址了。如果正常打开。就OK了！\n","slug":"freebsd-nginx-ipv6-with-tunnelbroker","published":1,"updated":"2021-02-01T07:52:57.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5r9000h2aah35mu28gm","content":"<h1 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h1><p>IOS被拒，原因又是<code>IPV6 only</code>网络下访问异常！</p>\n<p>于是开始自检！</p>\n<p>先检查了代码，没有使用只能用于ipv4的代码。</p>\n<p>接口中也没有使用ipv4静态地址的请求。</p>\n<p>那就是网络问题了！</p>\n<p>先模拟了一下<code>ipv6</code>网络。成功配置了mac pro共享网络。访问了一下！没毛病！</p>\n<p>那就是<code>IPV6 only</code>网络至ipv4，且走国际线路，这个有些特别了！<br>找了一下发现不少人吐嘈这个事，文章中甚至扬言要投靠<code>Android</code>^_^。<br>且有公司已经把优化国内IPV4至苹果公司的ipv6-only的网络做成服务，当生意做了。</p>\n<p>这个问题自己解决就是给自己的服务器上加一个ipv6地址，就OK啦！<br>但现实太骨感，阿里云没有ipv6。只好通过其它途径了。比较合适的方案就是使用<a class=\"link\"   href=\"https://tunnelbroker.net/\" >tunnelbroker<i class=\"fas fa-external-link-alt\"></i></a>提供的ipv6隧道了。</p>\n<h1 id=\"动手\"><a href=\"#动手\" class=\"headerlink\" title=\"动手\"></a>动手</h1><ul>\n<li>注册账号</li>\n<li>验证邮箱<br>完成后，登录进去，在左侧的<code>User Functions</code>下<code>Create Regular Tunnel</code>创建一个常规的就好。</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>创建完通道后，在<code>Tunnel Details</code>下有个<code>Example Configurations</code>标签，这里能按你的系统生成配置指令。<br>进去选择<code>Freebsd &gt; 4.4</code>，得到：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig gif0 create</span><br><span class=\"line\">ifconfig gif0 tunnel [我的IP] 209.51.161.14  #我服务器的IP 帮我转发的ipv4IP</span><br><span class=\"line\">ifconfig gif0 inet6 2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128       # 出隧道后，我在公网上的ipv6地址 隧道方的服务ipv6地址</span><br><span class=\"line\">route -n add -inet6 default 2001:470:1f06:1458::1</span><br><span class=\"line\">ifconfig gif0 up</span><br></pre></td></tr></table></figure>\n<p>进去执行掉<br>执行完后，<code>ifconfig</code>里就会多出来一个gif0设备。</p>\n<p>FreeBSD的/etc/rc.conf增加配置，把禁止ipv6的项删去。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># IPv6 Tunnel Client</span><br><span class=\"line\">ipv6_enable=&quot;YES&quot;</span><br><span class=\"line\">gif_interfaces=&quot;gif0&quot;</span><br><span class=\"line\">gifconfig_gif0=&quot;[我的IP] 209.51.161.14&quot;</span><br><span class=\"line\">ipv6_ifconfig_gif0=&quot;2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128&quot;</span><br><span class=\"line\">ipv6_defaultrouter=&quot;2001:470:1f06:1458::1&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># IPv6 Gateway</span><br><span class=\"line\">ipv6_config_nfe0=&quot;2001:470:1f07:1458::1 prefixlen 64&quot;   #这个是路由地址：在‘Tunnel Details’ 里，是‘Routed IPv6 Prefixes’下的‘Routed /64’项。</span><br><span class=\"line\">ipv6_gateway_enable=&quot;YES&quot;</span><br><span class=\"line\">rtadvd_enable=&quot;YES&quot;</span><br><span class=\"line\">rtadvd_interfaces=&quot;nfe0&quot;</span><br></pre></td></tr></table></figure>\n<p>这个需要rtadvd服务，<code>service rtadvd start</code>。</p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p>FreeBSD处理ipv4与v6是两条不同的道。<br>所以在<code>nginx</code>里，要加上ipv6的监听，类似：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 443 ssl;</span><br><span class=\"line\">listen [::]:443 ssl;</span><br></pre></td></tr></table></figure>\n<p>再<code>sysctl net.inet6.ip6.forwarding</code>一下，看看是否支持转发。<br>如果是0。就得放开！执行：<code>sysctl -w net.inet6.ip6.forwarding=1</code>。</p>\n<h2 id=\"dns\"><a href=\"#dns\" class=\"headerlink\" title=\"dns\"></a>dns</h2><p>进入DNSPOD给域名下加一条<code>AAAA</code>记录。地址用<code>2001:470:1f06:1458::2</code>。</p>\n<h1 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h1><p>没有ipv6-only环境，怎么判断这一切生效了呢？只需打开浏览器访问：<a href=\"http://www.wangjunfeng.com.cn.ipv4.sixxs.org/\"><code>http://www.wangjunfeng.com.cn.ipv4.sixxs.org</code></a>。<br>这里<code>www.wangjunfeng.com.cn</code>就是要支持的网址了。如果正常打开。就OK了！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h1><p>IOS被拒，原因又是<code>IPV6 only</code>网络下访问异常！</p>\n<p>于是开始自检！</p>\n<p>先检查了代码，没有使用只能用于ipv4的代码。</p>\n<p>接口中也没有使用ipv4静态地址的请求。</p>\n<p>那就是网络问题了！</p>\n<p>先模拟了一下<code>ipv6</code>网络。成功配置了mac pro共享网络。访问了一下！没毛病！</p>\n<p>那就是<code>IPV6 only</code>网络至ipv4，且走国际线路，这个有些特别了！<br>找了一下发现不少人吐嘈这个事，文章中甚至扬言要投靠<code>Android</code>^_^。<br>且有公司已经把优化国内IPV4至苹果公司的ipv6-only的网络做成服务，当生意做了。</p>\n<p>这个问题自己解决就是给自己的服务器上加一个ipv6地址，就OK啦！<br>但现实太骨感，阿里云没有ipv6。只好通过其它途径了。比较合适的方案就是使用<a class=\"link\"   href=\"https://tunnelbroker.net/\" >tunnelbroker<i class=\"fas fa-external-link-alt\"></i></a>提供的ipv6隧道了。</p>\n<h1 id=\"动手\"><a href=\"#动手\" class=\"headerlink\" title=\"动手\"></a>动手</h1><ul>\n<li>注册账号</li>\n<li>验证邮箱<br>完成后，登录进去，在左侧的<code>User Functions</code>下<code>Create Regular Tunnel</code>创建一个常规的就好。</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>创建完通道后，在<code>Tunnel Details</code>下有个<code>Example Configurations</code>标签，这里能按你的系统生成配置指令。<br>进去选择<code>Freebsd &gt; 4.4</code>，得到：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig gif0 create</span><br><span class=\"line\">ifconfig gif0 tunnel [我的IP] 209.51.161.14  #我服务器的IP 帮我转发的ipv4IP</span><br><span class=\"line\">ifconfig gif0 inet6 2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128       # 出隧道后，我在公网上的ipv6地址 隧道方的服务ipv6地址</span><br><span class=\"line\">route -n add -inet6 default 2001:470:1f06:1458::1</span><br><span class=\"line\">ifconfig gif0 up</span><br></pre></td></tr></table></figure>\n<p>进去执行掉<br>执行完后，<code>ifconfig</code>里就会多出来一个gif0设备。</p>\n<p>FreeBSD的/etc/rc.conf增加配置，把禁止ipv6的项删去。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># IPv6 Tunnel Client</span><br><span class=\"line\">ipv6_enable=&quot;YES&quot;</span><br><span class=\"line\">gif_interfaces=&quot;gif0&quot;</span><br><span class=\"line\">gifconfig_gif0=&quot;[我的IP] 209.51.161.14&quot;</span><br><span class=\"line\">ipv6_ifconfig_gif0=&quot;2001:470:1f06:1458::2 2001:470:1f06:1458::1 prefixlen 128&quot;</span><br><span class=\"line\">ipv6_defaultrouter=&quot;2001:470:1f06:1458::1&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># IPv6 Gateway</span><br><span class=\"line\">ipv6_config_nfe0=&quot;2001:470:1f07:1458::1 prefixlen 64&quot;   #这个是路由地址：在‘Tunnel Details’ 里，是‘Routed IPv6 Prefixes’下的‘Routed /64’项。</span><br><span class=\"line\">ipv6_gateway_enable=&quot;YES&quot;</span><br><span class=\"line\">rtadvd_enable=&quot;YES&quot;</span><br><span class=\"line\">rtadvd_interfaces=&quot;nfe0&quot;</span><br></pre></td></tr></table></figure>\n<p>这个需要rtadvd服务，<code>service rtadvd start</code>。</p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p>FreeBSD处理ipv4与v6是两条不同的道。<br>所以在<code>nginx</code>里，要加上ipv6的监听，类似：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 443 ssl;</span><br><span class=\"line\">listen [::]:443 ssl;</span><br></pre></td></tr></table></figure>\n<p>再<code>sysctl net.inet6.ip6.forwarding</code>一下，看看是否支持转发。<br>如果是0。就得放开！执行：<code>sysctl -w net.inet6.ip6.forwarding=1</code>。</p>\n<h2 id=\"dns\"><a href=\"#dns\" class=\"headerlink\" title=\"dns\"></a>dns</h2><p>进入DNSPOD给域名下加一条<code>AAAA</code>记录。地址用<code>2001:470:1f06:1458::2</code>。</p>\n<h1 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h1><p>没有ipv6-only环境，怎么判断这一切生效了呢？只需打开浏览器访问：<a href=\"http://www.wangjunfeng.com.cn.ipv4.sixxs.org/\"><code>http://www.wangjunfeng.com.cn.ipv4.sixxs.org</code></a>。<br>这里<code>www.wangjunfeng.com.cn</code>就是要支持的网址了。如果正常打开。就OK了！</p>\n"},{"title":"FreeBSD 的日常","date":"2017-07-22T11:48:11.000Z","_content":"\n# 查看当前内核，编译时的参数\n\n`sysctl kern.conftxt`\n\n# 配置并编译新内核\n\n```bash\ncd /usr/src/sys/amd64/conf/\nee GENERIC\nconfig GENERIC\ncd ../compile/GENERIC/\nmake cleandepend && make depend\nmake\nmake install\n```\n# 从低版本内核升级至高版本\n\n```bash\nsetenv UNAME_r \"10.3-RELEASE\"\nfreebsd-update -r 11.0-RELEASE upgrade\nfreebsd-update insatll\nreboot\nfreebsd-update insatll\n```\n- 注册不能跨大版本。如：从10.1 -> 11.0 中间要经过10.3。 10.1 -> 10.3 -> 11.0\n- 如果有定义自己内核，需先升级，再编译自己的配置。\n\n# 给内核打补丁\n```bash\nfreebsd-update fetch\nfreebsd-update install\n```","source":"_posts/freebsd.md","raw":"---\ntitle: FreeBSD 的日常\ndate: 2017-07-22 19:48:11\ntags: [FreeBSD]\n---\n\n# 查看当前内核，编译时的参数\n\n`sysctl kern.conftxt`\n\n# 配置并编译新内核\n\n```bash\ncd /usr/src/sys/amd64/conf/\nee GENERIC\nconfig GENERIC\ncd ../compile/GENERIC/\nmake cleandepend && make depend\nmake\nmake install\n```\n# 从低版本内核升级至高版本\n\n```bash\nsetenv UNAME_r \"10.3-RELEASE\"\nfreebsd-update -r 11.0-RELEASE upgrade\nfreebsd-update insatll\nreboot\nfreebsd-update insatll\n```\n- 注册不能跨大版本。如：从10.1 -> 11.0 中间要经过10.3。 10.1 -> 10.3 -> 11.0\n- 如果有定义自己内核，需先升级，再编译自己的配置。\n\n# 给内核打补丁\n```bash\nfreebsd-update fetch\nfreebsd-update install\n```","slug":"freebsd","published":1,"updated":"2021-01-06T09:56:16.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5ra000i2aah0ry8136x","content":"<h1 id=\"查看当前内核，编译时的参数\"><a href=\"#查看当前内核，编译时的参数\" class=\"headerlink\" title=\"查看当前内核，编译时的参数\"></a>查看当前内核，编译时的参数</h1><p><code>sysctl kern.conftxt</code></p>\n<h1 id=\"配置并编译新内核\"><a href=\"#配置并编译新内核\" class=\"headerlink\" title=\"配置并编译新内核\"></a>配置并编译新内核</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/sys/amd64/conf/</span><br><span class=\"line\">ee GENERIC</span><br><span class=\"line\">config GENERIC</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../compile/GENERIC/</span><br><span class=\"line\">make cleandepend &amp;&amp; make depend</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"从低版本内核升级至高版本\"><a href=\"#从低版本内核升级至高版本\" class=\"headerlink\" title=\"从低版本内核升级至高版本\"></a>从低版本内核升级至高版本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenv UNAME_r <span class=\"string\">&quot;10.3-RELEASE&quot;</span></span><br><span class=\"line\">freebsd-update -r 11.0-RELEASE upgrade</span><br><span class=\"line\">freebsd-update insatll</span><br><span class=\"line\">reboot</span><br><span class=\"line\">freebsd-update insatll</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注册不能跨大版本。如：从10.1 -&gt; 11.0 中间要经过10.3。 10.1 -&gt; 10.3 -&gt; 11.0</li>\n<li>如果有定义自己内核，需先升级，再编译自己的配置。</li>\n</ul>\n<h1 id=\"给内核打补丁\"><a href=\"#给内核打补丁\" class=\"headerlink\" title=\"给内核打补丁\"></a>给内核打补丁</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">freebsd-update fetch</span><br><span class=\"line\">freebsd-update install</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"查看当前内核，编译时的参数\"><a href=\"#查看当前内核，编译时的参数\" class=\"headerlink\" title=\"查看当前内核，编译时的参数\"></a>查看当前内核，编译时的参数</h1><p><code>sysctl kern.conftxt</code></p>\n<h1 id=\"配置并编译新内核\"><a href=\"#配置并编译新内核\" class=\"headerlink\" title=\"配置并编译新内核\"></a>配置并编译新内核</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/sys/amd64/conf/</span><br><span class=\"line\">ee GENERIC</span><br><span class=\"line\">config GENERIC</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../compile/GENERIC/</span><br><span class=\"line\">make cleandepend &amp;&amp; make depend</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"从低版本内核升级至高版本\"><a href=\"#从低版本内核升级至高版本\" class=\"headerlink\" title=\"从低版本内核升级至高版本\"></a>从低版本内核升级至高版本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenv UNAME_r <span class=\"string\">&quot;10.3-RELEASE&quot;</span></span><br><span class=\"line\">freebsd-update -r 11.0-RELEASE upgrade</span><br><span class=\"line\">freebsd-update insatll</span><br><span class=\"line\">reboot</span><br><span class=\"line\">freebsd-update insatll</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注册不能跨大版本。如：从10.1 -&gt; 11.0 中间要经过10.3。 10.1 -&gt; 10.3 -&gt; 11.0</li>\n<li>如果有定义自己内核，需先升级，再编译自己的配置。</li>\n</ul>\n<h1 id=\"给内核打补丁\"><a href=\"#给内核打补丁\" class=\"headerlink\" title=\"给内核打补丁\"></a>给内核打补丁</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">freebsd-update fetch</span><br><span class=\"line\">freebsd-update install</span><br></pre></td></tr></table></figure>"},{"title":"gin上同时实现websocket","date":"2019-07-30T08:32:46.000Z","_content":"\n# 一个在Gin框架上实现websocket的样例\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{\n\t\tReadBufferSize:   1024,\n\t\tWriteBufferSize:  1024,\n\t\tCheckOrigin:      func(r *http.Request) bool { return true },\n\t\tHandshakeTimeout: time.Duration(time.Second * 5),\n\t}\n)\n\nfunc handleWebsocket(c *gin.Context) {\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Println(\"cant upgrade connection:\", err)\n\t\treturn\n\t}\n\n\tfor {\n\t\tmsgType, msgData, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"cant read message:\", err)\n\n\t\t\tswitch err.(type) {\n\t\t\tcase *websocket.CloseError:\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// Skip binary messages\n\t\tif msgType != websocket.TextMessage {\n\t\t\tcontinue\n\t\t}\n\n\t\tlog.Printf(\"incoming message: %s\\n\", msgData)\n\t}\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/websocket\", handleWebsocket)\n\trouter.Run(\":5000\")\n}\n```\n\n\n备自：https://github.com/gin-gonic/gin/issues/1305","source":"_posts/gin-with-websocket.md","raw":"---\ntitle: gin上同时实现websocket\ndate: 2019-07-30 16:32:46\ntags: [golang, gin, websocket]\n---\n\n# 一个在Gin框架上实现websocket的样例\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{\n\t\tReadBufferSize:   1024,\n\t\tWriteBufferSize:  1024,\n\t\tCheckOrigin:      func(r *http.Request) bool { return true },\n\t\tHandshakeTimeout: time.Duration(time.Second * 5),\n\t}\n)\n\nfunc handleWebsocket(c *gin.Context) {\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Println(\"cant upgrade connection:\", err)\n\t\treturn\n\t}\n\n\tfor {\n\t\tmsgType, msgData, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"cant read message:\", err)\n\n\t\t\tswitch err.(type) {\n\t\t\tcase *websocket.CloseError:\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// Skip binary messages\n\t\tif msgType != websocket.TextMessage {\n\t\t\tcontinue\n\t\t}\n\n\t\tlog.Printf(\"incoming message: %s\\n\", msgData)\n\t}\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/websocket\", handleWebsocket)\n\trouter.Run(\":5000\")\n}\n```\n\n\n备自：https://github.com/gin-gonic/gin/issues/1305","slug":"gin-with-websocket","published":1,"updated":"2021-01-06T09:56:16.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rc000k2aah01cw8qv1","content":"<h1 id=\"一个在Gin框架上实现websocket的样例\"><a href=\"#一个在Gin框架上实现websocket的样例\" class=\"headerlink\" title=\"一个在Gin框架上实现websocket的样例\"></a>一个在Gin框架上实现websocket的样例</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tupgrader = websocket.Upgrader&#123;</span><br><span class=\"line\">\t\tReadBufferSize:   <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t\tWriteBufferSize:  <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t\tCheckOrigin:      <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r *http.Request)</span> <span class=\"title\">bool</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">\t\tHandshakeTimeout: time.Duration(time.Second * <span class=\"number\">5</span>),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleWebsocket</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tconn, err := upgrader.Upgrade(c.Writer, c.Request, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">&quot;cant upgrade connection:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsgType, msgData, err := conn.ReadMessage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Println(<span class=\"string\">&quot;cant read message:&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> err.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> *websocket.CloseError:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Skip binary messages</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> msgType != websocket.TextMessage &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;incoming message: %s\\n&quot;</span>, msgData)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\trouter.GET(<span class=\"string\">&quot;/websocket&quot;</span>, handleWebsocket)</span><br><span class=\"line\">\trouter.Run(<span class=\"string\">&quot;:5000&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>备自：<a class=\"link\"   href=\"https://github.com/gin-gonic/gin/issues/1305\" >https://github.com/gin-gonic/gin/issues/1305<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一个在Gin框架上实现websocket的样例\"><a href=\"#一个在Gin框架上实现websocket的样例\" class=\"headerlink\" title=\"一个在Gin框架上实现websocket的样例\"></a>一个在Gin框架上实现websocket的样例</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tupgrader = websocket.Upgrader&#123;</span><br><span class=\"line\">\t\tReadBufferSize:   <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t\tWriteBufferSize:  <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t\tCheckOrigin:      <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r *http.Request)</span> <span class=\"title\">bool</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">\t\tHandshakeTimeout: time.Duration(time.Second * <span class=\"number\">5</span>),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleWebsocket</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tconn, err := upgrader.Upgrade(c.Writer, c.Request, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">&quot;cant upgrade connection:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsgType, msgData, err := conn.ReadMessage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Println(<span class=\"string\">&quot;cant read message:&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> err.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> *websocket.CloseError:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Skip binary messages</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> msgType != websocket.TextMessage &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;incoming message: %s\\n&quot;</span>, msgData)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\trouter.GET(<span class=\"string\">&quot;/websocket&quot;</span>, handleWebsocket)</span><br><span class=\"line\">\trouter.Run(<span class=\"string\">&quot;:5000&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>备自：<a class=\"link\"   href=\"https://github.com/gin-gonic/gin/issues/1305\" >https://github.com/gin-gonic/gin/issues/1305<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"golang udp 服务的坑","date":"2020-06-29T06:11:38.000Z","_content":"\ngolang udp 服务端演示级的写法一般是：\n```golang\n    conn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n\tfor {\n\t\tdata := make([]byte, 1024*4)\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n\t\t\t// ... 做点什么\n            conn.WriteToUDP(data[:n], remoteAddr)\n\t\t}\n\t}\n```\n\n这段代码作为教学或演示是没有问题的。但应用于生产时，处在在一个频繁收发报文的中心服务器上，这里就有两个问题了：\n- 在`for`循环中不断申请变量`data`并`make`。会产生大量内存消耗。引起频繁GC。\n- 收到数据后处理不应该在`for`循环内部。因为如果数据处理时间过长，就会拥塞。拥塞期间若底层缓冲区满了，说不定会丢包。\n\n那么V2版写法来了：\n```golang\n    conn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n    data := make([]byte, 1024*4)\n\tfor {\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n            go func (){\n                // ... 拿 data[:n]做点什么\n                conn.WriteToUDP(data[:n], remoteAddr)\n            }()\n\t\t}\n\t}\n```\n\nV2版看上去完美！其实运行结果会完全出人意料！\n\n因为每次`for`循环没有将`data`置0，当传输的是二进制时，会导致上次Read的结果干扰下次Read的结果。导致对数据 `Unmarshal`时随机出错！如果不借助`tcpdump`抓包做位级比对！这会变成一个玄学问题！\n\nok！再来V3！\n```golang\n    conn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n    var data []byte\n\tfor {\n        data = make([]byte, 1024*4)\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n            go func (){\n                // ... 拿 data[:n]做点什么\n                conn.WriteToUDP(data[:n], remoteAddr)\n            }()\n\t\t}\n\t}\n```\n\nV3版成功解决了干扰！\n\n但又来了新问题。就是：在协程中处理数据`data[:n]`时总是所有位是`0`的`n`位长的数组。辣么，数据呢？\n\n当然是协程内引用`data`导致的。因为在协程创建完成，开始执行前，`for`已经进入下一个循环并在`Read`处等待了。此时的`data`经过`make`已经重置数据了。\n\n> 这里要介绍一个`golang`的基础功能`copy`\n>> `golang` 为了避免每一层的处理数据都要在内存里建立相同数据的副本。采用了引用的方式传递。也就是`slice`的存在的意义！它大量节约了内存！天才般的设计！<br>\n>> 这里`conn.ReadFromUDP(data)`后`data`里放的其实是底层缓冲区内的数据引用。操作`data`实际上是在操作底层缓冲区。<br>\n>> 所以我们在操作`data`前一定要先将`data`里的数据读入新的变量里，实现`私有化`，再交给协程处理。否则在协程未启动完成前，`data`里的数据可能因为进入新的循环，而被刷新！<br>\n>> 不幸的是，简单的`=`是不能将`data` `私有化`的。只能`make`一个空白的`slice`，再将`data`逐个复制进来。这个操作`golang`已为我们封装好了一个函数，它就是：`copy`\n\nok！再来V4！\n```golang\n\tconn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n\tvar data = make([]byte, 1024*4)\n\tvar raw []byte\n\tfor {\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n\t\t\traw = make([]byte,n)\n\t\t\tcopy(raw,data[:n])\n\t\t\tgo func (){\n\t\t\t\t// ... 拿 raw 做点什么\n\t\t\t\tconn.WriteToUDP(raw, remoteAddr)\n\t\t\t}()\n\t\t}\n\t}\n```\n\nok! 运行起来几乎没啥问题。","source":"_posts/golang-udp-server.md","raw":"---\ntitle: golang udp 服务的坑\ndate: 2020-06-29 14:11:38\ntags: [golang, udp]\n---\n\ngolang udp 服务端演示级的写法一般是：\n```golang\n    conn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n\tfor {\n\t\tdata := make([]byte, 1024*4)\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n\t\t\t// ... 做点什么\n            conn.WriteToUDP(data[:n], remoteAddr)\n\t\t}\n\t}\n```\n\n这段代码作为教学或演示是没有问题的。但应用于生产时，处在在一个频繁收发报文的中心服务器上，这里就有两个问题了：\n- 在`for`循环中不断申请变量`data`并`make`。会产生大量内存消耗。引起频繁GC。\n- 收到数据后处理不应该在`for`循环内部。因为如果数据处理时间过长，就会拥塞。拥塞期间若底层缓冲区满了，说不定会丢包。\n\n那么V2版写法来了：\n```golang\n    conn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n    data := make([]byte, 1024*4)\n\tfor {\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n            go func (){\n                // ... 拿 data[:n]做点什么\n                conn.WriteToUDP(data[:n], remoteAddr)\n            }()\n\t\t}\n\t}\n```\n\nV2版看上去完美！其实运行结果会完全出人意料！\n\n因为每次`for`循环没有将`data`置0，当传输的是二进制时，会导致上次Read的结果干扰下次Read的结果。导致对数据 `Unmarshal`时随机出错！如果不借助`tcpdump`抓包做位级比对！这会变成一个玄学问题！\n\nok！再来V3！\n```golang\n    conn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n    var data []byte\n\tfor {\n        data = make([]byte, 1024*4)\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n            go func (){\n                // ... 拿 data[:n]做点什么\n                conn.WriteToUDP(data[:n], remoteAddr)\n            }()\n\t\t}\n\t}\n```\n\nV3版成功解决了干扰！\n\n但又来了新问题。就是：在协程中处理数据`data[:n]`时总是所有位是`0`的`n`位长的数组。辣么，数据呢？\n\n当然是协程内引用`data`导致的。因为在协程创建完成，开始执行前，`for`已经进入下一个循环并在`Read`处等待了。此时的`data`经过`make`已经重置数据了。\n\n> 这里要介绍一个`golang`的基础功能`copy`\n>> `golang` 为了避免每一层的处理数据都要在内存里建立相同数据的副本。采用了引用的方式传递。也就是`slice`的存在的意义！它大量节约了内存！天才般的设计！<br>\n>> 这里`conn.ReadFromUDP(data)`后`data`里放的其实是底层缓冲区内的数据引用。操作`data`实际上是在操作底层缓冲区。<br>\n>> 所以我们在操作`data`前一定要先将`data`里的数据读入新的变量里，实现`私有化`，再交给协程处理。否则在协程未启动完成前，`data`里的数据可能因为进入新的循环，而被刷新！<br>\n>> 不幸的是，简单的`=`是不能将`data` `私有化`的。只能`make`一个空白的`slice`，再将`data`逐个复制进来。这个操作`golang`已为我们封装好了一个函数，它就是：`copy`\n\nok！再来V4！\n```golang\n\tconn, err := net.ListenUDP(\"udp\", &net.UDPAddr{Port: 8866})\n\tif err != nil {\n\t\tlog.Fatalf(\"Udp Service listen report udp fail:%v\", err)\n\t}\n\tdefer conn.Close()\n\tvar data = make([]byte, 1024*4)\n\tvar raw []byte\n\tfor {\n\t\tn, remoteAddr, err := conn.ReadFromUDP(data)\n\t\tif err == nil {\n\t\t\traw = make([]byte,n)\n\t\t\tcopy(raw,data[:n])\n\t\t\tgo func (){\n\t\t\t\t// ... 拿 raw 做点什么\n\t\t\t\tconn.WriteToUDP(raw, remoteAddr)\n\t\t\t}()\n\t\t}\n\t}\n```\n\nok! 运行起来几乎没啥问题。","slug":"golang-udp-server","published":1,"updated":"2021-01-06T09:56:16.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rd000l2aahce1iar3p","content":"<p>golang udp 服务端演示级的写法一般是：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tdata := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ... 做点什么</span></span><br><span class=\"line\">           conn.WriteToUDP(data[:n], remoteAddr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码作为教学或演示是没有问题的。但应用于生产时，处在在一个频繁收发报文的中心服务器上，这里就有两个问题了：</p>\n<ul>\n<li>在<code>for</code>循环中不断申请变量<code>data</code>并<code>make</code>。会产生大量内存消耗。引起频繁GC。</li>\n<li>收到数据后处理不应该在<code>for</code>循环内部。因为如果数据处理时间过长，就会拥塞。拥塞期间若底层缓冲区满了，说不定会丢包。</li>\n</ul>\n<p>那么V2版写法来了：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">   data := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">// ... 拿 data[:n]做点什么</span></span><br><span class=\"line\">               conn.WriteToUDP(data[:n], remoteAddr)</span><br><span class=\"line\">           &#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>V2版看上去完美！其实运行结果会完全出人意料！</p>\n<p>因为每次<code>for</code>循环没有将<code>data</code>置0，当传输的是二进制时，会导致上次Read的结果干扰下次Read的结果。导致对数据 <code>Unmarshal</code>时随机出错！如果不借助<code>tcpdump</code>抓包做位级比对！这会变成一个玄学问题！</p>\n<p>ok！再来V3！</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">   <span class=\"keyword\">var</span> data []<span class=\"keyword\">byte</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">       data = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">// ... 拿 data[:n]做点什么</span></span><br><span class=\"line\">               conn.WriteToUDP(data[:n], remoteAddr)</span><br><span class=\"line\">           &#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>V3版成功解决了干扰！</p>\n<p>但又来了新问题。就是：在协程中处理数据<code>data[:n]</code>时总是所有位是<code>0</code>的<code>n</code>位长的数组。辣么，数据呢？</p>\n<p>当然是协程内引用<code>data</code>导致的。因为在协程创建完成，开始执行前，<code>for</code>已经进入下一个循环并在<code>Read</code>处等待了。此时的<code>data</code>经过<code>make</code>已经重置数据了。</p>\n<blockquote>\n<p>这里要介绍一个<code>golang</code>的基础功能<code>copy</code></p>\n<blockquote>\n<p><code>golang</code> 为了避免每一层的处理数据都要在内存里建立相同数据的副本。采用了引用的方式传递。也就是<code>slice</code>的存在的意义！它大量节约了内存！天才般的设计！<br><br>这里<code>conn.ReadFromUDP(data)</code>后<code>data</code>里放的其实是底层缓冲区内的数据引用。操作<code>data</code>实际上是在操作底层缓冲区。<br><br>所以我们在操作<code>data</code>前一定要先将<code>data</code>里的数据读入新的变量里，实现<code>私有化</code>，再交给协程处理。否则在协程未启动完成前，<code>data</code>里的数据可能因为进入新的循环，而被刷新！<br><br>不幸的是，简单的<code>=</code>是不能将<code>data</code> <code>私有化</code>的。只能<code>make</code>一个空白的<code>slice</code>，再将<code>data</code>逐个复制进来。这个操作<code>golang</code>已为我们封装好了一个函数，它就是：<code>copy</code></p>\n</blockquote>\n</blockquote>\n<p>ok！再来V4！</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> raw []<span class=\"keyword\">byte</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\traw = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>,n)</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(raw,data[:n])</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ... 拿 raw 做点什么</span></span><br><span class=\"line\">\t\t\tconn.WriteToUDP(raw, remoteAddr)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! 运行起来几乎没啥问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>golang udp 服务端演示级的写法一般是：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tdata := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ... 做点什么</span></span><br><span class=\"line\">           conn.WriteToUDP(data[:n], remoteAddr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码作为教学或演示是没有问题的。但应用于生产时，处在在一个频繁收发报文的中心服务器上，这里就有两个问题了：</p>\n<ul>\n<li>在<code>for</code>循环中不断申请变量<code>data</code>并<code>make</code>。会产生大量内存消耗。引起频繁GC。</li>\n<li>收到数据后处理不应该在<code>for</code>循环内部。因为如果数据处理时间过长，就会拥塞。拥塞期间若底层缓冲区满了，说不定会丢包。</li>\n</ul>\n<p>那么V2版写法来了：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">   data := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">// ... 拿 data[:n]做点什么</span></span><br><span class=\"line\">               conn.WriteToUDP(data[:n], remoteAddr)</span><br><span class=\"line\">           &#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>V2版看上去完美！其实运行结果会完全出人意料！</p>\n<p>因为每次<code>for</code>循环没有将<code>data</code>置0，当传输的是二进制时，会导致上次Read的结果干扰下次Read的结果。导致对数据 <code>Unmarshal</code>时随机出错！如果不借助<code>tcpdump</code>抓包做位级比对！这会变成一个玄学问题！</p>\n<p>ok！再来V3！</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">   <span class=\"keyword\">var</span> data []<span class=\"keyword\">byte</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">       data = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">// ... 拿 data[:n]做点什么</span></span><br><span class=\"line\">               conn.WriteToUDP(data[:n], remoteAddr)</span><br><span class=\"line\">           &#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>V3版成功解决了干扰！</p>\n<p>但又来了新问题。就是：在协程中处理数据<code>data[:n]</code>时总是所有位是<code>0</code>的<code>n</code>位长的数组。辣么，数据呢？</p>\n<p>当然是协程内引用<code>data</code>导致的。因为在协程创建完成，开始执行前，<code>for</code>已经进入下一个循环并在<code>Read</code>处等待了。此时的<code>data</code>经过<code>make</code>已经重置数据了。</p>\n<blockquote>\n<p>这里要介绍一个<code>golang</code>的基础功能<code>copy</code></p>\n<blockquote>\n<p><code>golang</code> 为了避免每一层的处理数据都要在内存里建立相同数据的副本。采用了引用的方式传递。也就是<code>slice</code>的存在的意义！它大量节约了内存！天才般的设计！<br><br>这里<code>conn.ReadFromUDP(data)</code>后<code>data</code>里放的其实是底层缓冲区内的数据引用。操作<code>data</code>实际上是在操作底层缓冲区。<br><br>所以我们在操作<code>data</code>前一定要先将<code>data</code>里的数据读入新的变量里，实现<code>私有化</code>，再交给协程处理。否则在协程未启动完成前，<code>data</code>里的数据可能因为进入新的循环，而被刷新！<br><br>不幸的是，简单的<code>=</code>是不能将<code>data</code> <code>私有化</code>的。只能<code>make</code>一个空白的<code>slice</code>，再将<code>data</code>逐个复制进来。这个操作<code>golang</code>已为我们封装好了一个函数，它就是：<code>copy</code></p>\n</blockquote>\n</blockquote>\n<p>ok！再来V4！</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class=\"number\">8866</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">&quot;Udp Service listen report udp fail:%v&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> raw []<span class=\"keyword\">byte</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tn, remoteAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\traw = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>,n)</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(raw,data[:n])</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ... 拿 raw 做点什么</span></span><br><span class=\"line\">\t\t\tconn.WriteToUDP(raw, remoteAddr)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! 运行起来几乎没啥问题。</p>\n"},{"title":"iptables详细教程：基础、架构、清空规则、追加规则、应用实例","date":"2019-12-14T08:32:22.000Z","_content":"iptables防火墙可以用于创建过滤(filter)与NAT规则。所有Linux发行版都能使用iptables，因此理解如何配置iptables将会帮助你更有效地管理Linux防火墙。如果你是第一次接触iptables，你会觉得它很复杂，但是一旦你理解iptables的工作原理，你会发现其实它很简单。\n\n首先介绍iptables的结构：iptables -> Tables -> Chains -> Rules. 简单地讲，tables由chains组成，而chains又由rules组成。如下图所示。\n\n![image](https://user-images.githubusercontent.com/1764005/70845966-94926480-1e8f-11ea-8c62-38010afa3146.png)\n图: IPTables Table, Chain, and Rule Structure\n\n# iptables的表与链\n\niptables具有Filter, NAT, Mangle, Raw四种内建表：\n\n## Filter表\nFilter表示iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：\n- **INPUT链** – 处理来自外部的数据。\n- **OUTPUT链** – 处理向外发送的数据。\n- **FORWARD链** – 将数据转发到本机的其他网卡设备上。\n\n## NAT表\nNAT表有三种内建链：\n- **PREROUTING链** – 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。\n- **POSTROUTING链** – 处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）。\n- **OUTPUT链** – 处理本机产生的数据包。\n\n## Mangle表\nMangle表用于指定如何处理数据包。它能改变TCP头中的QoS位。Mangle表具有5个内建链：\n\n- PREROUTING\n- OUTPUT\n- FORWARD\n- INPUT\n- POSTROUTING\n\n## Raw表\nRaw表用于处理异常，它具有2个内建链：\n\nPREROUTING chain\nOUTPUT chain\n\n## 小结\n\n下图展示了iptables的三个内建表：\n\n![图: IPTables 内建表](https://user-images.githubusercontent.com/1764005/70846052-68c3ae80-1e90-11ea-83db-51e4b4e01987.png)\n图: IPTables 内建表\n\n# IPTABLES 规则(Rules)\n牢记以下三点式理解iptables规则的关键：\n\n- Rules包括一个条件和一个目标(target)\n- 如果满足条件，就执行目标(target)中的规则或者特定值。\n- 如果不满足条件，就判断下一条Rules。\n\n## 目标值（Target Values）\n下面是你可以在target里指定的特殊值：\n\n- ACCEPT – 允许防火墙接收数据包\n- DROP – 防火墙丢弃包\n- QUEUE – 防火墙将数据包移交到用户空间\n- RETURN – 防火墙停止执行当前链中的后续Rules，并返回到调用链(the calling chain)中。\n如果你执行`iptables --list`你将看到防火墙上的可用规则。下例说明当前系统没有定义防火墙，你可以看到，它显示了默认的filter表，以及表内默认的input链, forward链, output链。\n```bash\n# iptables -t filter --list\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\n```\n\n查看mangle表：\n```bash\n# iptables -t mangle --list\n\n```\n查看NAT表：\n```bash\n# iptables -t nat --list\n\n```\n查看RAW表：\n```bash\n# iptables -t raw --list\n\n```\n注意：如果不指定`-t`选项，就只会显示默认的`filter`表。因此，以下两种命令形式是一个意思：\n```bash\n# iptables -t filter --list\n(or)\n# iptables --list\n\n```\n\n以下例子表明在filter表的input链, forward链, output链中存在规则：\n```bash\n# iptables --list\nChain INPUT (policy ACCEPT)\nnum  target     prot opt source               destination\n1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0\n\nChain FORWARD (policy ACCEPT)\nnum  target     prot opt source               destination\n1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0\n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination\n\nChain RH-Firewall-1-INPUT (2 references)\nnum  target     prot opt source               destination\n1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0\n2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           icmp type 255\n3    ACCEPT     esp  --  0.0.0.0/0            0.0.0.0/0\n4    ACCEPT     ah   --  0.0.0.0/0            0.0.0.0/0\n5    ACCEPT     udp  --  0.0.0.0/0            224.0.0.251         udp dpt:5353\n6    ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           udp dpt:631\n7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:631\n8    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED\n9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22\n10   REJECT     all  --  \n\n```\n以上输出包含下列字段：\n\n**num** – 指定链中的规则编号\n**target** – 前面提到的target的特殊值\n**prot** – 协议：tcp, udp, icmp等\n**source** – 数据包的源IP地址\n**destination** – 数据包的目标IP地址\n\n# 清空所有iptables规则\n在配置`iptables`之前，你通常需要用`iptables --list`命令或者`iptables-save`命令查看有无现存规则，因为有时需要删除现有的`iptables`规则：\n```bash\niptables --flush\n或者\niptables -F\n\n```\n这两条命令是等效的。但是并非执行后就万事大吉了。你仍然需要检查规则是不是真的清空了，因为有的linux发行版上这个命令不会清除NAT表中的规则，此时只能手动清除：\n```bash\niptables -t NAT -F\n\n```\n\n# 永久生效\n当你删除、添加规则后，这些更改并不能永久生效，这些规则很有可能在系统重启后恢复原样。为了让配置永久生效，根据平台的不同，具体操作也不同。下面进行简单介绍：\n\n## Ubuntu\n首先，保存现有的规则：\n```bash\niptables-save > /etc/iptables.rules\n```\n\n然后新建一个bash脚本，并保存到`/etc/network/if-pre-up.d/`目录下：\n```bash\n#!/bin/bash\niptables-restore < /etc/iptables.rules\n\n```\n这样，每次系统重启后iptables规则都会被自动加载。\n注意：不要尝试在`.bashrc`或者`.profile`中执行以上命令，因为用户通常不是root，而且这只能在登录时加载iptables规则。\n\n# 追加`iptables`规则\n可以使用`iptables -A`命令追加新规则，其中`-A`表示`Append`。因此，新的规则将追加到链尾。\n一般而言，最后一条规则用于丢弃(DROP)所有数据包。如果你已经有这样的规则了，并且使用`-A`参数添加新规则，那么就是无用功。\n\n## 语法\n```bash\niptables -A chain firewall-rule\n\n```\n- `-A chain` – 指定要追加规则的链\n- `firewall-rule` – 具体的规则参数\n\n## 描述规则的基本参数\n以下这些规则参数用于描述数据包的协议、源地址、目的地址、允许经过的网络接口，以及如何处理这些数据包。这些描述是对规则的基本描述。\n\n### -p 协议（protocol）\n- 指定规则的协议，如`tcp`, `udp`, `icmp`等，可以使用`all`来指定所有协议。\n- 如果不指定`-p`参数，则默认是`all`值。这并不明智，请总是明确指定协议名称。\n- 可以使用协议名(如tcp)，或者是协议值（比如6代表tcp）来指定协议。映射关系请查看`/etc/protocols`\n- 还可以使用`–protocol`参数代替`-p`参数\n\n### -s 源地址（source）\n- 指定数据包的源地址\n- 参数可以使IP地址、网络地址、主机名\n- 例如：-s 192.168.1.101指定IP地址\n- 例如：-s 192.168.1.10/24指定网络地址\n- 如果不指定-s参数，就代表所有地址\n- 还可以使用`–src`或者`–source`\n\n### -d 目的地址（destination）\n- 指定目的地址\n- 参数和`-s`相同\n- 还可以使用`–dst`或者`–destination`\n\n### -j 执行目标（jump to target）\n\n- `-j`代表”jump to target”\n- `-j`指定了当与规则(Rule)匹配时如何处理数据包\n- 可能的值是`ACCEPT`, `DROP`, `QUEUE`, `RETURN`\n- 还可以指定其他链（Chain）作为目标\n\n### -i 输入接口（input interface）\n- `-i`代表输入接口(input interface)\n- `-i`指定了要处理来自哪个接口的数据包\n- 这些数据包即将进入`INPUT`, `FORWARD`, `PREROUTE链`\n- 例如：`-i eth0`指定了要处理经由eth0进入的数据包\n- 如果不指定`-i`参数，那么将处理进入所有接口的数据包\n- 如果出现! `-i eth0`，那么将处理所有经由eth0以外的接口进入的数据包\n- 如果出现`-i eth+`，那么将处理所有经由eth开头的接口进入的数据包\n- 还可以使用`–in-interface`参数\n\n### -o 输出（out interface）\n-o代表”output interface”\n-o指定了数据包由哪个接口输出\n这些数据包即将进入`FORWARD`, `OUTPUT`, `POSTROUTING链`\n如果不指定`-o`选项，那么系统上的所有接口都可以作为输出接口\n如果出现! `-o eth0`，那么将从eth0以外的接口输出\n如果出现`-i eth+`，那么将仅从eth开头的接口输出\n还可以使用`–out-interface`参数\n\n## 描述规则的扩展参数\n对规则有了一个基本描述之后，有时候我们还希望指定端口、`TCP`标志、`ICMP`类型等内容。\n\n### –sport 源端口（source port）针对 -p tcp 或者 -p udp\n- 缺省情况下，将匹配所有端口\n- 可以指定端口号或者端口名称，例如`–sport 22`与`–sport ssh`。\n- `/etc/services`文件描述了上述映射关系。\n- 从性能上讲，使用端口号更好\n- 使用冒号可以匹配端口范围，如`–sport 22:100`\n- 还可以使用`–source-port`\n\n### –-dport 目的端口（destination port）针对-p tcp 或者 -p udp\n- 参数和`–sport`类似\n- 还可以使用`–destination-port`\n\n### -–tcp-flags TCP标志 针对-p tcp\n- 可以指定由逗号分隔的多个参数\n- 有效值可以是：`SYN`, `ACK`, `FIN`, `RST`, `URG`, `PSH`\n- 可以使用`ALL`或者`NONE`\n\n### -–icmp-type ICMP类型 针对-p icmp\n- `–icmp-type 0` 表示Echo Reply\n- `–icmp-type 8` 表示Echo\n\n## 追加规则的完整实例：仅允许SSH服务\n本例实现的规则将仅允许SSH数据包通过本地计算机，其他一切连接（包括ping）都将被拒绝。\n\n```bash\n# 1.清空所有iptables规则\niptables -F\n\n# 2.接收目标端口为22的数据包\niptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT\n\n# 3.拒绝所有其他数据包\niptables -A INPUT -j DROP\n\n```\n\n# 更改默认策略\n上例的例子仅对接收的数据包过滤，而对于要发送出去的数据包却没有任何限制。本节主要介绍如何更改链策略，以改变链的行为。\n\n## 默认链策略\n警告：请勿在远程连接的服务器、虚拟机上测试！\n当我们使用-L选项验证当前规则是发现，所有的链旁边都有`policy ACCEPT`标注，这表明当前链的默认策略为`ACCEPT`：\n```bash\n# iptables -L\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\nACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh\nDROP       all  --  anywhere             anywhere            \n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\n```\n这种情况下，如果没有明确添加DROP规则，那么默认情况下将采用ACCEPT策略进行过滤。除非：\n### 为以上三个链单独添加DROP规则：\n```bash\niptables -A INPUT -j DROP\niptables -A OUTPUT -j DROP\niptables -A FORWARD -j DROP\n```\n### 更改默认策略：\n```bash\niptables -P INPUT DROP\niptables -P OUTPUT DROP\niptables -P FORWARD DROP\n```\n如果你严格按照上一节的例子配置了iptables，并且现在使用的是SSH进行连接的，那么会话恐怕已经被迫终止了！\n为什么呢？因为我们已经把OUTPUT链策略更改为DROP了。此时虽然服务器能接收数据，但是无法发送数据：\n```bash\n# iptables -L\nChain INPUT (policy DROP)\ntarget     prot opt source               destination\nACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh\nDROP       all  --  anywhere             anywhere            \n\nChain FORWARD (policy DROP)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy DROP)\ntarget     prot opt source               destination\n```\n\n# 配置应用程序规则\n尽管5.4节已经介绍了如何初步限制除SSH以外的其他连接，但是那是在链默认策略为ACCEPT的情况下实现的，并且没有对输出数据包进行限制。本节在上一节基础上，以SSH和HTTP所使用的端口为例，教大家如何在默认链策略为DROP的情况下，进行防火墙设置。在这里，我们将引进一种新的参数-m state，并检查数据包的状态字段。\n\n## SSH\n```bash\n# 1.允许接收远程主机的SSH请求\niptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# 2.允许发送本地主机的SSH响应\niptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n```\n- `-m state`: 启用状态匹配模块（state matching module）\n- `–-state`: 状态匹配模块的参数。当SSH客户端第一个数据包到达服务器时，状态字段为NEW；建立连接后数据包的状态字段都是ESTABLISHED\n- `–sport 22`: sshd监听22端口，同时也通过该端口和客户端建立连接、传送数据。因此对于SSH服务器而言，源端口就是22\n- `–dport 22`: ssh客户端程序可以从本机的随机端口与SSH服务器的22端口建立连接。因此对于SSH客户端而言，目的端口就是22\n\n如果服务器也需要使用SSH连接其他远程主机，则还需要增加以下配置：\n```bash\n# 1.送出的数据包目的端口为22\niptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# 2.接收的数据包源端口为22\niptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n```\n\n## HTTP\nHTTP的配置与SSH类似：\n```bash\n# 1.允许接收远程主机的HTTP请求\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# 1.允许发送本地主机的HTTP响应\niptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT\n```\n\n## 完整的配置\n```bash\n# 1.删除现有规则\niptables -F\n\n# 2.配置默认链策略\niptables -P INPUT DROP\niptables -P FORWARD DROP\niptables -P OUTPUT DROP\n\n# 3.允许远程主机进行SSH连接\niptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n\n# 4.允许本地主机进行SSH连接\niptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n\n# 5.允许HTTP请求\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT\n```\n","source":"_posts/iptables.md","raw":"---\ntitle: iptables详细教程：基础、架构、清空规则、追加规则、应用实例\ndate: 2019-12-14 16:32:22\ntags: [iptables]\n---\niptables防火墙可以用于创建过滤(filter)与NAT规则。所有Linux发行版都能使用iptables，因此理解如何配置iptables将会帮助你更有效地管理Linux防火墙。如果你是第一次接触iptables，你会觉得它很复杂，但是一旦你理解iptables的工作原理，你会发现其实它很简单。\n\n首先介绍iptables的结构：iptables -> Tables -> Chains -> Rules. 简单地讲，tables由chains组成，而chains又由rules组成。如下图所示。\n\n![image](https://user-images.githubusercontent.com/1764005/70845966-94926480-1e8f-11ea-8c62-38010afa3146.png)\n图: IPTables Table, Chain, and Rule Structure\n\n# iptables的表与链\n\niptables具有Filter, NAT, Mangle, Raw四种内建表：\n\n## Filter表\nFilter表示iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：\n- **INPUT链** – 处理来自外部的数据。\n- **OUTPUT链** – 处理向外发送的数据。\n- **FORWARD链** – 将数据转发到本机的其他网卡设备上。\n\n## NAT表\nNAT表有三种内建链：\n- **PREROUTING链** – 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。\n- **POSTROUTING链** – 处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）。\n- **OUTPUT链** – 处理本机产生的数据包。\n\n## Mangle表\nMangle表用于指定如何处理数据包。它能改变TCP头中的QoS位。Mangle表具有5个内建链：\n\n- PREROUTING\n- OUTPUT\n- FORWARD\n- INPUT\n- POSTROUTING\n\n## Raw表\nRaw表用于处理异常，它具有2个内建链：\n\nPREROUTING chain\nOUTPUT chain\n\n## 小结\n\n下图展示了iptables的三个内建表：\n\n![图: IPTables 内建表](https://user-images.githubusercontent.com/1764005/70846052-68c3ae80-1e90-11ea-83db-51e4b4e01987.png)\n图: IPTables 内建表\n\n# IPTABLES 规则(Rules)\n牢记以下三点式理解iptables规则的关键：\n\n- Rules包括一个条件和一个目标(target)\n- 如果满足条件，就执行目标(target)中的规则或者特定值。\n- 如果不满足条件，就判断下一条Rules。\n\n## 目标值（Target Values）\n下面是你可以在target里指定的特殊值：\n\n- ACCEPT – 允许防火墙接收数据包\n- DROP – 防火墙丢弃包\n- QUEUE – 防火墙将数据包移交到用户空间\n- RETURN – 防火墙停止执行当前链中的后续Rules，并返回到调用链(the calling chain)中。\n如果你执行`iptables --list`你将看到防火墙上的可用规则。下例说明当前系统没有定义防火墙，你可以看到，它显示了默认的filter表，以及表内默认的input链, forward链, output链。\n```bash\n# iptables -t filter --list\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\n```\n\n查看mangle表：\n```bash\n# iptables -t mangle --list\n\n```\n查看NAT表：\n```bash\n# iptables -t nat --list\n\n```\n查看RAW表：\n```bash\n# iptables -t raw --list\n\n```\n注意：如果不指定`-t`选项，就只会显示默认的`filter`表。因此，以下两种命令形式是一个意思：\n```bash\n# iptables -t filter --list\n(or)\n# iptables --list\n\n```\n\n以下例子表明在filter表的input链, forward链, output链中存在规则：\n```bash\n# iptables --list\nChain INPUT (policy ACCEPT)\nnum  target     prot opt source               destination\n1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0\n\nChain FORWARD (policy ACCEPT)\nnum  target     prot opt source               destination\n1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0\n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination\n\nChain RH-Firewall-1-INPUT (2 references)\nnum  target     prot opt source               destination\n1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0\n2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           icmp type 255\n3    ACCEPT     esp  --  0.0.0.0/0            0.0.0.0/0\n4    ACCEPT     ah   --  0.0.0.0/0            0.0.0.0/0\n5    ACCEPT     udp  --  0.0.0.0/0            224.0.0.251         udp dpt:5353\n6    ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           udp dpt:631\n7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:631\n8    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED\n9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22\n10   REJECT     all  --  \n\n```\n以上输出包含下列字段：\n\n**num** – 指定链中的规则编号\n**target** – 前面提到的target的特殊值\n**prot** – 协议：tcp, udp, icmp等\n**source** – 数据包的源IP地址\n**destination** – 数据包的目标IP地址\n\n# 清空所有iptables规则\n在配置`iptables`之前，你通常需要用`iptables --list`命令或者`iptables-save`命令查看有无现存规则，因为有时需要删除现有的`iptables`规则：\n```bash\niptables --flush\n或者\niptables -F\n\n```\n这两条命令是等效的。但是并非执行后就万事大吉了。你仍然需要检查规则是不是真的清空了，因为有的linux发行版上这个命令不会清除NAT表中的规则，此时只能手动清除：\n```bash\niptables -t NAT -F\n\n```\n\n# 永久生效\n当你删除、添加规则后，这些更改并不能永久生效，这些规则很有可能在系统重启后恢复原样。为了让配置永久生效，根据平台的不同，具体操作也不同。下面进行简单介绍：\n\n## Ubuntu\n首先，保存现有的规则：\n```bash\niptables-save > /etc/iptables.rules\n```\n\n然后新建一个bash脚本，并保存到`/etc/network/if-pre-up.d/`目录下：\n```bash\n#!/bin/bash\niptables-restore < /etc/iptables.rules\n\n```\n这样，每次系统重启后iptables规则都会被自动加载。\n注意：不要尝试在`.bashrc`或者`.profile`中执行以上命令，因为用户通常不是root，而且这只能在登录时加载iptables规则。\n\n# 追加`iptables`规则\n可以使用`iptables -A`命令追加新规则，其中`-A`表示`Append`。因此，新的规则将追加到链尾。\n一般而言，最后一条规则用于丢弃(DROP)所有数据包。如果你已经有这样的规则了，并且使用`-A`参数添加新规则，那么就是无用功。\n\n## 语法\n```bash\niptables -A chain firewall-rule\n\n```\n- `-A chain` – 指定要追加规则的链\n- `firewall-rule` – 具体的规则参数\n\n## 描述规则的基本参数\n以下这些规则参数用于描述数据包的协议、源地址、目的地址、允许经过的网络接口，以及如何处理这些数据包。这些描述是对规则的基本描述。\n\n### -p 协议（protocol）\n- 指定规则的协议，如`tcp`, `udp`, `icmp`等，可以使用`all`来指定所有协议。\n- 如果不指定`-p`参数，则默认是`all`值。这并不明智，请总是明确指定协议名称。\n- 可以使用协议名(如tcp)，或者是协议值（比如6代表tcp）来指定协议。映射关系请查看`/etc/protocols`\n- 还可以使用`–protocol`参数代替`-p`参数\n\n### -s 源地址（source）\n- 指定数据包的源地址\n- 参数可以使IP地址、网络地址、主机名\n- 例如：-s 192.168.1.101指定IP地址\n- 例如：-s 192.168.1.10/24指定网络地址\n- 如果不指定-s参数，就代表所有地址\n- 还可以使用`–src`或者`–source`\n\n### -d 目的地址（destination）\n- 指定目的地址\n- 参数和`-s`相同\n- 还可以使用`–dst`或者`–destination`\n\n### -j 执行目标（jump to target）\n\n- `-j`代表”jump to target”\n- `-j`指定了当与规则(Rule)匹配时如何处理数据包\n- 可能的值是`ACCEPT`, `DROP`, `QUEUE`, `RETURN`\n- 还可以指定其他链（Chain）作为目标\n\n### -i 输入接口（input interface）\n- `-i`代表输入接口(input interface)\n- `-i`指定了要处理来自哪个接口的数据包\n- 这些数据包即将进入`INPUT`, `FORWARD`, `PREROUTE链`\n- 例如：`-i eth0`指定了要处理经由eth0进入的数据包\n- 如果不指定`-i`参数，那么将处理进入所有接口的数据包\n- 如果出现! `-i eth0`，那么将处理所有经由eth0以外的接口进入的数据包\n- 如果出现`-i eth+`，那么将处理所有经由eth开头的接口进入的数据包\n- 还可以使用`–in-interface`参数\n\n### -o 输出（out interface）\n-o代表”output interface”\n-o指定了数据包由哪个接口输出\n这些数据包即将进入`FORWARD`, `OUTPUT`, `POSTROUTING链`\n如果不指定`-o`选项，那么系统上的所有接口都可以作为输出接口\n如果出现! `-o eth0`，那么将从eth0以外的接口输出\n如果出现`-i eth+`，那么将仅从eth开头的接口输出\n还可以使用`–out-interface`参数\n\n## 描述规则的扩展参数\n对规则有了一个基本描述之后，有时候我们还希望指定端口、`TCP`标志、`ICMP`类型等内容。\n\n### –sport 源端口（source port）针对 -p tcp 或者 -p udp\n- 缺省情况下，将匹配所有端口\n- 可以指定端口号或者端口名称，例如`–sport 22`与`–sport ssh`。\n- `/etc/services`文件描述了上述映射关系。\n- 从性能上讲，使用端口号更好\n- 使用冒号可以匹配端口范围，如`–sport 22:100`\n- 还可以使用`–source-port`\n\n### –-dport 目的端口（destination port）针对-p tcp 或者 -p udp\n- 参数和`–sport`类似\n- 还可以使用`–destination-port`\n\n### -–tcp-flags TCP标志 针对-p tcp\n- 可以指定由逗号分隔的多个参数\n- 有效值可以是：`SYN`, `ACK`, `FIN`, `RST`, `URG`, `PSH`\n- 可以使用`ALL`或者`NONE`\n\n### -–icmp-type ICMP类型 针对-p icmp\n- `–icmp-type 0` 表示Echo Reply\n- `–icmp-type 8` 表示Echo\n\n## 追加规则的完整实例：仅允许SSH服务\n本例实现的规则将仅允许SSH数据包通过本地计算机，其他一切连接（包括ping）都将被拒绝。\n\n```bash\n# 1.清空所有iptables规则\niptables -F\n\n# 2.接收目标端口为22的数据包\niptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT\n\n# 3.拒绝所有其他数据包\niptables -A INPUT -j DROP\n\n```\n\n# 更改默认策略\n上例的例子仅对接收的数据包过滤，而对于要发送出去的数据包却没有任何限制。本节主要介绍如何更改链策略，以改变链的行为。\n\n## 默认链策略\n警告：请勿在远程连接的服务器、虚拟机上测试！\n当我们使用-L选项验证当前规则是发现，所有的链旁边都有`policy ACCEPT`标注，这表明当前链的默认策略为`ACCEPT`：\n```bash\n# iptables -L\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\nACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh\nDROP       all  --  anywhere             anywhere            \n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\n```\n这种情况下，如果没有明确添加DROP规则，那么默认情况下将采用ACCEPT策略进行过滤。除非：\n### 为以上三个链单独添加DROP规则：\n```bash\niptables -A INPUT -j DROP\niptables -A OUTPUT -j DROP\niptables -A FORWARD -j DROP\n```\n### 更改默认策略：\n```bash\niptables -P INPUT DROP\niptables -P OUTPUT DROP\niptables -P FORWARD DROP\n```\n如果你严格按照上一节的例子配置了iptables，并且现在使用的是SSH进行连接的，那么会话恐怕已经被迫终止了！\n为什么呢？因为我们已经把OUTPUT链策略更改为DROP了。此时虽然服务器能接收数据，但是无法发送数据：\n```bash\n# iptables -L\nChain INPUT (policy DROP)\ntarget     prot opt source               destination\nACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh\nDROP       all  --  anywhere             anywhere            \n\nChain FORWARD (policy DROP)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy DROP)\ntarget     prot opt source               destination\n```\n\n# 配置应用程序规则\n尽管5.4节已经介绍了如何初步限制除SSH以外的其他连接，但是那是在链默认策略为ACCEPT的情况下实现的，并且没有对输出数据包进行限制。本节在上一节基础上，以SSH和HTTP所使用的端口为例，教大家如何在默认链策略为DROP的情况下，进行防火墙设置。在这里，我们将引进一种新的参数-m state，并检查数据包的状态字段。\n\n## SSH\n```bash\n# 1.允许接收远程主机的SSH请求\niptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# 2.允许发送本地主机的SSH响应\niptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n```\n- `-m state`: 启用状态匹配模块（state matching module）\n- `–-state`: 状态匹配模块的参数。当SSH客户端第一个数据包到达服务器时，状态字段为NEW；建立连接后数据包的状态字段都是ESTABLISHED\n- `–sport 22`: sshd监听22端口，同时也通过该端口和客户端建立连接、传送数据。因此对于SSH服务器而言，源端口就是22\n- `–dport 22`: ssh客户端程序可以从本机的随机端口与SSH服务器的22端口建立连接。因此对于SSH客户端而言，目的端口就是22\n\n如果服务器也需要使用SSH连接其他远程主机，则还需要增加以下配置：\n```bash\n# 1.送出的数据包目的端口为22\niptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# 2.接收的数据包源端口为22\niptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n```\n\n## HTTP\nHTTP的配置与SSH类似：\n```bash\n# 1.允许接收远程主机的HTTP请求\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# 1.允许发送本地主机的HTTP响应\niptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT\n```\n\n## 完整的配置\n```bash\n# 1.删除现有规则\niptables -F\n\n# 2.配置默认链策略\niptables -P INPUT DROP\niptables -P FORWARD DROP\niptables -P OUTPUT DROP\n\n# 3.允许远程主机进行SSH连接\niptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n\n# 4.允许本地主机进行SSH连接\niptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n\n# 5.允许HTTP请求\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT\n```\n","slug":"iptables","published":1,"updated":"2021-01-06T09:56:16.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rd000m2aah2kvihp1z","content":"<p>iptables防火墙可以用于创建过滤(filter)与NAT规则。所有Linux发行版都能使用iptables，因此理解如何配置iptables将会帮助你更有效地管理Linux防火墙。如果你是第一次接触iptables，你会觉得它很复杂，但是一旦你理解iptables的工作原理，你会发现其实它很简单。</p>\n<p>首先介绍iptables的结构：iptables -&gt; Tables -&gt; Chains -&gt; Rules. 简单地讲，tables由chains组成，而chains又由rules组成。如下图所示。</p>\n<p><img src=\"https://user-images.githubusercontent.com/1764005/70845966-94926480-1e8f-11ea-8c62-38010afa3146.png\" alt=\"image\"><br>图: IPTables Table, Chain, and Rule Structure</p>\n<h1 id=\"iptables的表与链\"><a href=\"#iptables的表与链\" class=\"headerlink\" title=\"iptables的表与链\"></a>iptables的表与链</h1><p>iptables具有Filter, NAT, Mangle, Raw四种内建表：</p>\n<h2 id=\"Filter表\"><a href=\"#Filter表\" class=\"headerlink\" title=\"Filter表\"></a>Filter表</h2><p>Filter表示iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：</p>\n<ul>\n<li><strong>INPUT链</strong> – 处理来自外部的数据。</li>\n<li><strong>OUTPUT链</strong> – 处理向外发送的数据。</li>\n<li><strong>FORWARD链</strong> – 将数据转发到本机的其他网卡设备上。</li>\n</ul>\n<h2 id=\"NAT表\"><a href=\"#NAT表\" class=\"headerlink\" title=\"NAT表\"></a>NAT表</h2><p>NAT表有三种内建链：</p>\n<ul>\n<li><strong>PREROUTING链</strong> – 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。</li>\n<li><strong>POSTROUTING链</strong> – 处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）。</li>\n<li><strong>OUTPUT链</strong> – 处理本机产生的数据包。</li>\n</ul>\n<h2 id=\"Mangle表\"><a href=\"#Mangle表\" class=\"headerlink\" title=\"Mangle表\"></a>Mangle表</h2><p>Mangle表用于指定如何处理数据包。它能改变TCP头中的QoS位。Mangle表具有5个内建链：</p>\n<ul>\n<li>PREROUTING</li>\n<li>OUTPUT</li>\n<li>FORWARD</li>\n<li>INPUT</li>\n<li>POSTROUTING</li>\n</ul>\n<h2 id=\"Raw表\"><a href=\"#Raw表\" class=\"headerlink\" title=\"Raw表\"></a>Raw表</h2><p>Raw表用于处理异常，它具有2个内建链：</p>\n<p>PREROUTING chain<br>OUTPUT chain</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>下图展示了iptables的三个内建表：</p>\n<p><img src=\"https://user-images.githubusercontent.com/1764005/70846052-68c3ae80-1e90-11ea-83db-51e4b4e01987.png\" alt=\"图: IPTables 内建表\"><br>图: IPTables 内建表</p>\n<h1 id=\"IPTABLES-规则-Rules\"><a href=\"#IPTABLES-规则-Rules\" class=\"headerlink\" title=\"IPTABLES 规则(Rules)\"></a>IPTABLES 规则(Rules)</h1><p>牢记以下三点式理解iptables规则的关键：</p>\n<ul>\n<li>Rules包括一个条件和一个目标(target)</li>\n<li>如果满足条件，就执行目标(target)中的规则或者特定值。</li>\n<li>如果不满足条件，就判断下一条Rules。</li>\n</ul>\n<h2 id=\"目标值（Target-Values）\"><a href=\"#目标值（Target-Values）\" class=\"headerlink\" title=\"目标值（Target Values）\"></a>目标值（Target Values）</h2><p>下面是你可以在target里指定的特殊值：</p>\n<ul>\n<li>ACCEPT – 允许防火墙接收数据包</li>\n<li>DROP – 防火墙丢弃包</li>\n<li>QUEUE – 防火墙将数据包移交到用户空间</li>\n<li>RETURN – 防火墙停止执行当前链中的后续Rules，并返回到调用链(the calling chain)中。<br>如果你执行<code>iptables --list</code>你将看到防火墙上的可用规则。下例说明当前系统没有定义防火墙，你可以看到，它显示了默认的filter表，以及表内默认的input链, forward链, output链。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t filter --list</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n查看mangle表：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t mangle --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n查看NAT表：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t nat --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n查看RAW表：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t raw --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n注意：如果不指定<code>-t</code>选项，就只会显示默认的<code>filter</code>表。因此，以下两种命令形式是一个意思：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t filter --list</span></span><br><span class=\"line\">(or)</span><br><span class=\"line\"><span class=\"comment\"># iptables --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n以下例子表明在filter表的input链, forward链, output链中存在规则：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables --list</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain RH-Firewall-1-INPUT (2 references)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           icmp <span class=\"built_in\">type</span> 255</span><br><span class=\"line\">3    ACCEPT     esp  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">4    ACCEPT     ah   --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">5    ACCEPT     udp  --  0.0.0.0/0            224.0.0.251         udp dpt:5353</span><br><span class=\"line\">6    ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           udp dpt:631</span><br><span class=\"line\">7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:631</span><br><span class=\"line\">8    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED</span><br><span class=\"line\">9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22</span><br><span class=\"line\">10   REJECT     all  --  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n以上输出包含下列字段：</li>\n</ul>\n<p><strong>num</strong> – 指定链中的规则编号<br><strong>target</strong> – 前面提到的target的特殊值<br><strong>prot</strong> – 协议：tcp, udp, icmp等<br><strong>source</strong> – 数据包的源IP地址<br><strong>destination</strong> – 数据包的目标IP地址</p>\n<h1 id=\"清空所有iptables规则\"><a href=\"#清空所有iptables规则\" class=\"headerlink\" title=\"清空所有iptables规则\"></a>清空所有iptables规则</h1><p>在配置<code>iptables</code>之前，你通常需要用<code>iptables --list</code>命令或者<code>iptables-save</code>命令查看有无现存规则，因为有时需要删除现有的<code>iptables</code>规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables --flush</span><br><span class=\"line\">或者</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这两条命令是等效的。但是并非执行后就万事大吉了。你仍然需要检查规则是不是真的清空了，因为有的linux发行版上这个命令不会清除NAT表中的规则，此时只能手动清除：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t NAT -F</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"永久生效\"><a href=\"#永久生效\" class=\"headerlink\" title=\"永久生效\"></a>永久生效</h1><p>当你删除、添加规则后，这些更改并不能永久生效，这些规则很有可能在系统重启后恢复原样。为了让配置永久生效，根据平台的不同，具体操作也不同。下面进行简单介绍：</p>\n<h2 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h2><p>首先，保存现有的规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.rules</span><br></pre></td></tr></table></figure>\n<p>然后新建一个bash脚本，并保存到<code>/etc/network/if-pre-up.d/</code>目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">iptables-restore &lt; /etc/iptables.rules</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样，每次系统重启后iptables规则都会被自动加载。<br>注意：不要尝试在<code>.bashrc</code>或者<code>.profile</code>中执行以上命令，因为用户通常不是root，而且这只能在登录时加载iptables规则。</p>\n<h1 id=\"追加iptables规则\"><a href=\"#追加iptables规则\" class=\"headerlink\" title=\"追加iptables规则\"></a>追加<code>iptables</code>规则</h1><p>可以使用<code>iptables -A</code>命令追加新规则，其中<code>-A</code>表示<code>Append</code>。因此，新的规则将追加到链尾。<br>一般而言，最后一条规则用于丢弃(DROP)所有数据包。如果你已经有这样的规则了，并且使用<code>-A</code>参数添加新规则，那么就是无用功。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A chain firewall-rule</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-A chain</code> – 指定要追加规则的链</li>\n<li><code>firewall-rule</code> – 具体的规则参数</li>\n</ul>\n<h2 id=\"描述规则的基本参数\"><a href=\"#描述规则的基本参数\" class=\"headerlink\" title=\"描述规则的基本参数\"></a>描述规则的基本参数</h2><p>以下这些规则参数用于描述数据包的协议、源地址、目的地址、允许经过的网络接口，以及如何处理这些数据包。这些描述是对规则的基本描述。</p>\n<h3 id=\"p-协议（protocol）\"><a href=\"#p-协议（protocol）\" class=\"headerlink\" title=\"-p 协议（protocol）\"></a>-p 协议（protocol）</h3><ul>\n<li>指定规则的协议，如<code>tcp</code>, <code>udp</code>, <code>icmp</code>等，可以使用<code>all</code>来指定所有协议。</li>\n<li>如果不指定<code>-p</code>参数，则默认是<code>all</code>值。这并不明智，请总是明确指定协议名称。</li>\n<li>可以使用协议名(如tcp)，或者是协议值（比如6代表tcp）来指定协议。映射关系请查看<code>/etc/protocols</code></li>\n<li>还可以使用<code>–protocol</code>参数代替<code>-p</code>参数</li>\n</ul>\n<h3 id=\"s-源地址（source）\"><a href=\"#s-源地址（source）\" class=\"headerlink\" title=\"-s 源地址（source）\"></a>-s 源地址（source）</h3><ul>\n<li>指定数据包的源地址</li>\n<li>参数可以使IP地址、网络地址、主机名</li>\n<li>例如：-s 192.168.1.101指定IP地址</li>\n<li>例如：-s 192.168.1.10/24指定网络地址</li>\n<li>如果不指定-s参数，就代表所有地址</li>\n<li>还可以使用<code>–src</code>或者<code>–source</code></li>\n</ul>\n<h3 id=\"d-目的地址（destination）\"><a href=\"#d-目的地址（destination）\" class=\"headerlink\" title=\"-d 目的地址（destination）\"></a>-d 目的地址（destination）</h3><ul>\n<li>指定目的地址</li>\n<li>参数和<code>-s</code>相同</li>\n<li>还可以使用<code>–dst</code>或者<code>–destination</code></li>\n</ul>\n<h3 id=\"j-执行目标（jump-to-target）\"><a href=\"#j-执行目标（jump-to-target）\" class=\"headerlink\" title=\"-j 执行目标（jump to target）\"></a>-j 执行目标（jump to target）</h3><ul>\n<li><code>-j</code>代表”jump to target”</li>\n<li><code>-j</code>指定了当与规则(Rule)匹配时如何处理数据包</li>\n<li>可能的值是<code>ACCEPT</code>, <code>DROP</code>, <code>QUEUE</code>, <code>RETURN</code></li>\n<li>还可以指定其他链（Chain）作为目标</li>\n</ul>\n<h3 id=\"i-输入接口（input-interface）\"><a href=\"#i-输入接口（input-interface）\" class=\"headerlink\" title=\"-i 输入接口（input interface）\"></a>-i 输入接口（input interface）</h3><ul>\n<li><code>-i</code>代表输入接口(input interface)</li>\n<li><code>-i</code>指定了要处理来自哪个接口的数据包</li>\n<li>这些数据包即将进入<code>INPUT</code>, <code>FORWARD</code>, <code>PREROUTE链</code></li>\n<li>例如：<code>-i eth0</code>指定了要处理经由eth0进入的数据包</li>\n<li>如果不指定<code>-i</code>参数，那么将处理进入所有接口的数据包</li>\n<li>如果出现! <code>-i eth0</code>，那么将处理所有经由eth0以外的接口进入的数据包</li>\n<li>如果出现<code>-i eth+</code>，那么将处理所有经由eth开头的接口进入的数据包</li>\n<li>还可以使用<code>–in-interface</code>参数</li>\n</ul>\n<h3 id=\"o-输出（out-interface）\"><a href=\"#o-输出（out-interface）\" class=\"headerlink\" title=\"-o 输出（out interface）\"></a>-o 输出（out interface）</h3><p>-o代表”output interface”<br>-o指定了数据包由哪个接口输出<br>这些数据包即将进入<code>FORWARD</code>, <code>OUTPUT</code>, <code>POSTROUTING链</code><br>如果不指定<code>-o</code>选项，那么系统上的所有接口都可以作为输出接口<br>如果出现! <code>-o eth0</code>，那么将从eth0以外的接口输出<br>如果出现<code>-i eth+</code>，那么将仅从eth开头的接口输出<br>还可以使用<code>–out-interface</code>参数</p>\n<h2 id=\"描述规则的扩展参数\"><a href=\"#描述规则的扩展参数\" class=\"headerlink\" title=\"描述规则的扩展参数\"></a>描述规则的扩展参数</h2><p>对规则有了一个基本描述之后，有时候我们还希望指定端口、<code>TCP</code>标志、<code>ICMP</code>类型等内容。</p>\n<h3 id=\"–sport-源端口（source-port）针对-p-tcp-或者-p-udp\"><a href=\"#–sport-源端口（source-port）针对-p-tcp-或者-p-udp\" class=\"headerlink\" title=\"–sport 源端口（source port）针对 -p tcp 或者 -p udp\"></a>–sport 源端口（source port）针对 -p tcp 或者 -p udp</h3><ul>\n<li>缺省情况下，将匹配所有端口</li>\n<li>可以指定端口号或者端口名称，例如<code>–sport 22</code>与<code>–sport ssh</code>。</li>\n<li><code>/etc/services</code>文件描述了上述映射关系。</li>\n<li>从性能上讲，使用端口号更好</li>\n<li>使用冒号可以匹配端口范围，如<code>–sport 22:100</code></li>\n<li>还可以使用<code>–source-port</code></li>\n</ul>\n<h3 id=\"–-dport-目的端口（destination-port）针对-p-tcp-或者-p-udp\"><a href=\"#–-dport-目的端口（destination-port）针对-p-tcp-或者-p-udp\" class=\"headerlink\" title=\"–-dport 目的端口（destination port）针对-p tcp 或者 -p udp\"></a>–-dport 目的端口（destination port）针对-p tcp 或者 -p udp</h3><ul>\n<li>参数和<code>–sport</code>类似</li>\n<li>还可以使用<code>–destination-port</code></li>\n</ul>\n<h3 id=\"–tcp-flags-TCP标志-针对-p-tcp\"><a href=\"#–tcp-flags-TCP标志-针对-p-tcp\" class=\"headerlink\" title=\"-–tcp-flags TCP标志 针对-p tcp\"></a>-–tcp-flags TCP标志 针对-p tcp</h3><ul>\n<li>可以指定由逗号分隔的多个参数</li>\n<li>有效值可以是：<code>SYN</code>, <code>ACK</code>, <code>FIN</code>, <code>RST</code>, <code>URG</code>, <code>PSH</code></li>\n<li>可以使用<code>ALL</code>或者<code>NONE</code></li>\n</ul>\n<h3 id=\"–icmp-type-ICMP类型-针对-p-icmp\"><a href=\"#–icmp-type-ICMP类型-针对-p-icmp\" class=\"headerlink\" title=\"-–icmp-type ICMP类型 针对-p icmp\"></a>-–icmp-type ICMP类型 针对-p icmp</h3><ul>\n<li><code>–icmp-type 0</code> 表示Echo Reply</li>\n<li><code>–icmp-type 8</code> 表示Echo</li>\n</ul>\n<h2 id=\"追加规则的完整实例：仅允许SSH服务\"><a href=\"#追加规则的完整实例：仅允许SSH服务\" class=\"headerlink\" title=\"追加规则的完整实例：仅允许SSH服务\"></a>追加规则的完整实例：仅允许SSH服务</h2><p>本例实现的规则将仅允许SSH数据包通过本地计算机，其他一切连接（包括ping）都将被拒绝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.清空所有iptables规则</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.接收目标端口为22的数据包</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.拒绝所有其他数据包</span></span><br><span class=\"line\">iptables -A INPUT -j DROP</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"更改默认策略\"><a href=\"#更改默认策略\" class=\"headerlink\" title=\"更改默认策略\"></a>更改默认策略</h1><p>上例的例子仅对接收的数据包过滤，而对于要发送出去的数据包却没有任何限制。本节主要介绍如何更改链策略，以改变链的行为。</p>\n<h2 id=\"默认链策略\"><a href=\"#默认链策略\" class=\"headerlink\" title=\"默认链策略\"></a>默认链策略</h2><p>警告：请勿在远程连接的服务器、虚拟机上测试！<br>当我们使用-L选项验证当前规则是发现，所有的链旁边都有<code>policy ACCEPT</code>标注，这表明当前链的默认策略为<code>ACCEPT</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -L</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh</span><br><span class=\"line\">DROP       all  --  anywhere             anywhere            </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<p>这种情况下，如果没有明确添加DROP规则，那么默认情况下将采用ACCEPT策略进行过滤。除非：</p>\n<h3 id=\"为以上三个链单独添加DROP规则：\"><a href=\"#为以上三个链单独添加DROP规则：\" class=\"headerlink\" title=\"为以上三个链单独添加DROP规则：\"></a>为以上三个链单独添加DROP规则：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -j DROP</span><br><span class=\"line\">iptables -A OUTPUT -j DROP</span><br><span class=\"line\">iptables -A FORWARD -j DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改默认策略：\"><a href=\"#更改默认策略：\" class=\"headerlink\" title=\"更改默认策略：\"></a>更改默认策略：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P OUTPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>\n<p>如果你严格按照上一节的例子配置了iptables，并且现在使用的是SSH进行连接的，那么会话恐怕已经被迫终止了！<br>为什么呢？因为我们已经把OUTPUT链策略更改为DROP了。此时虽然服务器能接收数据，但是无法发送数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -L</span></span><br><span class=\"line\">Chain INPUT (policy DROP)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh</span><br><span class=\"line\">DROP       all  --  anywhere             anywhere            </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy DROP)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy DROP)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置应用程序规则\"><a href=\"#配置应用程序规则\" class=\"headerlink\" title=\"配置应用程序规则\"></a>配置应用程序规则</h1><p>尽管5.4节已经介绍了如何初步限制除SSH以外的其他连接，但是那是在链默认策略为ACCEPT的情况下实现的，并且没有对输出数据包进行限制。本节在上一节基础上，以SSH和HTTP所使用的端口为例，教大家如何在默认链策略为DROP的情况下，进行防火墙设置。在这里，我们将引进一种新的参数-m state，并检查数据包的状态字段。</p>\n<h2 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.允许接收远程主机的SSH请求</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.允许发送本地主机的SSH响应</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-m state</code>: 启用状态匹配模块（state matching module）</li>\n<li><code>–-state</code>: 状态匹配模块的参数。当SSH客户端第一个数据包到达服务器时，状态字段为NEW；建立连接后数据包的状态字段都是ESTABLISHED</li>\n<li><code>–sport 22</code>: sshd监听22端口，同时也通过该端口和客户端建立连接、传送数据。因此对于SSH服务器而言，源端口就是22</li>\n<li><code>–dport 22</code>: ssh客户端程序可以从本机的随机端口与SSH服务器的22端口建立连接。因此对于SSH客户端而言，目的端口就是22</li>\n</ul>\n<p>如果服务器也需要使用SSH连接其他远程主机，则还需要增加以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.送出的数据包目的端口为22</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.接收的数据包源端口为22</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>HTTP的配置与SSH类似：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.允许接收远程主机的HTTP请求</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.允许发送本地主机的HTTP响应</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整的配置\"><a href=\"#完整的配置\" class=\"headerlink\" title=\"完整的配置\"></a>完整的配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.删除现有规则</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.配置默认链策略</span></span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br><span class=\"line\">iptables -P OUTPUT DROP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.允许远程主机进行SSH连接</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.允许本地主机进行SSH连接</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.允许HTTP请求</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>iptables防火墙可以用于创建过滤(filter)与NAT规则。所有Linux发行版都能使用iptables，因此理解如何配置iptables将会帮助你更有效地管理Linux防火墙。如果你是第一次接触iptables，你会觉得它很复杂，但是一旦你理解iptables的工作原理，你会发现其实它很简单。</p>\n<p>首先介绍iptables的结构：iptables -&gt; Tables -&gt; Chains -&gt; Rules. 简单地讲，tables由chains组成，而chains又由rules组成。如下图所示。</p>\n<p><img src=\"https://user-images.githubusercontent.com/1764005/70845966-94926480-1e8f-11ea-8c62-38010afa3146.png\" alt=\"image\"><br>图: IPTables Table, Chain, and Rule Structure</p>\n<h1 id=\"iptables的表与链\"><a href=\"#iptables的表与链\" class=\"headerlink\" title=\"iptables的表与链\"></a>iptables的表与链</h1><p>iptables具有Filter, NAT, Mangle, Raw四种内建表：</p>\n<h2 id=\"Filter表\"><a href=\"#Filter表\" class=\"headerlink\" title=\"Filter表\"></a>Filter表</h2><p>Filter表示iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：</p>\n<ul>\n<li><strong>INPUT链</strong> – 处理来自外部的数据。</li>\n<li><strong>OUTPUT链</strong> – 处理向外发送的数据。</li>\n<li><strong>FORWARD链</strong> – 将数据转发到本机的其他网卡设备上。</li>\n</ul>\n<h2 id=\"NAT表\"><a href=\"#NAT表\" class=\"headerlink\" title=\"NAT表\"></a>NAT表</h2><p>NAT表有三种内建链：</p>\n<ul>\n<li><strong>PREROUTING链</strong> – 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。</li>\n<li><strong>POSTROUTING链</strong> – 处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）。</li>\n<li><strong>OUTPUT链</strong> – 处理本机产生的数据包。</li>\n</ul>\n<h2 id=\"Mangle表\"><a href=\"#Mangle表\" class=\"headerlink\" title=\"Mangle表\"></a>Mangle表</h2><p>Mangle表用于指定如何处理数据包。它能改变TCP头中的QoS位。Mangle表具有5个内建链：</p>\n<ul>\n<li>PREROUTING</li>\n<li>OUTPUT</li>\n<li>FORWARD</li>\n<li>INPUT</li>\n<li>POSTROUTING</li>\n</ul>\n<h2 id=\"Raw表\"><a href=\"#Raw表\" class=\"headerlink\" title=\"Raw表\"></a>Raw表</h2><p>Raw表用于处理异常，它具有2个内建链：</p>\n<p>PREROUTING chain<br>OUTPUT chain</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>下图展示了iptables的三个内建表：</p>\n<p><img src=\"https://user-images.githubusercontent.com/1764005/70846052-68c3ae80-1e90-11ea-83db-51e4b4e01987.png\" alt=\"图: IPTables 内建表\"><br>图: IPTables 内建表</p>\n<h1 id=\"IPTABLES-规则-Rules\"><a href=\"#IPTABLES-规则-Rules\" class=\"headerlink\" title=\"IPTABLES 规则(Rules)\"></a>IPTABLES 规则(Rules)</h1><p>牢记以下三点式理解iptables规则的关键：</p>\n<ul>\n<li>Rules包括一个条件和一个目标(target)</li>\n<li>如果满足条件，就执行目标(target)中的规则或者特定值。</li>\n<li>如果不满足条件，就判断下一条Rules。</li>\n</ul>\n<h2 id=\"目标值（Target-Values）\"><a href=\"#目标值（Target-Values）\" class=\"headerlink\" title=\"目标值（Target Values）\"></a>目标值（Target Values）</h2><p>下面是你可以在target里指定的特殊值：</p>\n<ul>\n<li>ACCEPT – 允许防火墙接收数据包</li>\n<li>DROP – 防火墙丢弃包</li>\n<li>QUEUE – 防火墙将数据包移交到用户空间</li>\n<li>RETURN – 防火墙停止执行当前链中的后续Rules，并返回到调用链(the calling chain)中。<br>如果你执行<code>iptables --list</code>你将看到防火墙上的可用规则。下例说明当前系统没有定义防火墙，你可以看到，它显示了默认的filter表，以及表内默认的input链, forward链, output链。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t filter --list</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n查看mangle表：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t mangle --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n查看NAT表：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t nat --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n查看RAW表：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t raw --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n注意：如果不指定<code>-t</code>选项，就只会显示默认的<code>filter</code>表。因此，以下两种命令形式是一个意思：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -t filter --list</span></span><br><span class=\"line\">(or)</span><br><span class=\"line\"><span class=\"comment\"># iptables --list</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n以下例子表明在filter表的input链, forward链, output链中存在规则：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables --list</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    RH-Firewall-1-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain RH-Firewall-1-INPUT (2 references)</span><br><span class=\"line\">num  target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           icmp <span class=\"built_in\">type</span> 255</span><br><span class=\"line\">3    ACCEPT     esp  --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">4    ACCEPT     ah   --  0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\">5    ACCEPT     udp  --  0.0.0.0/0            224.0.0.251         udp dpt:5353</span><br><span class=\"line\">6    ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0           udp dpt:631</span><br><span class=\"line\">7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:631</span><br><span class=\"line\">8    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED</span><br><span class=\"line\">9    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22</span><br><span class=\"line\">10   REJECT     all  --  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n以上输出包含下列字段：</li>\n</ul>\n<p><strong>num</strong> – 指定链中的规则编号<br><strong>target</strong> – 前面提到的target的特殊值<br><strong>prot</strong> – 协议：tcp, udp, icmp等<br><strong>source</strong> – 数据包的源IP地址<br><strong>destination</strong> – 数据包的目标IP地址</p>\n<h1 id=\"清空所有iptables规则\"><a href=\"#清空所有iptables规则\" class=\"headerlink\" title=\"清空所有iptables规则\"></a>清空所有iptables规则</h1><p>在配置<code>iptables</code>之前，你通常需要用<code>iptables --list</code>命令或者<code>iptables-save</code>命令查看有无现存规则，因为有时需要删除现有的<code>iptables</code>规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables --flush</span><br><span class=\"line\">或者</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这两条命令是等效的。但是并非执行后就万事大吉了。你仍然需要检查规则是不是真的清空了，因为有的linux发行版上这个命令不会清除NAT表中的规则，此时只能手动清除：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t NAT -F</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"永久生效\"><a href=\"#永久生效\" class=\"headerlink\" title=\"永久生效\"></a>永久生效</h1><p>当你删除、添加规则后，这些更改并不能永久生效，这些规则很有可能在系统重启后恢复原样。为了让配置永久生效，根据平台的不同，具体操作也不同。下面进行简单介绍：</p>\n<h2 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h2><p>首先，保存现有的规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.rules</span><br></pre></td></tr></table></figure>\n<p>然后新建一个bash脚本，并保存到<code>/etc/network/if-pre-up.d/</code>目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">iptables-restore &lt; /etc/iptables.rules</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样，每次系统重启后iptables规则都会被自动加载。<br>注意：不要尝试在<code>.bashrc</code>或者<code>.profile</code>中执行以上命令，因为用户通常不是root，而且这只能在登录时加载iptables规则。</p>\n<h1 id=\"追加iptables规则\"><a href=\"#追加iptables规则\" class=\"headerlink\" title=\"追加iptables规则\"></a>追加<code>iptables</code>规则</h1><p>可以使用<code>iptables -A</code>命令追加新规则，其中<code>-A</code>表示<code>Append</code>。因此，新的规则将追加到链尾。<br>一般而言，最后一条规则用于丢弃(DROP)所有数据包。如果你已经有这样的规则了，并且使用<code>-A</code>参数添加新规则，那么就是无用功。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A chain firewall-rule</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-A chain</code> – 指定要追加规则的链</li>\n<li><code>firewall-rule</code> – 具体的规则参数</li>\n</ul>\n<h2 id=\"描述规则的基本参数\"><a href=\"#描述规则的基本参数\" class=\"headerlink\" title=\"描述规则的基本参数\"></a>描述规则的基本参数</h2><p>以下这些规则参数用于描述数据包的协议、源地址、目的地址、允许经过的网络接口，以及如何处理这些数据包。这些描述是对规则的基本描述。</p>\n<h3 id=\"p-协议（protocol）\"><a href=\"#p-协议（protocol）\" class=\"headerlink\" title=\"-p 协议（protocol）\"></a>-p 协议（protocol）</h3><ul>\n<li>指定规则的协议，如<code>tcp</code>, <code>udp</code>, <code>icmp</code>等，可以使用<code>all</code>来指定所有协议。</li>\n<li>如果不指定<code>-p</code>参数，则默认是<code>all</code>值。这并不明智，请总是明确指定协议名称。</li>\n<li>可以使用协议名(如tcp)，或者是协议值（比如6代表tcp）来指定协议。映射关系请查看<code>/etc/protocols</code></li>\n<li>还可以使用<code>–protocol</code>参数代替<code>-p</code>参数</li>\n</ul>\n<h3 id=\"s-源地址（source）\"><a href=\"#s-源地址（source）\" class=\"headerlink\" title=\"-s 源地址（source）\"></a>-s 源地址（source）</h3><ul>\n<li>指定数据包的源地址</li>\n<li>参数可以使IP地址、网络地址、主机名</li>\n<li>例如：-s 192.168.1.101指定IP地址</li>\n<li>例如：-s 192.168.1.10/24指定网络地址</li>\n<li>如果不指定-s参数，就代表所有地址</li>\n<li>还可以使用<code>–src</code>或者<code>–source</code></li>\n</ul>\n<h3 id=\"d-目的地址（destination）\"><a href=\"#d-目的地址（destination）\" class=\"headerlink\" title=\"-d 目的地址（destination）\"></a>-d 目的地址（destination）</h3><ul>\n<li>指定目的地址</li>\n<li>参数和<code>-s</code>相同</li>\n<li>还可以使用<code>–dst</code>或者<code>–destination</code></li>\n</ul>\n<h3 id=\"j-执行目标（jump-to-target）\"><a href=\"#j-执行目标（jump-to-target）\" class=\"headerlink\" title=\"-j 执行目标（jump to target）\"></a>-j 执行目标（jump to target）</h3><ul>\n<li><code>-j</code>代表”jump to target”</li>\n<li><code>-j</code>指定了当与规则(Rule)匹配时如何处理数据包</li>\n<li>可能的值是<code>ACCEPT</code>, <code>DROP</code>, <code>QUEUE</code>, <code>RETURN</code></li>\n<li>还可以指定其他链（Chain）作为目标</li>\n</ul>\n<h3 id=\"i-输入接口（input-interface）\"><a href=\"#i-输入接口（input-interface）\" class=\"headerlink\" title=\"-i 输入接口（input interface）\"></a>-i 输入接口（input interface）</h3><ul>\n<li><code>-i</code>代表输入接口(input interface)</li>\n<li><code>-i</code>指定了要处理来自哪个接口的数据包</li>\n<li>这些数据包即将进入<code>INPUT</code>, <code>FORWARD</code>, <code>PREROUTE链</code></li>\n<li>例如：<code>-i eth0</code>指定了要处理经由eth0进入的数据包</li>\n<li>如果不指定<code>-i</code>参数，那么将处理进入所有接口的数据包</li>\n<li>如果出现! <code>-i eth0</code>，那么将处理所有经由eth0以外的接口进入的数据包</li>\n<li>如果出现<code>-i eth+</code>，那么将处理所有经由eth开头的接口进入的数据包</li>\n<li>还可以使用<code>–in-interface</code>参数</li>\n</ul>\n<h3 id=\"o-输出（out-interface）\"><a href=\"#o-输出（out-interface）\" class=\"headerlink\" title=\"-o 输出（out interface）\"></a>-o 输出（out interface）</h3><p>-o代表”output interface”<br>-o指定了数据包由哪个接口输出<br>这些数据包即将进入<code>FORWARD</code>, <code>OUTPUT</code>, <code>POSTROUTING链</code><br>如果不指定<code>-o</code>选项，那么系统上的所有接口都可以作为输出接口<br>如果出现! <code>-o eth0</code>，那么将从eth0以外的接口输出<br>如果出现<code>-i eth+</code>，那么将仅从eth开头的接口输出<br>还可以使用<code>–out-interface</code>参数</p>\n<h2 id=\"描述规则的扩展参数\"><a href=\"#描述规则的扩展参数\" class=\"headerlink\" title=\"描述规则的扩展参数\"></a>描述规则的扩展参数</h2><p>对规则有了一个基本描述之后，有时候我们还希望指定端口、<code>TCP</code>标志、<code>ICMP</code>类型等内容。</p>\n<h3 id=\"–sport-源端口（source-port）针对-p-tcp-或者-p-udp\"><a href=\"#–sport-源端口（source-port）针对-p-tcp-或者-p-udp\" class=\"headerlink\" title=\"–sport 源端口（source port）针对 -p tcp 或者 -p udp\"></a>–sport 源端口（source port）针对 -p tcp 或者 -p udp</h3><ul>\n<li>缺省情况下，将匹配所有端口</li>\n<li>可以指定端口号或者端口名称，例如<code>–sport 22</code>与<code>–sport ssh</code>。</li>\n<li><code>/etc/services</code>文件描述了上述映射关系。</li>\n<li>从性能上讲，使用端口号更好</li>\n<li>使用冒号可以匹配端口范围，如<code>–sport 22:100</code></li>\n<li>还可以使用<code>–source-port</code></li>\n</ul>\n<h3 id=\"–-dport-目的端口（destination-port）针对-p-tcp-或者-p-udp\"><a href=\"#–-dport-目的端口（destination-port）针对-p-tcp-或者-p-udp\" class=\"headerlink\" title=\"–-dport 目的端口（destination port）针对-p tcp 或者 -p udp\"></a>–-dport 目的端口（destination port）针对-p tcp 或者 -p udp</h3><ul>\n<li>参数和<code>–sport</code>类似</li>\n<li>还可以使用<code>–destination-port</code></li>\n</ul>\n<h3 id=\"–tcp-flags-TCP标志-针对-p-tcp\"><a href=\"#–tcp-flags-TCP标志-针对-p-tcp\" class=\"headerlink\" title=\"-–tcp-flags TCP标志 针对-p tcp\"></a>-–tcp-flags TCP标志 针对-p tcp</h3><ul>\n<li>可以指定由逗号分隔的多个参数</li>\n<li>有效值可以是：<code>SYN</code>, <code>ACK</code>, <code>FIN</code>, <code>RST</code>, <code>URG</code>, <code>PSH</code></li>\n<li>可以使用<code>ALL</code>或者<code>NONE</code></li>\n</ul>\n<h3 id=\"–icmp-type-ICMP类型-针对-p-icmp\"><a href=\"#–icmp-type-ICMP类型-针对-p-icmp\" class=\"headerlink\" title=\"-–icmp-type ICMP类型 针对-p icmp\"></a>-–icmp-type ICMP类型 针对-p icmp</h3><ul>\n<li><code>–icmp-type 0</code> 表示Echo Reply</li>\n<li><code>–icmp-type 8</code> 表示Echo</li>\n</ul>\n<h2 id=\"追加规则的完整实例：仅允许SSH服务\"><a href=\"#追加规则的完整实例：仅允许SSH服务\" class=\"headerlink\" title=\"追加规则的完整实例：仅允许SSH服务\"></a>追加规则的完整实例：仅允许SSH服务</h2><p>本例实现的规则将仅允许SSH数据包通过本地计算机，其他一切连接（包括ping）都将被拒绝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.清空所有iptables规则</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.接收目标端口为22的数据包</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.拒绝所有其他数据包</span></span><br><span class=\"line\">iptables -A INPUT -j DROP</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"更改默认策略\"><a href=\"#更改默认策略\" class=\"headerlink\" title=\"更改默认策略\"></a>更改默认策略</h1><p>上例的例子仅对接收的数据包过滤，而对于要发送出去的数据包却没有任何限制。本节主要介绍如何更改链策略，以改变链的行为。</p>\n<h2 id=\"默认链策略\"><a href=\"#默认链策略\" class=\"headerlink\" title=\"默认链策略\"></a>默认链策略</h2><p>警告：请勿在远程连接的服务器、虚拟机上测试！<br>当我们使用-L选项验证当前规则是发现，所有的链旁边都有<code>policy ACCEPT</code>标注，这表明当前链的默认策略为<code>ACCEPT</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -L</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh</span><br><span class=\"line\">DROP       all  --  anywhere             anywhere            </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<p>这种情况下，如果没有明确添加DROP规则，那么默认情况下将采用ACCEPT策略进行过滤。除非：</p>\n<h3 id=\"为以上三个链单独添加DROP规则：\"><a href=\"#为以上三个链单独添加DROP规则：\" class=\"headerlink\" title=\"为以上三个链单独添加DROP规则：\"></a>为以上三个链单独添加DROP规则：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -j DROP</span><br><span class=\"line\">iptables -A OUTPUT -j DROP</span><br><span class=\"line\">iptables -A FORWARD -j DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改默认策略：\"><a href=\"#更改默认策略：\" class=\"headerlink\" title=\"更改默认策略：\"></a>更改默认策略：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P OUTPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>\n<p>如果你严格按照上一节的例子配置了iptables，并且现在使用的是SSH进行连接的，那么会话恐怕已经被迫终止了！<br>为什么呢？因为我们已经把OUTPUT链策略更改为DROP了。此时虽然服务器能接收数据，但是无法发送数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iptables -L</span></span><br><span class=\"line\">Chain INPUT (policy DROP)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh</span><br><span class=\"line\">DROP       all  --  anywhere             anywhere            </span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy DROP)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy DROP)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置应用程序规则\"><a href=\"#配置应用程序规则\" class=\"headerlink\" title=\"配置应用程序规则\"></a>配置应用程序规则</h1><p>尽管5.4节已经介绍了如何初步限制除SSH以外的其他连接，但是那是在链默认策略为ACCEPT的情况下实现的，并且没有对输出数据包进行限制。本节在上一节基础上，以SSH和HTTP所使用的端口为例，教大家如何在默认链策略为DROP的情况下，进行防火墙设置。在这里，我们将引进一种新的参数-m state，并检查数据包的状态字段。</p>\n<h2 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.允许接收远程主机的SSH请求</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.允许发送本地主机的SSH响应</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-m state</code>: 启用状态匹配模块（state matching module）</li>\n<li><code>–-state</code>: 状态匹配模块的参数。当SSH客户端第一个数据包到达服务器时，状态字段为NEW；建立连接后数据包的状态字段都是ESTABLISHED</li>\n<li><code>–sport 22</code>: sshd监听22端口，同时也通过该端口和客户端建立连接、传送数据。因此对于SSH服务器而言，源端口就是22</li>\n<li><code>–dport 22</code>: ssh客户端程序可以从本机的随机端口与SSH服务器的22端口建立连接。因此对于SSH客户端而言，目的端口就是22</li>\n</ul>\n<p>如果服务器也需要使用SSH连接其他远程主机，则还需要增加以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.送出的数据包目的端口为22</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.接收的数据包源端口为22</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>HTTP的配置与SSH类似：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.允许接收远程主机的HTTP请求</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.允许发送本地主机的HTTP响应</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整的配置\"><a href=\"#完整的配置\" class=\"headerlink\" title=\"完整的配置\"></a>完整的配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.删除现有规则</span></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.配置默认链策略</span></span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br><span class=\"line\">iptables -P OUTPUT DROP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.允许远程主机进行SSH连接</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.允许本地主机进行SSH连接</span></span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.允许HTTP请求</span></span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>"},{"title":"kcptun 服务器配置说明","date":"2019-11-11T03:47:13.000Z","_content":"\n# 配置样例\n```json\n{\n\"listen\": \":8888\",\n\"target\": \"127.0.0.1:1080\",\n\"key\": \"password\",\n\"crypt\": \"salsa20\",\n\"mode\": \"fast\",\n\"mtu\": 1400,\n\"sndwnd\": 1024,\n\"rcvwnd\": 1024,\n\"datashard\": 10,\n\"parityshard\": 3,\n\"dscp\": 46,\n\"nocomp\": true,\n\"acknodelay\": false,\n\"sockbuf\": 16777217,\n\"smuxbuf\": 16777217,\n\"streambuf\":16777217,\n\"smuxver\": 2,\n\"keepalive\": 10,\n\"pprof\":false,\n\"quiet\":true,\n\"tcp\":false\n}\n```\n\n# 配置说明\n\n| 配项 |  值  | 说明 |\n| :--- | :--- | :--- |\n| listen | \":33523\" | kcp server 开放的端口 |\n| target | \"127.0.0.1:33522\"  | 本地shadowsocks 服务监听的端口 |\n| key | \"igwcwmtd\" | |\n| crypt | \"salsa20\" | salsa20对 arm芯片友好 |\n| mode | \"fast\" | 如不是竟技游戏，`fast`足矣 |\n| mtu | 1400 | 不重要，copy即可 |\n| sndwnd | 1024 | 不要低于512，也不要过高 |\n| rcvwnd | 1024 | 同上\n| datashard | 10 | `datashard`和`partyshared` 两个数字的比，涉及到纠错理论， 3/10，实测没啥问题。过高的比重会过度放大流量 |\n| parityshard | 3 | 同上 |\n| dscp | 46 | 46 是紧急指针。让你的流量在网在公网上成为`VIP`|\n| nocomp | true |  不压缩 |\n| acknodelay | false | 不等待 |\n| sockbuf | 16777217 | 以下三个`buf`是缓存，如果是手机，要设置小点，1～2M就好 |\n| smuxbuf | 16777217 | 同上 |\n| streambuf | 16777217 | 同上 |\n| smuxver | 2 | 这里是多路复用的协议版本。选`2`，更优 |\n| keepalive | 10 | |\n| pprof | false | 这是debug，不需要 |\n| quiet | true | 日志不需要太详细 |\n| tcp | false | 是否伪装成`tcp`连接 |\n\n\n## `mode` 特别说明\n\n`mode` 项其实是 `nodelay`、`interval`、`resend`、`nc` 4项的一个组合。它们的对应关系是：\n\n| mode | nodelay | interval | resend | nc |\n| :--- | :--- | :--- | :--- | :--- |\n| normal | 0 | 40 | 2 | 1 |\n| fast | 0 | 30 | 2 | 1 |\n| fast1 | 1 | 20 | 2 | 1 |\n| fast2 | 1 | 10 | 2 | 1 |\n\n如果不满意于自带的4个`mode`。可以将`mode`设置为`manual`。然后就能手动定制这4项参数了！\n","source":"_posts/kcp-tun-config.md","raw":"---\ntitle: kcptun 服务器配置说明\ndate: 2019-11-11 11:47:13\ntags: [kcp, tun]\n---\n\n# 配置样例\n```json\n{\n\"listen\": \":8888\",\n\"target\": \"127.0.0.1:1080\",\n\"key\": \"password\",\n\"crypt\": \"salsa20\",\n\"mode\": \"fast\",\n\"mtu\": 1400,\n\"sndwnd\": 1024,\n\"rcvwnd\": 1024,\n\"datashard\": 10,\n\"parityshard\": 3,\n\"dscp\": 46,\n\"nocomp\": true,\n\"acknodelay\": false,\n\"sockbuf\": 16777217,\n\"smuxbuf\": 16777217,\n\"streambuf\":16777217,\n\"smuxver\": 2,\n\"keepalive\": 10,\n\"pprof\":false,\n\"quiet\":true,\n\"tcp\":false\n}\n```\n\n# 配置说明\n\n| 配项 |  值  | 说明 |\n| :--- | :--- | :--- |\n| listen | \":33523\" | kcp server 开放的端口 |\n| target | \"127.0.0.1:33522\"  | 本地shadowsocks 服务监听的端口 |\n| key | \"igwcwmtd\" | |\n| crypt | \"salsa20\" | salsa20对 arm芯片友好 |\n| mode | \"fast\" | 如不是竟技游戏，`fast`足矣 |\n| mtu | 1400 | 不重要，copy即可 |\n| sndwnd | 1024 | 不要低于512，也不要过高 |\n| rcvwnd | 1024 | 同上\n| datashard | 10 | `datashard`和`partyshared` 两个数字的比，涉及到纠错理论， 3/10，实测没啥问题。过高的比重会过度放大流量 |\n| parityshard | 3 | 同上 |\n| dscp | 46 | 46 是紧急指针。让你的流量在网在公网上成为`VIP`|\n| nocomp | true |  不压缩 |\n| acknodelay | false | 不等待 |\n| sockbuf | 16777217 | 以下三个`buf`是缓存，如果是手机，要设置小点，1～2M就好 |\n| smuxbuf | 16777217 | 同上 |\n| streambuf | 16777217 | 同上 |\n| smuxver | 2 | 这里是多路复用的协议版本。选`2`，更优 |\n| keepalive | 10 | |\n| pprof | false | 这是debug，不需要 |\n| quiet | true | 日志不需要太详细 |\n| tcp | false | 是否伪装成`tcp`连接 |\n\n\n## `mode` 特别说明\n\n`mode` 项其实是 `nodelay`、`interval`、`resend`、`nc` 4项的一个组合。它们的对应关系是：\n\n| mode | nodelay | interval | resend | nc |\n| :--- | :--- | :--- | :--- | :--- |\n| normal | 0 | 40 | 2 | 1 |\n| fast | 0 | 30 | 2 | 1 |\n| fast1 | 1 | 20 | 2 | 1 |\n| fast2 | 1 | 10 | 2 | 1 |\n\n如果不满意于自带的4个`mode`。可以将`mode`设置为`manual`。然后就能手动定制这4项参数了！\n","slug":"kcp-tun-config","published":1,"updated":"2021-01-06T09:56:16.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rf000p2aahguja2kb8","content":"<h1 id=\"配置样例\"><a href=\"#配置样例\" class=\"headerlink\" title=\"配置样例\"></a>配置样例</h1><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">&quot;listen&quot;</span>: <span class=\"string\">&quot;:8888&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;target&quot;</span>: <span class=\"string\">&quot;127.0.0.1:1080&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;password&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;crypt&quot;</span>: <span class=\"string\">&quot;salsa20&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;mode&quot;</span>: <span class=\"string\">&quot;fast&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;mtu&quot;</span>: <span class=\"number\">1400</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;sndwnd&quot;</span>: <span class=\"number\">1024</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;rcvwnd&quot;</span>: <span class=\"number\">1024</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;datashard&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;parityshard&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;dscp&quot;</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;nocomp&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;acknodelay&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;sockbuf&quot;</span>: <span class=\"number\">16777217</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;smuxbuf&quot;</span>: <span class=\"number\">16777217</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;streambuf&quot;</span>:<span class=\"number\">16777217</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;smuxver&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;keepalive&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;pprof&quot;</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;quiet&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;tcp&quot;</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h1><table>\n<thead>\n<tr>\n<th align=\"left\">配项</th>\n<th align=\"left\">值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">listen</td>\n<td align=\"left\">“:33523”</td>\n<td align=\"left\">kcp server 开放的端口</td>\n</tr>\n<tr>\n<td align=\"left\">target</td>\n<td align=\"left\">“127.0.0.1:33522”</td>\n<td align=\"left\">本地shadowsocks 服务监听的端口</td>\n</tr>\n<tr>\n<td align=\"left\">key</td>\n<td align=\"left\">“igwcwmtd”</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">crypt</td>\n<td align=\"left\">“salsa20”</td>\n<td align=\"left\">salsa20对 arm芯片友好</td>\n</tr>\n<tr>\n<td align=\"left\">mode</td>\n<td align=\"left\">“fast”</td>\n<td align=\"left\">如不是竟技游戏，<code>fast</code>足矣</td>\n</tr>\n<tr>\n<td align=\"left\">mtu</td>\n<td align=\"left\">1400</td>\n<td align=\"left\">不重要，copy即可</td>\n</tr>\n<tr>\n<td align=\"left\">sndwnd</td>\n<td align=\"left\">1024</td>\n<td align=\"left\">不要低于512，也不要过高</td>\n</tr>\n<tr>\n<td align=\"left\">rcvwnd</td>\n<td align=\"left\">1024</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">datashard</td>\n<td align=\"left\">10</td>\n<td align=\"left\"><code>datashard</code>和<code>partyshared</code> 两个数字的比，涉及到纠错理论， 3/10，实测没啥问题。过高的比重会过度放大流量</td>\n</tr>\n<tr>\n<td align=\"left\">parityshard</td>\n<td align=\"left\">3</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">dscp</td>\n<td align=\"left\">46</td>\n<td align=\"left\">46 是紧急指针。让你的流量在网在公网上成为<code>VIP</code></td>\n</tr>\n<tr>\n<td align=\"left\">nocomp</td>\n<td align=\"left\">true</td>\n<td align=\"left\">不压缩</td>\n</tr>\n<tr>\n<td align=\"left\">acknodelay</td>\n<td align=\"left\">false</td>\n<td align=\"left\">不等待</td>\n</tr>\n<tr>\n<td align=\"left\">sockbuf</td>\n<td align=\"left\">16777217</td>\n<td align=\"left\">以下三个<code>buf</code>是缓存，如果是手机，要设置小点，1～2M就好</td>\n</tr>\n<tr>\n<td align=\"left\">smuxbuf</td>\n<td align=\"left\">16777217</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">streambuf</td>\n<td align=\"left\">16777217</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">smuxver</td>\n<td align=\"left\">2</td>\n<td align=\"left\">这里是多路复用的协议版本。选<code>2</code>，更优</td>\n</tr>\n<tr>\n<td align=\"left\">keepalive</td>\n<td align=\"left\">10</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">pprof</td>\n<td align=\"left\">false</td>\n<td align=\"left\">这是debug，不需要</td>\n</tr>\n<tr>\n<td align=\"left\">quiet</td>\n<td align=\"left\">true</td>\n<td align=\"left\">日志不需要太详细</td>\n</tr>\n<tr>\n<td align=\"left\">tcp</td>\n<td align=\"left\">false</td>\n<td align=\"left\">是否伪装成<code>tcp</code>连接</td>\n</tr>\n</tbody></table>\n<h2 id=\"mode-特别说明\"><a href=\"#mode-特别说明\" class=\"headerlink\" title=\"mode 特别说明\"></a><code>mode</code> 特别说明</h2><p><code>mode</code> 项其实是 <code>nodelay</code>、<code>interval</code>、<code>resend</code>、<code>nc</code> 4项的一个组合。它们的对应关系是：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">mode</th>\n<th align=\"left\">nodelay</th>\n<th align=\"left\">interval</th>\n<th align=\"left\">resend</th>\n<th align=\"left\">nc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">normal</td>\n<td align=\"left\">0</td>\n<td align=\"left\">40</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">fast</td>\n<td align=\"left\">0</td>\n<td align=\"left\">30</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">fast1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">20</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">fast2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody></table>\n<p>如果不满意于自带的4个<code>mode</code>。可以将<code>mode</code>设置为<code>manual</code>。然后就能手动定制这4项参数了！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配置样例\"><a href=\"#配置样例\" class=\"headerlink\" title=\"配置样例\"></a>配置样例</h1><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">&quot;listen&quot;</span>: <span class=\"string\">&quot;:8888&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;target&quot;</span>: <span class=\"string\">&quot;127.0.0.1:1080&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;password&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;crypt&quot;</span>: <span class=\"string\">&quot;salsa20&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;mode&quot;</span>: <span class=\"string\">&quot;fast&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;mtu&quot;</span>: <span class=\"number\">1400</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;sndwnd&quot;</span>: <span class=\"number\">1024</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;rcvwnd&quot;</span>: <span class=\"number\">1024</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;datashard&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;parityshard&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;dscp&quot;</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;nocomp&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;acknodelay&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;sockbuf&quot;</span>: <span class=\"number\">16777217</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;smuxbuf&quot;</span>: <span class=\"number\">16777217</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;streambuf&quot;</span>:<span class=\"number\">16777217</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;smuxver&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;keepalive&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;pprof&quot;</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;quiet&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">&quot;tcp&quot;</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h1><table>\n<thead>\n<tr>\n<th align=\"left\">配项</th>\n<th align=\"left\">值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">listen</td>\n<td align=\"left\">“:33523”</td>\n<td align=\"left\">kcp server 开放的端口</td>\n</tr>\n<tr>\n<td align=\"left\">target</td>\n<td align=\"left\">“127.0.0.1:33522”</td>\n<td align=\"left\">本地shadowsocks 服务监听的端口</td>\n</tr>\n<tr>\n<td align=\"left\">key</td>\n<td align=\"left\">“igwcwmtd”</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">crypt</td>\n<td align=\"left\">“salsa20”</td>\n<td align=\"left\">salsa20对 arm芯片友好</td>\n</tr>\n<tr>\n<td align=\"left\">mode</td>\n<td align=\"left\">“fast”</td>\n<td align=\"left\">如不是竟技游戏，<code>fast</code>足矣</td>\n</tr>\n<tr>\n<td align=\"left\">mtu</td>\n<td align=\"left\">1400</td>\n<td align=\"left\">不重要，copy即可</td>\n</tr>\n<tr>\n<td align=\"left\">sndwnd</td>\n<td align=\"left\">1024</td>\n<td align=\"left\">不要低于512，也不要过高</td>\n</tr>\n<tr>\n<td align=\"left\">rcvwnd</td>\n<td align=\"left\">1024</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">datashard</td>\n<td align=\"left\">10</td>\n<td align=\"left\"><code>datashard</code>和<code>partyshared</code> 两个数字的比，涉及到纠错理论， 3/10，实测没啥问题。过高的比重会过度放大流量</td>\n</tr>\n<tr>\n<td align=\"left\">parityshard</td>\n<td align=\"left\">3</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">dscp</td>\n<td align=\"left\">46</td>\n<td align=\"left\">46 是紧急指针。让你的流量在网在公网上成为<code>VIP</code></td>\n</tr>\n<tr>\n<td align=\"left\">nocomp</td>\n<td align=\"left\">true</td>\n<td align=\"left\">不压缩</td>\n</tr>\n<tr>\n<td align=\"left\">acknodelay</td>\n<td align=\"left\">false</td>\n<td align=\"left\">不等待</td>\n</tr>\n<tr>\n<td align=\"left\">sockbuf</td>\n<td align=\"left\">16777217</td>\n<td align=\"left\">以下三个<code>buf</code>是缓存，如果是手机，要设置小点，1～2M就好</td>\n</tr>\n<tr>\n<td align=\"left\">smuxbuf</td>\n<td align=\"left\">16777217</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">streambuf</td>\n<td align=\"left\">16777217</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">smuxver</td>\n<td align=\"left\">2</td>\n<td align=\"left\">这里是多路复用的协议版本。选<code>2</code>，更优</td>\n</tr>\n<tr>\n<td align=\"left\">keepalive</td>\n<td align=\"left\">10</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">pprof</td>\n<td align=\"left\">false</td>\n<td align=\"left\">这是debug，不需要</td>\n</tr>\n<tr>\n<td align=\"left\">quiet</td>\n<td align=\"left\">true</td>\n<td align=\"left\">日志不需要太详细</td>\n</tr>\n<tr>\n<td align=\"left\">tcp</td>\n<td align=\"left\">false</td>\n<td align=\"left\">是否伪装成<code>tcp</code>连接</td>\n</tr>\n</tbody></table>\n<h2 id=\"mode-特别说明\"><a href=\"#mode-特别说明\" class=\"headerlink\" title=\"mode 特别说明\"></a><code>mode</code> 特别说明</h2><p><code>mode</code> 项其实是 <code>nodelay</code>、<code>interval</code>、<code>resend</code>、<code>nc</code> 4项的一个组合。它们的对应关系是：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">mode</th>\n<th align=\"left\">nodelay</th>\n<th align=\"left\">interval</th>\n<th align=\"left\">resend</th>\n<th align=\"left\">nc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">normal</td>\n<td align=\"left\">0</td>\n<td align=\"left\">40</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">fast</td>\n<td align=\"left\">0</td>\n<td align=\"left\">30</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">fast1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">20</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">fast2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody></table>\n<p>如果不满意于自带的4个<code>mode</code>。可以将<code>mode</code>设置为<code>manual</code>。然后就能手动定制这4项参数了！</p>\n"},{"title":"Java多个异步任务转同步","date":"2020-03-10T07:12:39.000Z","_content":"\nJava[kotlin]对于异步的网络请求，一般采用回调来实现异步！\n虽然，像`OkHttp`库，已经支持到了同步，但偶尔还是会碰到两种绕不过的情况：\n- 依然有很多必然是异步的场景无法绕过。如：Android的请求权限、调用相机等等。\n- 多任务并发控制。\n    - 并发。如：N个线程并发执行任务。当N个任务全部执行完后，再执行后续逻辑。\n    - 可控的并发。如：有N个任务，在M个线程中并发执行。\n\n> 这里我要绕开“线程同步锁”方案。这东西写法纷繁冗长，且考验“智商”。\n\n# 异步\n\n 单个异步不会让代码书写得多么考验智商。当数量变成：`x`后。问题就变得不一样了。如：\n\n- 假设一个前提：某业务必须使用回调来完成一次请求，现有`n`个请求，逐个完成。\n\n异步实现的代码样例：\n\n```kotlin\nclass Worker{\n    private var isSync = false\n    fun sync(completion: () -> Unit) {\n        if (!isSync) {\n            isSync = true\n            val lastId = database.table(\"msgs\").getLast()?.msg_id ?: \"\"\n            Thread(Runnable {\n                try {\n                       fetchNext(lastId, completion)\n                } catch (e: Exception) {\n                       e.printStackTrace()\n                       isSync = false\n                }\n            }, \"SyncWorker\").start()\n        }\n    }\n\n    private fun fetchNext(lastId: String, completion: () -> Unit) {\n        val req = NewRequest()\n        req.query.msgId = lastId\n        Client.send(req.build()) { r, ok ->\n            if (ok) {\n                if (!r.hasNext) {\n                    // 数据已取完\n                    completion()\n                    isSync = false\n                } else {\n                    // 未取完，继续循环\n                    val msg = NewMsgRow(r.body)\n                    database.table(\"msgs\").insert(msg)\n                    fetchNext(m.msgId, completion)\n                }\n            } else {\n                // 请求出错，整个放弃!\n                completion()\n                isSync = false\n            }\n        }\n    }\n}\n\n```\n\n## 异步的缺点\n- 烧脑，也是培养Bug的温床！\n- 容易滋生Bug，自然难于调试。且难以确保没有bug！\n- 递归导致调用栈过深，吃不必要的内存！\n\n如果是同步的情况下，代码会很优雅。\n\n同步代码样例：\n\n```kotlin\nclass Worker{\n    private var isSync = false\n    fun sync() {\n        isSync = true\n        var ok = false\n        while(!ok){\n            try{\n                val rs = NewReuest().query(\"msgId\",id).send()\n                val msg = NewMsgRow(rs.body)\n                database.table(\"msgs\").insert(msg)\n            }catch(e:Exception){\n                ok = true\n            }\n        }\n    }\n}\n\n```\n\n## 异步转同步\n一般情况下，操作系统还有个概念可用，那就是：“信号和量”。\nJava的`Semaphore`，在使用 `await`时，需要调整JVM的option；不是个好选择！\n不过，Java还提供了另一个东西：`CountDownLatch`可供选择。它的`await`就可以正常使用。\n\n代码样例：\n```kotlin\n\nclass Worker{\n\n    // 异步转同步\n    @Throws(Exception::class)\n    fun req(id:String):Body{\n        // 创建一个只要一个信号的锁\n        val c = CountDownLatch(1)\n        var e:Exception? = null\n        var rs:Body = EmptyBody()\n\n        Client.send(NewRequest()) { r, err ->\n            if(err) e = err\n            else rs = r.body\n            // 释放锁\n            c.countDown()\n        }\n        // 等待信号\n        c.await()\n        if (e != null) throw e!!\n        return rs!!\n    }\n}\n```\n\n# 异步并发控制\n这个信号量的`Semaphore`就可以适用了。\n\n用法举例：20个任务，5个并发\n\n代码样例：\n```kotlin\n\nclass Worker{\n    fun mutiTask(){\n        // 创建5个车道\n        val s = Semaphore(5)\n        for (i in 0..20){\n            // 等绿灯\n            s.acquire()\n            Client.req(NewRequest()){rs,err ->\n                // 处理rs,err....\n                \n                // 通过后释放车道\n                s.release()\n            }\n        }\n    }\n}\n```\n","source":"_posts/java-async-sync.md","raw":"---\ntitle: Java多个异步任务转同步\ndate: 2020-03-10 15:12:39\ntags: [Java, kotlin, async]\n---\n\nJava[kotlin]对于异步的网络请求，一般采用回调来实现异步！\n虽然，像`OkHttp`库，已经支持到了同步，但偶尔还是会碰到两种绕不过的情况：\n- 依然有很多必然是异步的场景无法绕过。如：Android的请求权限、调用相机等等。\n- 多任务并发控制。\n    - 并发。如：N个线程并发执行任务。当N个任务全部执行完后，再执行后续逻辑。\n    - 可控的并发。如：有N个任务，在M个线程中并发执行。\n\n> 这里我要绕开“线程同步锁”方案。这东西写法纷繁冗长，且考验“智商”。\n\n# 异步\n\n 单个异步不会让代码书写得多么考验智商。当数量变成：`x`后。问题就变得不一样了。如：\n\n- 假设一个前提：某业务必须使用回调来完成一次请求，现有`n`个请求，逐个完成。\n\n异步实现的代码样例：\n\n```kotlin\nclass Worker{\n    private var isSync = false\n    fun sync(completion: () -> Unit) {\n        if (!isSync) {\n            isSync = true\n            val lastId = database.table(\"msgs\").getLast()?.msg_id ?: \"\"\n            Thread(Runnable {\n                try {\n                       fetchNext(lastId, completion)\n                } catch (e: Exception) {\n                       e.printStackTrace()\n                       isSync = false\n                }\n            }, \"SyncWorker\").start()\n        }\n    }\n\n    private fun fetchNext(lastId: String, completion: () -> Unit) {\n        val req = NewRequest()\n        req.query.msgId = lastId\n        Client.send(req.build()) { r, ok ->\n            if (ok) {\n                if (!r.hasNext) {\n                    // 数据已取完\n                    completion()\n                    isSync = false\n                } else {\n                    // 未取完，继续循环\n                    val msg = NewMsgRow(r.body)\n                    database.table(\"msgs\").insert(msg)\n                    fetchNext(m.msgId, completion)\n                }\n            } else {\n                // 请求出错，整个放弃!\n                completion()\n                isSync = false\n            }\n        }\n    }\n}\n\n```\n\n## 异步的缺点\n- 烧脑，也是培养Bug的温床！\n- 容易滋生Bug，自然难于调试。且难以确保没有bug！\n- 递归导致调用栈过深，吃不必要的内存！\n\n如果是同步的情况下，代码会很优雅。\n\n同步代码样例：\n\n```kotlin\nclass Worker{\n    private var isSync = false\n    fun sync() {\n        isSync = true\n        var ok = false\n        while(!ok){\n            try{\n                val rs = NewReuest().query(\"msgId\",id).send()\n                val msg = NewMsgRow(rs.body)\n                database.table(\"msgs\").insert(msg)\n            }catch(e:Exception){\n                ok = true\n            }\n        }\n    }\n}\n\n```\n\n## 异步转同步\n一般情况下，操作系统还有个概念可用，那就是：“信号和量”。\nJava的`Semaphore`，在使用 `await`时，需要调整JVM的option；不是个好选择！\n不过，Java还提供了另一个东西：`CountDownLatch`可供选择。它的`await`就可以正常使用。\n\n代码样例：\n```kotlin\n\nclass Worker{\n\n    // 异步转同步\n    @Throws(Exception::class)\n    fun req(id:String):Body{\n        // 创建一个只要一个信号的锁\n        val c = CountDownLatch(1)\n        var e:Exception? = null\n        var rs:Body = EmptyBody()\n\n        Client.send(NewRequest()) { r, err ->\n            if(err) e = err\n            else rs = r.body\n            // 释放锁\n            c.countDown()\n        }\n        // 等待信号\n        c.await()\n        if (e != null) throw e!!\n        return rs!!\n    }\n}\n```\n\n# 异步并发控制\n这个信号量的`Semaphore`就可以适用了。\n\n用法举例：20个任务，5个并发\n\n代码样例：\n```kotlin\n\nclass Worker{\n    fun mutiTask(){\n        // 创建5个车道\n        val s = Semaphore(5)\n        for (i in 0..20){\n            // 等绿灯\n            s.acquire()\n            Client.req(NewRequest()){rs,err ->\n                // 处理rs,err....\n                \n                // 通过后释放车道\n                s.release()\n            }\n        }\n    }\n}\n```\n","slug":"java-async-sync","published":1,"updated":"2021-01-06T09:56:16.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rg000r2aah72sr57fa","content":"<p>Java[kotlin]对于异步的网络请求，一般采用回调来实现异步！<br>虽然，像<code>OkHttp</code>库，已经支持到了同步，但偶尔还是会碰到两种绕不过的情况：</p>\n<ul>\n<li>依然有很多必然是异步的场景无法绕过。如：Android的请求权限、调用相机等等。</li>\n<li>多任务并发控制。<ul>\n<li>并发。如：N个线程并发执行任务。当N个任务全部执行完后，再执行后续逻辑。</li>\n<li>可控的并发。如：有N个任务，在M个线程中并发执行。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里我要绕开“线程同步锁”方案。这东西写法纷繁冗长，且考验“智商”。</p>\n</blockquote>\n<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h1><p> 单个异步不会让代码书写得多么考验智商。当数量变成：<code>x</code>后。问题就变得不一样了。如：</p>\n<ul>\n<li>假设一个前提：某业务必须使用回调来完成一次请求，现有<code>n</code>个请求，逐个完成。</li>\n</ul>\n<p>异步实现的代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sync</span><span class=\"params\">(completion: () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSync) &#123;</span><br><span class=\"line\">            isSync = <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> lastId = database.table(<span class=\"string\">&quot;msgs&quot;</span>).getLast()?.msg_id ?: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            Thread(Runnable &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                       fetchNext(lastId, completion)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                       e.printStackTrace()</span><br><span class=\"line\">                       isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;SyncWorker&quot;</span>).start()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchNext</span><span class=\"params\">(lastId: <span class=\"type\">String</span>, completion: () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> req = NewRequest()</span><br><span class=\"line\">        req.query.msgId = lastId</span><br><span class=\"line\">        Client.send(req.build()) &#123; r, ok -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ok) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!r.hasNext) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 数据已取完</span></span><br><span class=\"line\">                    completion()</span><br><span class=\"line\">                    isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 未取完，继续循环</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> msg = NewMsgRow(r.body)</span><br><span class=\"line\">                    database.table(<span class=\"string\">&quot;msgs&quot;</span>).insert(msg)</span><br><span class=\"line\">                    fetchNext(m.msgId, completion)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 请求出错，整个放弃!</span></span><br><span class=\"line\">                completion()</span><br><span class=\"line\">                isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"异步的缺点\"><a href=\"#异步的缺点\" class=\"headerlink\" title=\"异步的缺点\"></a>异步的缺点</h2><ul>\n<li>烧脑，也是培养Bug的温床！</li>\n<li>容易滋生Bug，自然难于调试。且难以确保没有bug！</li>\n<li>递归导致调用栈过深，吃不必要的内存！</li>\n</ul>\n<p>如果是同步的情况下，代码会很优雅。</p>\n<p>同步代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sync</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        isSync = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ok = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!ok)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> rs = NewReuest().query(<span class=\"string\">&quot;msgId&quot;</span>,id).send()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> msg = NewMsgRow(rs.body)</span><br><span class=\"line\">                database.table(<span class=\"string\">&quot;msgs&quot;</span>).insert(msg)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e:Exception)&#123;</span><br><span class=\"line\">                ok = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"异步转同步\"><a href=\"#异步转同步\" class=\"headerlink\" title=\"异步转同步\"></a>异步转同步</h2><p>一般情况下，操作系统还有个概念可用，那就是：“信号和量”。<br>Java的<code>Semaphore</code>，在使用 <code>await</code>时，需要调整JVM的option；不是个好选择！<br>不过，Java还提供了另一个东西：<code>CountDownLatch</code>可供选择。它的<code>await</code>就可以正常使用。</p>\n<p>代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步转同步</span></span><br><span class=\"line\">    <span class=\"meta\">@Throws(Exception::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">req</span><span class=\"params\">(id:<span class=\"type\">String</span>)</span></span>:Body&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个只要一个信号的锁</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> c = CountDownLatch(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e:Exception? = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> rs:Body = EmptyBody()</span><br><span class=\"line\"></span><br><span class=\"line\">        Client.send(NewRequest()) &#123; r, err -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err) e = err</span><br><span class=\"line\">            <span class=\"keyword\">else</span> rs = r.body</span><br><span class=\"line\">            <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">            c.countDown()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 等待信号</span></span><br><span class=\"line\">        c.await()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> e!!</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs!!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"异步并发控制\"><a href=\"#异步并发控制\" class=\"headerlink\" title=\"异步并发控制\"></a>异步并发控制</h1><p>这个信号量的<code>Semaphore</code>就可以适用了。</p>\n<p>用法举例：20个任务，5个并发</p>\n<p>代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mutiTask</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建5个车道</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> s = Semaphore(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.20</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等绿灯</span></span><br><span class=\"line\">            s.acquire()</span><br><span class=\"line\">            Client.req(NewRequest())&#123;rs,err -&gt;</span><br><span class=\"line\">                <span class=\"comment\">// 处理rs,err....</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 通过后释放车道</span></span><br><span class=\"line\">                s.release()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Java[kotlin]对于异步的网络请求，一般采用回调来实现异步！<br>虽然，像<code>OkHttp</code>库，已经支持到了同步，但偶尔还是会碰到两种绕不过的情况：</p>\n<ul>\n<li>依然有很多必然是异步的场景无法绕过。如：Android的请求权限、调用相机等等。</li>\n<li>多任务并发控制。<ul>\n<li>并发。如：N个线程并发执行任务。当N个任务全部执行完后，再执行后续逻辑。</li>\n<li>可控的并发。如：有N个任务，在M个线程中并发执行。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里我要绕开“线程同步锁”方案。这东西写法纷繁冗长，且考验“智商”。</p>\n</blockquote>\n<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h1><p> 单个异步不会让代码书写得多么考验智商。当数量变成：<code>x</code>后。问题就变得不一样了。如：</p>\n<ul>\n<li>假设一个前提：某业务必须使用回调来完成一次请求，现有<code>n</code>个请求，逐个完成。</li>\n</ul>\n<p>异步实现的代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sync</span><span class=\"params\">(completion: () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSync) &#123;</span><br><span class=\"line\">            isSync = <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> lastId = database.table(<span class=\"string\">&quot;msgs&quot;</span>).getLast()?.msg_id ?: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            Thread(Runnable &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                       fetchNext(lastId, completion)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                       e.printStackTrace()</span><br><span class=\"line\">                       isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;SyncWorker&quot;</span>).start()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchNext</span><span class=\"params\">(lastId: <span class=\"type\">String</span>, completion: () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> req = NewRequest()</span><br><span class=\"line\">        req.query.msgId = lastId</span><br><span class=\"line\">        Client.send(req.build()) &#123; r, ok -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ok) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!r.hasNext) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 数据已取完</span></span><br><span class=\"line\">                    completion()</span><br><span class=\"line\">                    isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 未取完，继续循环</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> msg = NewMsgRow(r.body)</span><br><span class=\"line\">                    database.table(<span class=\"string\">&quot;msgs&quot;</span>).insert(msg)</span><br><span class=\"line\">                    fetchNext(m.msgId, completion)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 请求出错，整个放弃!</span></span><br><span class=\"line\">                completion()</span><br><span class=\"line\">                isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"异步的缺点\"><a href=\"#异步的缺点\" class=\"headerlink\" title=\"异步的缺点\"></a>异步的缺点</h2><ul>\n<li>烧脑，也是培养Bug的温床！</li>\n<li>容易滋生Bug，自然难于调试。且难以确保没有bug！</li>\n<li>递归导致调用栈过深，吃不必要的内存！</li>\n</ul>\n<p>如果是同步的情况下，代码会很优雅。</p>\n<p>同步代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isSync = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sync</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        isSync = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ok = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!ok)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> rs = NewReuest().query(<span class=\"string\">&quot;msgId&quot;</span>,id).send()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> msg = NewMsgRow(rs.body)</span><br><span class=\"line\">                database.table(<span class=\"string\">&quot;msgs&quot;</span>).insert(msg)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e:Exception)&#123;</span><br><span class=\"line\">                ok = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"异步转同步\"><a href=\"#异步转同步\" class=\"headerlink\" title=\"异步转同步\"></a>异步转同步</h2><p>一般情况下，操作系统还有个概念可用，那就是：“信号和量”。<br>Java的<code>Semaphore</code>，在使用 <code>await</code>时，需要调整JVM的option；不是个好选择！<br>不过，Java还提供了另一个东西：<code>CountDownLatch</code>可供选择。它的<code>await</code>就可以正常使用。</p>\n<p>代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步转同步</span></span><br><span class=\"line\">    <span class=\"meta\">@Throws(Exception::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">req</span><span class=\"params\">(id:<span class=\"type\">String</span>)</span></span>:Body&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个只要一个信号的锁</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> c = CountDownLatch(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e:Exception? = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> rs:Body = EmptyBody()</span><br><span class=\"line\"></span><br><span class=\"line\">        Client.send(NewRequest()) &#123; r, err -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err) e = err</span><br><span class=\"line\">            <span class=\"keyword\">else</span> rs = r.body</span><br><span class=\"line\">            <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">            c.countDown()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 等待信号</span></span><br><span class=\"line\">        c.await()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> e!!</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs!!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"异步并发控制\"><a href=\"#异步并发控制\" class=\"headerlink\" title=\"异步并发控制\"></a>异步并发控制</h1><p>这个信号量的<code>Semaphore</code>就可以适用了。</p>\n<p>用法举例：20个任务，5个并发</p>\n<p>代码样例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mutiTask</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建5个车道</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> s = Semaphore(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.20</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等绿灯</span></span><br><span class=\"line\">            s.acquire()</span><br><span class=\"line\">            Client.req(NewRequest())&#123;rs,err -&gt;</span><br><span class=\"line\">                <span class=\"comment\">// 处理rs,err....</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 通过后释放车道</span></span><br><span class=\"line\">                s.release()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Laravel Notification 测评","date":"2016-12-15T05:21:15.000Z","_content":"\nLaravel 5.3 新出了个叫 `Notification` 的消息通知功能！先总，后分吧。\n\n## 适用场景\n它相对`event`的优点是：更简单也更好地隔离了不同的业务代码。且一次触发，多种'姿势'运行，不同'姿势'代码独立。\n\n适合于发比较复杂的跨站消息，如：邮件、同步weibo、OA系统、第三方个人笔记Ever-note等。不只适合单发，还适合不同渠道并发。比如：同一个消息同时发送前边列出的所有渠道。\n\n它还有个优点是，也能做一个Log，记录所有的发送结果。还能支持检测并记录：**接收者对消息的查看状态**。\n\n不足的地方是：默认支持的实用工具像`mail`、`nexmo`、`slack`。除了`mail`，其它两个，我天朝子民都用不上。只能用点本地的渠道，如：`database`、`broadcast`。\n虽然默认的有点少，但官方还搞了个[第三方消息集合的网站](http://laravel-notification-channels.com/)。在这里能找到一堆奇葩的，常见的，拿来就能用的第三方消息扩展。**但是**，依旧很少有我天朝可以直接用的。乐观地看：给了你我一个完善的机会！悲观的看：自己写才是王道！总之：还是自己写！\n\n\n## 对象介绍\n相关的类有：\n\n`Notification`：发出一个消息后，业务就交给它了。这里生成适合不同渠道的消息，并交给不同渠道去发送。\n\n`Channel`：这里定义这个渠道具体的发送流程\n\n`Message`：这是个格式化不同消息的助手类。如果消息体简单，可以不用它，直接在`Notification`中拼合消息体。如果消息体复杂，就有必要专门为格式化这个消息写一个`Message`Builder Helper。\n\n### 类结构\n`Notification` 这个类laravel 的 artisan 有提供make\n\n```text\nclass DemoNotification extends Notification\n{\n    use Queueable;\n    \n    /**\n     * Create a new notification instance.\n     *\n     */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n     * 这里返回要发多少个渠道\n     *\n     * @param  mixed  $notifiable\n     * @return array\n     */\n    public function via($notifiable)\n    {\n        return [DemoChannel::class];\n    }\n\n    /**\n     * 后边挨个渠道给生成消息，如有必要，使用Message助手\n     * 这里的命名默契地使用 'to' + 渠道名\n     */\n    \n    \n    \n    public function toDemo($notifiable)\n    {\n        return (new DemoMessage)\n                ->title('这里是标题')\n                ->body('这里是消息主体')\n                ->from('发送者');\n    }\n    \n    \n}\n```\n\n`Channel` 每个渠道必须实现一个send($notifiable,Notification $notification) 动作\n\n```text\nclass DemoChannel\n{\n    public function send($notifiable,Notification $notification){\n        $msg = $notification->toDemo($notifiable);\n        // 后边去实现怎么把这个$msg给扔出去！\n    }\n\n}\n```\n\n`Message` 命名默契地使用'Message'结尾，这个类没有约束，没有继承。完全按需发挥！\n\n```text\nclass DemoMessage\n{\n    // 按不同消息的需要自己实现啦，这个类没有约束\n    public function title($title)\n    {}\n    public function body($body)\n    {}\n}\n```","source":"_posts/laravel-notification.md","raw":"---\ntitle: Laravel Notification 测评\ndate: 2016-12-15 13:21:15\ntags: [laravel, notification]\n---\n\nLaravel 5.3 新出了个叫 `Notification` 的消息通知功能！先总，后分吧。\n\n## 适用场景\n它相对`event`的优点是：更简单也更好地隔离了不同的业务代码。且一次触发，多种'姿势'运行，不同'姿势'代码独立。\n\n适合于发比较复杂的跨站消息，如：邮件、同步weibo、OA系统、第三方个人笔记Ever-note等。不只适合单发，还适合不同渠道并发。比如：同一个消息同时发送前边列出的所有渠道。\n\n它还有个优点是，也能做一个Log，记录所有的发送结果。还能支持检测并记录：**接收者对消息的查看状态**。\n\n不足的地方是：默认支持的实用工具像`mail`、`nexmo`、`slack`。除了`mail`，其它两个，我天朝子民都用不上。只能用点本地的渠道，如：`database`、`broadcast`。\n虽然默认的有点少，但官方还搞了个[第三方消息集合的网站](http://laravel-notification-channels.com/)。在这里能找到一堆奇葩的，常见的，拿来就能用的第三方消息扩展。**但是**，依旧很少有我天朝可以直接用的。乐观地看：给了你我一个完善的机会！悲观的看：自己写才是王道！总之：还是自己写！\n\n\n## 对象介绍\n相关的类有：\n\n`Notification`：发出一个消息后，业务就交给它了。这里生成适合不同渠道的消息，并交给不同渠道去发送。\n\n`Channel`：这里定义这个渠道具体的发送流程\n\n`Message`：这是个格式化不同消息的助手类。如果消息体简单，可以不用它，直接在`Notification`中拼合消息体。如果消息体复杂，就有必要专门为格式化这个消息写一个`Message`Builder Helper。\n\n### 类结构\n`Notification` 这个类laravel 的 artisan 有提供make\n\n```text\nclass DemoNotification extends Notification\n{\n    use Queueable;\n    \n    /**\n     * Create a new notification instance.\n     *\n     */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n     * 这里返回要发多少个渠道\n     *\n     * @param  mixed  $notifiable\n     * @return array\n     */\n    public function via($notifiable)\n    {\n        return [DemoChannel::class];\n    }\n\n    /**\n     * 后边挨个渠道给生成消息，如有必要，使用Message助手\n     * 这里的命名默契地使用 'to' + 渠道名\n     */\n    \n    \n    \n    public function toDemo($notifiable)\n    {\n        return (new DemoMessage)\n                ->title('这里是标题')\n                ->body('这里是消息主体')\n                ->from('发送者');\n    }\n    \n    \n}\n```\n\n`Channel` 每个渠道必须实现一个send($notifiable,Notification $notification) 动作\n\n```text\nclass DemoChannel\n{\n    public function send($notifiable,Notification $notification){\n        $msg = $notification->toDemo($notifiable);\n        // 后边去实现怎么把这个$msg给扔出去！\n    }\n\n}\n```\n\n`Message` 命名默契地使用'Message'结尾，这个类没有约束，没有继承。完全按需发挥！\n\n```text\nclass DemoMessage\n{\n    // 按不同消息的需要自己实现啦，这个类没有约束\n    public function title($title)\n    {}\n    public function body($body)\n    {}\n}\n```","slug":"laravel-notification","published":1,"updated":"2021-01-06T09:56:16.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rh000u2aahhumggn4x","content":"<p>Laravel 5.3 新出了个叫 <code>Notification</code> 的消息通知功能！先总，后分吧。</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>它相对<code>event</code>的优点是：更简单也更好地隔离了不同的业务代码。且一次触发，多种’姿势’运行，不同’姿势’代码独立。</p>\n<p>适合于发比较复杂的跨站消息，如：邮件、同步weibo、OA系统、第三方个人笔记Ever-note等。不只适合单发，还适合不同渠道并发。比如：同一个消息同时发送前边列出的所有渠道。</p>\n<p>它还有个优点是，也能做一个Log，记录所有的发送结果。还能支持检测并记录：<strong>接收者对消息的查看状态</strong>。</p>\n<p>不足的地方是：默认支持的实用工具像<code>mail</code>、<code>nexmo</code>、<code>slack</code>。除了<code>mail</code>，其它两个，我天朝子民都用不上。只能用点本地的渠道，如：<code>database</code>、<code>broadcast</code>。<br>虽然默认的有点少，但官方还搞了个<a class=\"link\"   href=\"http://laravel-notification-channels.com/\" >第三方消息集合的网站<i class=\"fas fa-external-link-alt\"></i></a>。在这里能找到一堆奇葩的，常见的，拿来就能用的第三方消息扩展。<strong>但是</strong>，依旧很少有我天朝可以直接用的。乐观地看：给了你我一个完善的机会！悲观的看：自己写才是王道！总之：还是自己写！</p>\n<h2 id=\"对象介绍\"><a href=\"#对象介绍\" class=\"headerlink\" title=\"对象介绍\"></a>对象介绍</h2><p>相关的类有：</p>\n<p><code>Notification</code>：发出一个消息后，业务就交给它了。这里生成适合不同渠道的消息，并交给不同渠道去发送。</p>\n<p><code>Channel</code>：这里定义这个渠道具体的发送流程</p>\n<p><code>Message</code>：这是个格式化不同消息的助手类。如果消息体简单，可以不用它，直接在<code>Notification</code>中拼合消息体。如果消息体复杂，就有必要专门为格式化这个消息写一个<code>Message</code>Builder Helper。</p>\n<h3 id=\"类结构\"><a href=\"#类结构\" class=\"headerlink\" title=\"类结构\"></a>类结构</h3><p><code>Notification</code> 这个类laravel 的 artisan 有提供make</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoNotification extends Notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use Queueable;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new notification instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 这里返回要发多少个渠道</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  mixed  $notifiable</span><br><span class=\"line\">     * @return array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function via($notifiable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return [DemoChannel::class];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 后边挨个渠道给生成消息，如有必要，使用Message助手</span><br><span class=\"line\">     * 这里的命名默契地使用 &#x27;to&#x27; + 渠道名</span><br><span class=\"line\">     */</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    public function toDemo($notifiable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return (new DemoMessage)</span><br><span class=\"line\">                -&gt;title(&#x27;这里是标题&#x27;)</span><br><span class=\"line\">                -&gt;body(&#x27;这里是消息主体&#x27;)</span><br><span class=\"line\">                -&gt;from(&#x27;发送者&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Channel</code> 每个渠道必须实现一个send($notifiable,Notification $notification) 动作</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoChannel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function send($notifiable,Notification $notification)&#123;</span><br><span class=\"line\">        $msg = $notification-&gt;toDemo($notifiable);</span><br><span class=\"line\">        // 后边去实现怎么把这个$msg给扔出去！</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Message</code> 命名默契地使用’Message’结尾，这个类没有约束，没有继承。完全按需发挥！</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoMessage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 按不同消息的需要自己实现啦，这个类没有约束</span><br><span class=\"line\">    public function title($title)</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">    public function body($body)</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Laravel 5.3 新出了个叫 <code>Notification</code> 的消息通知功能！先总，后分吧。</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>它相对<code>event</code>的优点是：更简单也更好地隔离了不同的业务代码。且一次触发，多种’姿势’运行，不同’姿势’代码独立。</p>\n<p>适合于发比较复杂的跨站消息，如：邮件、同步weibo、OA系统、第三方个人笔记Ever-note等。不只适合单发，还适合不同渠道并发。比如：同一个消息同时发送前边列出的所有渠道。</p>\n<p>它还有个优点是，也能做一个Log，记录所有的发送结果。还能支持检测并记录：<strong>接收者对消息的查看状态</strong>。</p>\n<p>不足的地方是：默认支持的实用工具像<code>mail</code>、<code>nexmo</code>、<code>slack</code>。除了<code>mail</code>，其它两个，我天朝子民都用不上。只能用点本地的渠道，如：<code>database</code>、<code>broadcast</code>。<br>虽然默认的有点少，但官方还搞了个<a class=\"link\"   href=\"http://laravel-notification-channels.com/\" >第三方消息集合的网站<i class=\"fas fa-external-link-alt\"></i></a>。在这里能找到一堆奇葩的，常见的，拿来就能用的第三方消息扩展。<strong>但是</strong>，依旧很少有我天朝可以直接用的。乐观地看：给了你我一个完善的机会！悲观的看：自己写才是王道！总之：还是自己写！</p>\n<h2 id=\"对象介绍\"><a href=\"#对象介绍\" class=\"headerlink\" title=\"对象介绍\"></a>对象介绍</h2><p>相关的类有：</p>\n<p><code>Notification</code>：发出一个消息后，业务就交给它了。这里生成适合不同渠道的消息，并交给不同渠道去发送。</p>\n<p><code>Channel</code>：这里定义这个渠道具体的发送流程</p>\n<p><code>Message</code>：这是个格式化不同消息的助手类。如果消息体简单，可以不用它，直接在<code>Notification</code>中拼合消息体。如果消息体复杂，就有必要专门为格式化这个消息写一个<code>Message</code>Builder Helper。</p>\n<h3 id=\"类结构\"><a href=\"#类结构\" class=\"headerlink\" title=\"类结构\"></a>类结构</h3><p><code>Notification</code> 这个类laravel 的 artisan 有提供make</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoNotification extends Notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use Queueable;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new notification instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 这里返回要发多少个渠道</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  mixed  $notifiable</span><br><span class=\"line\">     * @return array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function via($notifiable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return [DemoChannel::class];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 后边挨个渠道给生成消息，如有必要，使用Message助手</span><br><span class=\"line\">     * 这里的命名默契地使用 &#x27;to&#x27; + 渠道名</span><br><span class=\"line\">     */</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    public function toDemo($notifiable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return (new DemoMessage)</span><br><span class=\"line\">                -&gt;title(&#x27;这里是标题&#x27;)</span><br><span class=\"line\">                -&gt;body(&#x27;这里是消息主体&#x27;)</span><br><span class=\"line\">                -&gt;from(&#x27;发送者&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Channel</code> 每个渠道必须实现一个send($notifiable,Notification $notification) 动作</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoChannel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function send($notifiable,Notification $notification)&#123;</span><br><span class=\"line\">        $msg = $notification-&gt;toDemo($notifiable);</span><br><span class=\"line\">        // 后边去实现怎么把这个$msg给扔出去！</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Message</code> 命名默契地使用’Message’结尾，这个类没有约束，没有继承。完全按需发挥！</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoMessage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 按不同消息的需要自己实现啦，这个类没有约束</span><br><span class=\"line\">    public function title($title)</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">    public function body($body)</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"laravel 队列之坑","date":"2016-12-13T15:21:09.000Z","_content":"\n批量发消息之类的工作，很是适合放到后端，慢慢处理。那使用laravel的Queue和Job，就成为必须。\n\n简单过了一下文档后，就写好了发布上线了。感觉确是不错。\n\n不过近期突然爆了一个奇怪的问题，有些群发总是没完没了的重复发送。但是当我测试时，总是一切正常！\n\n一时蒙了个逼！又是debug（队列的debug很是繁琐低效！）又是Google又是百度。一翻搜罗，有人说是时间的问题。\n\n60s!\n\n队列将一个任务发出后，如果60s内没执行完，就会认为处理过程异常。它会把这个任务再重新执行一遍！\n\n嘿嘿了！\n\n翻了下源码，在`InteractsWithQueue`的`trait`里发现了一个`delete`方法！\n\n在我的`Job`开始`handle`后，先执行一下`$this->delete();`把这个任务删除。这样即便过了60s后，它想重新启动也没有了。这问题也就暂时解决了！\n\n但是！如果这个任务处理过程中出现异常，也会丧失2次重新执行的机会。所以*Laravel的Job中最好只处理一件简单的原子化的事。不要在批量里处理批量。*","source":"_posts/laravel-queue.md","raw":"---\ntitle: laravel 队列之坑\ndate: 2016-12-13 23:21:09\ntags: [laravel, Job, Queue]\n---\n\n批量发消息之类的工作，很是适合放到后端，慢慢处理。那使用laravel的Queue和Job，就成为必须。\n\n简单过了一下文档后，就写好了发布上线了。感觉确是不错。\n\n不过近期突然爆了一个奇怪的问题，有些群发总是没完没了的重复发送。但是当我测试时，总是一切正常！\n\n一时蒙了个逼！又是debug（队列的debug很是繁琐低效！）又是Google又是百度。一翻搜罗，有人说是时间的问题。\n\n60s!\n\n队列将一个任务发出后，如果60s内没执行完，就会认为处理过程异常。它会把这个任务再重新执行一遍！\n\n嘿嘿了！\n\n翻了下源码，在`InteractsWithQueue`的`trait`里发现了一个`delete`方法！\n\n在我的`Job`开始`handle`后，先执行一下`$this->delete();`把这个任务删除。这样即便过了60s后，它想重新启动也没有了。这问题也就暂时解决了！\n\n但是！如果这个任务处理过程中出现异常，也会丧失2次重新执行的机会。所以*Laravel的Job中最好只处理一件简单的原子化的事。不要在批量里处理批量。*","slug":"laravel-queue","published":1,"updated":"2021-01-06T09:56:16.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rh000v2aah2lsgdo2v","content":"<p>批量发消息之类的工作，很是适合放到后端，慢慢处理。那使用laravel的Queue和Job，就成为必须。</p>\n<p>简单过了一下文档后，就写好了发布上线了。感觉确是不错。</p>\n<p>不过近期突然爆了一个奇怪的问题，有些群发总是没完没了的重复发送。但是当我测试时，总是一切正常！</p>\n<p>一时蒙了个逼！又是debug（队列的debug很是繁琐低效！）又是Google又是百度。一翻搜罗，有人说是时间的问题。</p>\n<p>60s!</p>\n<p>队列将一个任务发出后，如果60s内没执行完，就会认为处理过程异常。它会把这个任务再重新执行一遍！</p>\n<p>嘿嘿了！</p>\n<p>翻了下源码，在<code>InteractsWithQueue</code>的<code>trait</code>里发现了一个<code>delete</code>方法！</p>\n<p>在我的<code>Job</code>开始<code>handle</code>后，先执行一下<code>$this-&gt;delete();</code>把这个任务删除。这样即便过了60s后，它想重新启动也没有了。这问题也就暂时解决了！</p>\n<p>但是！如果这个任务处理过程中出现异常，也会丧失2次重新执行的机会。所以<em>Laravel的Job中最好只处理一件简单的原子化的事。不要在批量里处理批量。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>批量发消息之类的工作，很是适合放到后端，慢慢处理。那使用laravel的Queue和Job，就成为必须。</p>\n<p>简单过了一下文档后，就写好了发布上线了。感觉确是不错。</p>\n<p>不过近期突然爆了一个奇怪的问题，有些群发总是没完没了的重复发送。但是当我测试时，总是一切正常！</p>\n<p>一时蒙了个逼！又是debug（队列的debug很是繁琐低效！）又是Google又是百度。一翻搜罗，有人说是时间的问题。</p>\n<p>60s!</p>\n<p>队列将一个任务发出后，如果60s内没执行完，就会认为处理过程异常。它会把这个任务再重新执行一遍！</p>\n<p>嘿嘿了！</p>\n<p>翻了下源码，在<code>InteractsWithQueue</code>的<code>trait</code>里发现了一个<code>delete</code>方法！</p>\n<p>在我的<code>Job</code>开始<code>handle</code>后，先执行一下<code>$this-&gt;delete();</code>把这个任务删除。这样即便过了60s后，它想重新启动也没有了。这问题也就暂时解决了！</p>\n<p>但是！如果这个任务处理过程中出现异常，也会丧失2次重新执行的机会。所以<em>Laravel的Job中最好只处理一件简单的原子化的事。不要在批量里处理批量。</em></p>\n"},{"title":"linux常用Shell命令","date":"2021-01-18T06:07:48.000Z","_content":"\n- 找出指定文件夹下指定类型的所有文件，并全部删除\n```shell\nfind /home/user/mydir -name *.png | xargs rm -f\n```\n\n- `cmake` 安装后,如何卸载\n```shell\nxargs rm < install_manifest.txt\n```\n\n- `tcpdump` 取得HTTP(非HTTPS)的GET请求`header`\n```shell\ntcpdump -i br-lan tcp and host wechat.xhlroi.com and 'tcp[((tcp[12:1] &0xf0) >> 2):4] = 0x47455420' -vv\n```","source":"_posts/linux-cmd.md","raw":"---\ntitle: linux常用Shell命令\ndate: 2021-01-18 14:07:48\ntags: [shell]\n---\n\n- 找出指定文件夹下指定类型的所有文件，并全部删除\n```shell\nfind /home/user/mydir -name *.png | xargs rm -f\n```\n\n- `cmake` 安装后,如何卸载\n```shell\nxargs rm < install_manifest.txt\n```\n\n- `tcpdump` 取得HTTP(非HTTPS)的GET请求`header`\n```shell\ntcpdump -i br-lan tcp and host wechat.xhlroi.com and 'tcp[((tcp[12:1] &0xf0) >> 2):4] = 0x47455420' -vv\n```","slug":"linux-cmd","published":1,"updated":"2021-03-27T03:20:43.861Z","_id":"ckl8zw5ri000x2aah8bj83hr8","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>找出指定文件夹下指定类型的所有文件，并全部删除<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home/user/mydir -name *.png | xargs rm -f</span><br></pre></td></tr></table></figure></li>\n<li><code>cmake</code> 安装后,如何卸载<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xargs rm &lt; install_manifest.txt</span><br></pre></td></tr></table></figure></li>\n<li><code>tcpdump</code> 取得HTTP(非HTTPS)的GET请求<code>header</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i br-lan tcp and host wechat.xhlroi.com and &#x27;tcp[((tcp[12:1] &amp;0xf0) &gt;&gt; 2):4] = 0x47455420&#x27; -vv</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>找出指定文件夹下指定类型的所有文件，并全部删除<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /home/user/mydir -name *.png | xargs rm -f</span><br></pre></td></tr></table></figure></li>\n<li><code>cmake</code> 安装后,如何卸载<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xargs rm &lt; install_manifest.txt</span><br></pre></td></tr></table></figure></li>\n<li><code>tcpdump</code> 取得HTTP(非HTTPS)的GET请求<code>header</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i br-lan tcp and host wechat.xhlroi.com and &#x27;tcp[((tcp[12:1] &amp;0xf0) &gt;&gt; 2):4] = 0x47455420&#x27; -vv</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"使用 Let's Encrypt 给Nginx网站加密","date":"2017-01-12T08:32:11.000Z","_content":"\n使用[certbot](https://certbot.eff.org/#freebsd-nginx)管理证书。\n\n在FreeBSD中安装：\n```text\nsudo pkg install certbot\n```\n获取证书：\n```text\ncertbot certonly --webroot -w /var/www/example -d example.com \n```\n完事后，证书在：\n```text\n/usr/local/etc/letsencrypt/live/example.com/\n```\n目录中。\n\n配置Nginx 虚拟机：\n```text\nserver{\n    listen     80;\n    server_name example.com;\n    root    /var/www/example;\n\n    add_header Cache-Control no-store;\n}\n\nserver {\n    listen  443 ssl;\n    server_name example.com;\n    root /var/www/example;\n\n\n    ssl                  on;\n\n    ssl_certificate /usr/local/etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /usr/local/etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;\n\n}\n```\nOK！完事！最后\n```text\nsudo nginx -t\nsudo nginx -s reload\n```","source":"_posts/lets-encrypt-nginx.md","raw":"---\ntitle: 使用 Let's Encrypt 给Nginx网站加密\ndate: 2017-01-12 16:32:11\ntags: [lets-encrypt, ssl, https, nginx]\n---\n\n使用[certbot](https://certbot.eff.org/#freebsd-nginx)管理证书。\n\n在FreeBSD中安装：\n```text\nsudo pkg install certbot\n```\n获取证书：\n```text\ncertbot certonly --webroot -w /var/www/example -d example.com \n```\n完事后，证书在：\n```text\n/usr/local/etc/letsencrypt/live/example.com/\n```\n目录中。\n\n配置Nginx 虚拟机：\n```text\nserver{\n    listen     80;\n    server_name example.com;\n    root    /var/www/example;\n\n    add_header Cache-Control no-store;\n}\n\nserver {\n    listen  443 ssl;\n    server_name example.com;\n    root /var/www/example;\n\n\n    ssl                  on;\n\n    ssl_certificate /usr/local/etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /usr/local/etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;\n\n}\n```\nOK！完事！最后\n```text\nsudo nginx -t\nsudo nginx -s reload\n```","slug":"lets-encrypt-nginx","published":1,"updated":"2021-01-06T09:56:16.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rj000y2aah9xij90xx","content":"<p>使用<a class=\"link\"   href=\"https://certbot.eff.org/#freebsd-nginx\" >certbot<i class=\"fas fa-external-link-alt\"></i></a>管理证书。</p>\n<p>在FreeBSD中安装：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pkg install certbot</span><br></pre></td></tr></table></figure>\n<p>获取证书：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot certonly --webroot -w /var/www/example -d example.com </span><br></pre></td></tr></table></figure>\n<p>完事后，证书在：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/letsencrypt/live/example.com/</span><br></pre></td></tr></table></figure>\n<p>目录中。</p>\n<p>配置Nginx 虚拟机：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen     80;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    root    /var/www/example;</span><br><span class=\"line\"></span><br><span class=\"line\">    add_header Cache-Control no-store;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443 ssl;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    root /var/www/example;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /usr/local/etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /usr/local/etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OK！完事！最后</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>使用<a class=\"link\"   href=\"https://certbot.eff.org/#freebsd-nginx\" >certbot<i class=\"fas fa-external-link-alt\"></i></a>管理证书。</p>\n<p>在FreeBSD中安装：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pkg install certbot</span><br></pre></td></tr></table></figure>\n<p>获取证书：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot certonly --webroot -w /var/www/example -d example.com </span><br></pre></td></tr></table></figure>\n<p>完事后，证书在：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/letsencrypt/live/example.com/</span><br></pre></td></tr></table></figure>\n<p>目录中。</p>\n<p>配置Nginx 虚拟机：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen     80;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    root    /var/www/example;</span><br><span class=\"line\"></span><br><span class=\"line\">    add_header Cache-Control no-store;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443 ssl;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    root /var/www/example;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /usr/local/etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /usr/local/etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OK！完事！最后</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>"},{"title":"MacOS 命令查询网络端口占用情况","date":"2019-07-13T05:59:33.000Z","_content":"\n## netstat\n\n> netstat -an | grep 80\n\n## lsof\n\n> lsof -i:80\n\n> lsof -c nsqd","source":"_posts/macos-find-port-by-cmd.md","raw":"---\ntitle: MacOS 命令查询网络端口占用情况\ndate: 2019-07-13 13:59:33\ntags: [MacOS, lsof, netstat]\n---\n\n## netstat\n\n> netstat -an | grep 80\n\n## lsof\n\n> lsof -i:80\n\n> lsof -c nsqd","slug":"macos-find-port-by-cmd","published":1,"updated":"2021-01-06T09:56:16.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rm00102aahbffzep9h","content":"<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><blockquote>\n<p>netstat -an | grep 80</p>\n</blockquote>\n<h2 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h2><blockquote>\n<p>lsof -i:80</p>\n</blockquote>\n<blockquote>\n<p>lsof -c nsqd</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><blockquote>\n<p>netstat -an | grep 80</p>\n</blockquote>\n<h2 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h2><blockquote>\n<p>lsof -i:80</p>\n</blockquote>\n<blockquote>\n<p>lsof -c nsqd</p>\n</blockquote>\n"},{"title":"鼠标垫设计","date":"2021-01-26T11:16:53.000Z","_content":"\n![鼠标垫](https://user-images.githubusercontent.com/1764005/105838242-ccfcef80-600a-11eb-8a26-b07c8c7932b4.png)\n\n[鼠标垫.psd.zip](https://github.com/blusewang/blog/files/5872975/psd.zip)","source":"_posts/mouse-pad.md","raw":"---\ntitle: 鼠标垫设计\ndate: 2021-01-26 19:16:53\ntags: [设计]\n---\n\n![鼠标垫](https://user-images.githubusercontent.com/1764005/105838242-ccfcef80-600a-11eb-8a26-b07c8c7932b4.png)\n\n[鼠标垫.psd.zip](https://github.com/blusewang/blog/files/5872975/psd.zip)","slug":"mouse-pad","published":1,"updated":"2021-02-17T04:23:04.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rn00112aah1ydf96s4","content":"<p><img src=\"https://user-images.githubusercontent.com/1764005/105838242-ccfcef80-600a-11eb-8a26-b07c8c7932b4.png\" alt=\"鼠标垫\"></p>\n<p><a class=\"link\"   href=\"https://github.com/blusewang/blog/files/5872975/psd.zip\" >鼠标垫.psd.zip<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://user-images.githubusercontent.com/1764005/105838242-ccfcef80-600a-11eb-8a26-b07c8c7932b4.png\" alt=\"鼠标垫\"></p>\n<p><a class=\"link\"   href=\"https://github.com/blusewang/blog/files/5872975/psd.zip\" >鼠标垫.psd.zip<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"新的开始","date":"2017-06-11T08:32:11.000Z","_content":"\n告别wordPress！不明白这货为什么只支持MySQL！pg4wp插件的支持能力也是弱！\n","source":"_posts/new-start.md","raw":"---\ntitle: 新的开始\ndate: 2017-6-11 16:32:11\n---\n\n告别wordPress！不明白这货为什么只支持MySQL！pg4wp插件的支持能力也是弱！\n","slug":"new-start","published":1,"updated":"2021-01-06T09:56:16.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rn00122aahclvi1x83","content":"<p>告别wordPress！不明白这货为什么只支持MySQL！pg4wp插件的支持能力也是弱！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>告别wordPress！不明白这货为什么只支持MySQL！pg4wp插件的支持能力也是弱！</p>\n"},{"title":"为何要抛弃Kafka，选择NSQ！","date":"2019-07-14T14:48:15.000Z","_content":"\n> 自从抛PHP从Go。一直相安无事。近来遇到复杂业务时才想起旧爱`Laravel Queue`。<br>\n> 替代品有两个：<br>\n> 一个是名声响彻东西半球的时代宠儿：`Kafka`。<br>\n> 另一个是穷光蛋查理的首选：`NSQ`。\n\n# Let's Rock\n\n## 架构\n\n### NSQ 进程架构\n```\n +-----------------+        +---------------+\n |                 |        |               |\n |    nsqlookup    +<-------+    nsqadmin   |\n |                 |        |               |\n +-------+---------+        +---------------+\n         |\n         |\n         |\n         v\n+-------------+\n| +-------------+\n| | +--------------+\n| | |              |\n+---+     nsqd     |\n  +-+              |\n    +--------------+\n\n\n```\n\n### Kafka 进程架构\n```\n+----------------+\n|                |\n|    zookeeper   |\n|                |\n+--------+-------+\n         |\n         |\n         |\n         v\n+-------------+\n| +-------------+\n| | +--------------+\n| | |              |\n+---+    kafka     |\n  +-+              |\n    +--------------+\n\n```\n\n## 资源消耗\n\n* 环境：FreeBSD12\n* 测量工具：htop RES\n\n### NSQ\n进程|启动时占用\n---|---\nnsqd|9.2MB\nnsqlookup|8.5MB\n\n### Kafka\n进程|启动时占用\n---|---\nkafka|299MB\nzookeeper|58MB\n\n## 运行与维护\n\n\\\\|NSQ|Kafka\n---|---|---\n依赖|无|Linux基础包、bash、jdk、java\n耦合|无！能以nsqd单进程提供完整服务，只在多节点分布式模式下需要nsqlookup|依赖 zookeeper\n日志|标准输出，自行重定向|zookeeper 1份日志，kafka 7份日志，其中两份日志按小时自动切割\n配置|10项左右，默认即是最优|10多个独立配置文件，数百个配置项\n性能优化|默认开启 pprof。支持web可视化实时观测内存、协程等动态|无\n异常排查|错误日志中的栈，源码量小。不依赖网络问答也能在短时间内找出问题|错误日志中的栈，深度的栈，巨量源码，排查需要深入了解其原理，大量阅读源码。否则只能通过互联网、查阅前人经验或大师级人脉。\n\n## 业务能力\n\\\\|NSQ|Kafka\n---|---|---\n数据安全|单个nsqd实例内的数据，不支异地热备，实例在正常退出时，会做刷入磁盘操作，也有手动备份实例数据的工具。|数据全在磁盘。多个节点间自动互为备份。\n消息顺序|不保证有序|支持有条件的有序\n消息投递|至少一次，消费者需自行保持消息处理的幂等|支持准确的一次\n\n* 附加能力\n\n\\\\|NSQ|Kafka\n---|---|---\n界面化管理|自带nsqadmin|无，需额外安装第三方包\n基于http协议的pub|nsqd自带|无，需额外安装第三方包\n\n\n-----\n## 一个Goer视角的体验\n\nkafka 的golang client 官方首推 sarama。一查就出糙点：[golang 消费 kafka 的坑](https://blog.wolfogre.com/posts/golang-consume-kafka/)\n这些库的版本，1.0都不到。\n\n而[go-nsq](https://github.com/nsqio/go-nsq)截至当前已经历16次release至v1.0.7。适用度，亲测为上好！\n\n### NATS队列\nby the way 顺便提一下NATS队列，也很有名。它的消息投递既支持至少一次，也支持最多一次，也无法准确的一次。\n\n### 何时该选择Kafka\nKafka隶属于Apache基金会。是Apache“全家桶”的一员。\n\nApache家族拥有除了队列之外，在可靠计算和大数据方面有着可靠、开放的整体解决方案。就像ARM的公版。\n\nJava开发者是个遍布全球的庞大工人群体。\n\n因此，选择Apache下的产品具有工业化特征，是一个只要**肯花钱**，就一定能实现的高度可复制的生产机器。\n\n### 身为Goer **自豪地采用`NSQ`！**\n* 在云服务成熟的今天，主机意外断电，且断电后硬盘也意外消失的可能几乎为0。再加上阿里云的定时自动快照。倘若是金融、保险类的业务，还可以通过其它手段，如：文件同步备份的方式做热备。\n* 成本。不论是运维成本，还是硬件成本，NSQ都吊打Kafka！相比之下保持幂等的成本，就不是事儿了。\n","source":"_posts/nsq-vs-kafka.md","raw":"---\ntitle: 为何要抛弃Kafka，选择NSQ！\ndate: 2019-07-14 22:48:15\ntags: [Kafka, NSQ]\n---\n\n> 自从抛PHP从Go。一直相安无事。近来遇到复杂业务时才想起旧爱`Laravel Queue`。<br>\n> 替代品有两个：<br>\n> 一个是名声响彻东西半球的时代宠儿：`Kafka`。<br>\n> 另一个是穷光蛋查理的首选：`NSQ`。\n\n# Let's Rock\n\n## 架构\n\n### NSQ 进程架构\n```\n +-----------------+        +---------------+\n |                 |        |               |\n |    nsqlookup    +<-------+    nsqadmin   |\n |                 |        |               |\n +-------+---------+        +---------------+\n         |\n         |\n         |\n         v\n+-------------+\n| +-------------+\n| | +--------------+\n| | |              |\n+---+     nsqd     |\n  +-+              |\n    +--------------+\n\n\n```\n\n### Kafka 进程架构\n```\n+----------------+\n|                |\n|    zookeeper   |\n|                |\n+--------+-------+\n         |\n         |\n         |\n         v\n+-------------+\n| +-------------+\n| | +--------------+\n| | |              |\n+---+    kafka     |\n  +-+              |\n    +--------------+\n\n```\n\n## 资源消耗\n\n* 环境：FreeBSD12\n* 测量工具：htop RES\n\n### NSQ\n进程|启动时占用\n---|---\nnsqd|9.2MB\nnsqlookup|8.5MB\n\n### Kafka\n进程|启动时占用\n---|---\nkafka|299MB\nzookeeper|58MB\n\n## 运行与维护\n\n\\\\|NSQ|Kafka\n---|---|---\n依赖|无|Linux基础包、bash、jdk、java\n耦合|无！能以nsqd单进程提供完整服务，只在多节点分布式模式下需要nsqlookup|依赖 zookeeper\n日志|标准输出，自行重定向|zookeeper 1份日志，kafka 7份日志，其中两份日志按小时自动切割\n配置|10项左右，默认即是最优|10多个独立配置文件，数百个配置项\n性能优化|默认开启 pprof。支持web可视化实时观测内存、协程等动态|无\n异常排查|错误日志中的栈，源码量小。不依赖网络问答也能在短时间内找出问题|错误日志中的栈，深度的栈，巨量源码，排查需要深入了解其原理，大量阅读源码。否则只能通过互联网、查阅前人经验或大师级人脉。\n\n## 业务能力\n\\\\|NSQ|Kafka\n---|---|---\n数据安全|单个nsqd实例内的数据，不支异地热备，实例在正常退出时，会做刷入磁盘操作，也有手动备份实例数据的工具。|数据全在磁盘。多个节点间自动互为备份。\n消息顺序|不保证有序|支持有条件的有序\n消息投递|至少一次，消费者需自行保持消息处理的幂等|支持准确的一次\n\n* 附加能力\n\n\\\\|NSQ|Kafka\n---|---|---\n界面化管理|自带nsqadmin|无，需额外安装第三方包\n基于http协议的pub|nsqd自带|无，需额外安装第三方包\n\n\n-----\n## 一个Goer视角的体验\n\nkafka 的golang client 官方首推 sarama。一查就出糙点：[golang 消费 kafka 的坑](https://blog.wolfogre.com/posts/golang-consume-kafka/)\n这些库的版本，1.0都不到。\n\n而[go-nsq](https://github.com/nsqio/go-nsq)截至当前已经历16次release至v1.0.7。适用度，亲测为上好！\n\n### NATS队列\nby the way 顺便提一下NATS队列，也很有名。它的消息投递既支持至少一次，也支持最多一次，也无法准确的一次。\n\n### 何时该选择Kafka\nKafka隶属于Apache基金会。是Apache“全家桶”的一员。\n\nApache家族拥有除了队列之外，在可靠计算和大数据方面有着可靠、开放的整体解决方案。就像ARM的公版。\n\nJava开发者是个遍布全球的庞大工人群体。\n\n因此，选择Apache下的产品具有工业化特征，是一个只要**肯花钱**，就一定能实现的高度可复制的生产机器。\n\n### 身为Goer **自豪地采用`NSQ`！**\n* 在云服务成熟的今天，主机意外断电，且断电后硬盘也意外消失的可能几乎为0。再加上阿里云的定时自动快照。倘若是金融、保险类的业务，还可以通过其它手段，如：文件同步备份的方式做热备。\n* 成本。不论是运维成本，还是硬件成本，NSQ都吊打Kafka！相比之下保持幂等的成本，就不是事儿了。\n","slug":"nsq-vs-kafka","published":1,"updated":"2021-01-06T09:56:16.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rp00152aahg4r0fmzh","content":"<blockquote>\n<p>自从抛PHP从Go。一直相安无事。近来遇到复杂业务时才想起旧爱<code>Laravel Queue</code>。<br><br>替代品有两个：<br><br>一个是名声响彻东西半球的时代宠儿：<code>Kafka</code>。<br><br>另一个是穷光蛋查理的首选：<code>NSQ</code>。</p>\n</blockquote>\n<h1 id=\"Let’s-Rock\"><a href=\"#Let’s-Rock\" class=\"headerlink\" title=\"Let’s Rock\"></a>Let’s Rock</h1><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><h3 id=\"NSQ-进程架构\"><a href=\"#NSQ-进程架构\" class=\"headerlink\" title=\"NSQ 进程架构\"></a>NSQ 进程架构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> +-----------------+        +---------------+</span><br><span class=\"line\"> |                 |        |               |</span><br><span class=\"line\"> |    nsqlookup    +&lt;-------+    nsqadmin   |</span><br><span class=\"line\"> |                 |        |               |</span><br><span class=\"line\"> +-------+---------+        +---------------+</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         v</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| +-------------+</span><br><span class=\"line\">| | +--------------+</span><br><span class=\"line\">| | |              |</span><br><span class=\"line\">+---+     nsqd     |</span><br><span class=\"line\">  +-+              |</span><br><span class=\"line\">    +--------------+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"Kafka-进程架构\"><a href=\"#Kafka-进程架构\" class=\"headerlink\" title=\"Kafka 进程架构\"></a>Kafka 进程架构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|    zookeeper   |</span><br><span class=\"line\">|                |</span><br><span class=\"line\">+--------+-------+</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         v</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| +-------------+</span><br><span class=\"line\">| | +--------------+</span><br><span class=\"line\">| | |              |</span><br><span class=\"line\">+---+    kafka     |</span><br><span class=\"line\">  +-+              |</span><br><span class=\"line\">    +--------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"资源消耗\"><a href=\"#资源消耗\" class=\"headerlink\" title=\"资源消耗\"></a>资源消耗</h2><ul>\n<li>环境：FreeBSD12</li>\n<li>测量工具：htop RES</li>\n</ul>\n<h3 id=\"NSQ\"><a href=\"#NSQ\" class=\"headerlink\" title=\"NSQ\"></a>NSQ</h3><table>\n<thead>\n<tr>\n<th>进程</th>\n<th>启动时占用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nsqd</td>\n<td>9.2MB</td>\n</tr>\n<tr>\n<td>nsqlookup</td>\n<td>8.5MB</td>\n</tr>\n</tbody></table>\n<h3 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h3><table>\n<thead>\n<tr>\n<th>进程</th>\n<th>启动时占用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>kafka</td>\n<td>299MB</td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>58MB</td>\n</tr>\n</tbody></table>\n<h2 id=\"运行与维护\"><a href=\"#运行与维护\" class=\"headerlink\" title=\"运行与维护\"></a>运行与维护</h2><table>\n<thead>\n<tr>\n<th>\\</th>\n<th>NSQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>依赖</td>\n<td>无</td>\n<td>Linux基础包、bash、jdk、java</td>\n</tr>\n<tr>\n<td>耦合</td>\n<td>无！能以nsqd单进程提供完整服务，只在多节点分布式模式下需要nsqlookup</td>\n<td>依赖 zookeeper</td>\n</tr>\n<tr>\n<td>日志</td>\n<td>标准输出，自行重定向</td>\n<td>zookeeper 1份日志，kafka 7份日志，其中两份日志按小时自动切割</td>\n</tr>\n<tr>\n<td>配置</td>\n<td>10项左右，默认即是最优</td>\n<td>10多个独立配置文件，数百个配置项</td>\n</tr>\n<tr>\n<td>性能优化</td>\n<td>默认开启 pprof。支持web可视化实时观测内存、协程等动态</td>\n<td>无</td>\n</tr>\n<tr>\n<td>异常排查</td>\n<td>错误日志中的栈，源码量小。不依赖网络问答也能在短时间内找出问题</td>\n<td>错误日志中的栈，深度的栈，巨量源码，排查需要深入了解其原理，大量阅读源码。否则只能通过互联网、查阅前人经验或大师级人脉。</td>\n</tr>\n</tbody></table>\n<h2 id=\"业务能力\"><a href=\"#业务能力\" class=\"headerlink\" title=\"业务能力\"></a>业务能力</h2><table>\n<thead>\n<tr>\n<th>\\</th>\n<th>NSQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据安全</td>\n<td>单个nsqd实例内的数据，不支异地热备，实例在正常退出时，会做刷入磁盘操作，也有手动备份实例数据的工具。</td>\n<td>数据全在磁盘。多个节点间自动互为备份。</td>\n</tr>\n<tr>\n<td>消息顺序</td>\n<td>不保证有序</td>\n<td>支持有条件的有序</td>\n</tr>\n<tr>\n<td>消息投递</td>\n<td>至少一次，消费者需自行保持消息处理的幂等</td>\n<td>支持准确的一次</td>\n</tr>\n</tbody></table>\n<ul>\n<li>附加能力</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>\\</th>\n<th>NSQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>界面化管理</td>\n<td>自带nsqadmin</td>\n<td>无，需额外安装第三方包</td>\n</tr>\n<tr>\n<td>基于http协议的pub</td>\n<td>nsqd自带</td>\n<td>无，需额外安装第三方包</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"一个Goer视角的体验\"><a href=\"#一个Goer视角的体验\" class=\"headerlink\" title=\"一个Goer视角的体验\"></a>一个Goer视角的体验</h2><p>kafka 的golang client 官方首推 sarama。一查就出糙点：<a class=\"link\"   href=\"https://blog.wolfogre.com/posts/golang-consume-kafka/\" >golang 消费 kafka 的坑<i class=\"fas fa-external-link-alt\"></i></a><br>这些库的版本，1.0都不到。</p>\n<p>而<a class=\"link\"   href=\"https://github.com/nsqio/go-nsq\" >go-nsq<i class=\"fas fa-external-link-alt\"></i></a>截至当前已经历16次release至v1.0.7。适用度，亲测为上好！</p>\n<h3 id=\"NATS队列\"><a href=\"#NATS队列\" class=\"headerlink\" title=\"NATS队列\"></a>NATS队列</h3><p>by the way 顺便提一下NATS队列，也很有名。它的消息投递既支持至少一次，也支持最多一次，也无法准确的一次。</p>\n<h3 id=\"何时该选择Kafka\"><a href=\"#何时该选择Kafka\" class=\"headerlink\" title=\"何时该选择Kafka\"></a>何时该选择Kafka</h3><p>Kafka隶属于Apache基金会。是Apache“全家桶”的一员。</p>\n<p>Apache家族拥有除了队列之外，在可靠计算和大数据方面有着可靠、开放的整体解决方案。就像ARM的公版。</p>\n<p>Java开发者是个遍布全球的庞大工人群体。</p>\n<p>因此，选择Apache下的产品具有工业化特征，是一个只要<strong>肯花钱</strong>，就一定能实现的高度可复制的生产机器。</p>\n<h3 id=\"身为Goer-自豪地采用NSQ！\"><a href=\"#身为Goer-自豪地采用NSQ！\" class=\"headerlink\" title=\"身为Goer 自豪地采用NSQ！\"></a>身为Goer <strong>自豪地采用<code>NSQ</code>！</strong></h3><ul>\n<li>在云服务成熟的今天，主机意外断电，且断电后硬盘也意外消失的可能几乎为0。再加上阿里云的定时自动快照。倘若是金融、保险类的业务，还可以通过其它手段，如：文件同步备份的方式做热备。</li>\n<li>成本。不论是运维成本，还是硬件成本，NSQ都吊打Kafka！相比之下保持幂等的成本，就不是事儿了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>自从抛PHP从Go。一直相安无事。近来遇到复杂业务时才想起旧爱<code>Laravel Queue</code>。<br><br>替代品有两个：<br><br>一个是名声响彻东西半球的时代宠儿：<code>Kafka</code>。<br><br>另一个是穷光蛋查理的首选：<code>NSQ</code>。</p>\n</blockquote>\n<h1 id=\"Let’s-Rock\"><a href=\"#Let’s-Rock\" class=\"headerlink\" title=\"Let’s Rock\"></a>Let’s Rock</h1><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><h3 id=\"NSQ-进程架构\"><a href=\"#NSQ-进程架构\" class=\"headerlink\" title=\"NSQ 进程架构\"></a>NSQ 进程架构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> +-----------------+        +---------------+</span><br><span class=\"line\"> |                 |        |               |</span><br><span class=\"line\"> |    nsqlookup    +&lt;-------+    nsqadmin   |</span><br><span class=\"line\"> |                 |        |               |</span><br><span class=\"line\"> +-------+---------+        +---------------+</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         v</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| +-------------+</span><br><span class=\"line\">| | +--------------+</span><br><span class=\"line\">| | |              |</span><br><span class=\"line\">+---+     nsqd     |</span><br><span class=\"line\">  +-+              |</span><br><span class=\"line\">    +--------------+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"Kafka-进程架构\"><a href=\"#Kafka-进程架构\" class=\"headerlink\" title=\"Kafka 进程架构\"></a>Kafka 进程架构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|    zookeeper   |</span><br><span class=\"line\">|                |</span><br><span class=\"line\">+--------+-------+</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         |</span><br><span class=\"line\">         v</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| +-------------+</span><br><span class=\"line\">| | +--------------+</span><br><span class=\"line\">| | |              |</span><br><span class=\"line\">+---+    kafka     |</span><br><span class=\"line\">  +-+              |</span><br><span class=\"line\">    +--------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"资源消耗\"><a href=\"#资源消耗\" class=\"headerlink\" title=\"资源消耗\"></a>资源消耗</h2><ul>\n<li>环境：FreeBSD12</li>\n<li>测量工具：htop RES</li>\n</ul>\n<h3 id=\"NSQ\"><a href=\"#NSQ\" class=\"headerlink\" title=\"NSQ\"></a>NSQ</h3><table>\n<thead>\n<tr>\n<th>进程</th>\n<th>启动时占用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nsqd</td>\n<td>9.2MB</td>\n</tr>\n<tr>\n<td>nsqlookup</td>\n<td>8.5MB</td>\n</tr>\n</tbody></table>\n<h3 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h3><table>\n<thead>\n<tr>\n<th>进程</th>\n<th>启动时占用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>kafka</td>\n<td>299MB</td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>58MB</td>\n</tr>\n</tbody></table>\n<h2 id=\"运行与维护\"><a href=\"#运行与维护\" class=\"headerlink\" title=\"运行与维护\"></a>运行与维护</h2><table>\n<thead>\n<tr>\n<th>\\</th>\n<th>NSQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>依赖</td>\n<td>无</td>\n<td>Linux基础包、bash、jdk、java</td>\n</tr>\n<tr>\n<td>耦合</td>\n<td>无！能以nsqd单进程提供完整服务，只在多节点分布式模式下需要nsqlookup</td>\n<td>依赖 zookeeper</td>\n</tr>\n<tr>\n<td>日志</td>\n<td>标准输出，自行重定向</td>\n<td>zookeeper 1份日志，kafka 7份日志，其中两份日志按小时自动切割</td>\n</tr>\n<tr>\n<td>配置</td>\n<td>10项左右，默认即是最优</td>\n<td>10多个独立配置文件，数百个配置项</td>\n</tr>\n<tr>\n<td>性能优化</td>\n<td>默认开启 pprof。支持web可视化实时观测内存、协程等动态</td>\n<td>无</td>\n</tr>\n<tr>\n<td>异常排查</td>\n<td>错误日志中的栈，源码量小。不依赖网络问答也能在短时间内找出问题</td>\n<td>错误日志中的栈，深度的栈，巨量源码，排查需要深入了解其原理，大量阅读源码。否则只能通过互联网、查阅前人经验或大师级人脉。</td>\n</tr>\n</tbody></table>\n<h2 id=\"业务能力\"><a href=\"#业务能力\" class=\"headerlink\" title=\"业务能力\"></a>业务能力</h2><table>\n<thead>\n<tr>\n<th>\\</th>\n<th>NSQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据安全</td>\n<td>单个nsqd实例内的数据，不支异地热备，实例在正常退出时，会做刷入磁盘操作，也有手动备份实例数据的工具。</td>\n<td>数据全在磁盘。多个节点间自动互为备份。</td>\n</tr>\n<tr>\n<td>消息顺序</td>\n<td>不保证有序</td>\n<td>支持有条件的有序</td>\n</tr>\n<tr>\n<td>消息投递</td>\n<td>至少一次，消费者需自行保持消息处理的幂等</td>\n<td>支持准确的一次</td>\n</tr>\n</tbody></table>\n<ul>\n<li>附加能力</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>\\</th>\n<th>NSQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>界面化管理</td>\n<td>自带nsqadmin</td>\n<td>无，需额外安装第三方包</td>\n</tr>\n<tr>\n<td>基于http协议的pub</td>\n<td>nsqd自带</td>\n<td>无，需额外安装第三方包</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"一个Goer视角的体验\"><a href=\"#一个Goer视角的体验\" class=\"headerlink\" title=\"一个Goer视角的体验\"></a>一个Goer视角的体验</h2><p>kafka 的golang client 官方首推 sarama。一查就出糙点：<a class=\"link\"   href=\"https://blog.wolfogre.com/posts/golang-consume-kafka/\" >golang 消费 kafka 的坑<i class=\"fas fa-external-link-alt\"></i></a><br>这些库的版本，1.0都不到。</p>\n<p>而<a class=\"link\"   href=\"https://github.com/nsqio/go-nsq\" >go-nsq<i class=\"fas fa-external-link-alt\"></i></a>截至当前已经历16次release至v1.0.7。适用度，亲测为上好！</p>\n<h3 id=\"NATS队列\"><a href=\"#NATS队列\" class=\"headerlink\" title=\"NATS队列\"></a>NATS队列</h3><p>by the way 顺便提一下NATS队列，也很有名。它的消息投递既支持至少一次，也支持最多一次，也无法准确的一次。</p>\n<h3 id=\"何时该选择Kafka\"><a href=\"#何时该选择Kafka\" class=\"headerlink\" title=\"何时该选择Kafka\"></a>何时该选择Kafka</h3><p>Kafka隶属于Apache基金会。是Apache“全家桶”的一员。</p>\n<p>Apache家族拥有除了队列之外，在可靠计算和大数据方面有着可靠、开放的整体解决方案。就像ARM的公版。</p>\n<p>Java开发者是个遍布全球的庞大工人群体。</p>\n<p>因此，选择Apache下的产品具有工业化特征，是一个只要<strong>肯花钱</strong>，就一定能实现的高度可复制的生产机器。</p>\n<h3 id=\"身为Goer-自豪地采用NSQ！\"><a href=\"#身为Goer-自豪地采用NSQ！\" class=\"headerlink\" title=\"身为Goer 自豪地采用NSQ！\"></a>身为Goer <strong>自豪地采用<code>NSQ</code>！</strong></h3><ul>\n<li>在云服务成熟的今天，主机意外断电，且断电后硬盘也意外消失的可能几乎为0。再加上阿里云的定时自动快照。倘若是金融、保险类的业务，还可以通过其它手段，如：文件同步备份的方式做热备。</li>\n<li>成本。不论是运维成本，还是硬件成本，NSQ都吊打Kafka！相比之下保持幂等的成本，就不是事儿了。</li>\n</ul>\n"},{"title":"NSQ的部署","date":"2019-07-15T13:59:54.000Z","_content":"\n## 原料\n\n- 系统：FreeBSD 12\n\n\n### 安装\n```csh\npkg install nsq\n```\n\n### 编写配置文件\n- NSQ 配置文件样例：https://github.com/nsqio/nsq/tree/master/contrib\n- 部署在`/usr/local/etc/`下\n    - nsqd.conf\n    - nsqlookup.conf\n    - nsqadmin.conf\n\n### 应用配置文件\n在`/usr/local/etc/rc.d/`下找到对应的服务管理脚本。\n\n会看到下面的头部：\n```sh\n#!/bin/sh\n\n# $FreeBSD: branches/2019Q2/net/nsq/files/nsqd.in 454856 2017-11-24 23:17:50Z dbaio $\n#\n# PROVIDE: nsqd\n# REQUIRE: LOGIN\n# KEYWORD: shutdown\n\n# Add the following lines to /etc/rc.conf to enable nsqd:\n# nsqd_enable=\"YES\"\n# nsqd_args=\"<set as needed>\"\n\n\n```\n在此将\n```sh\n# nsqd_enable=\"YES\"\n# nsqd_args=\"<set as needed>\"\n```\n改为：\n```sh\nnsqd_enable=\"YES\"\nnsqd_args=\"--config=/usr/local/etc/nsqd.conf\"\n```\n\n### 启动\n`service nsqd start`\n","source":"_posts/nsq-deploy.md","raw":"---\ntitle: NSQ的部署\ndate: 2019-07-15 21:59:54\ntags: [NSQ]\n---\n\n## 原料\n\n- 系统：FreeBSD 12\n\n\n### 安装\n```csh\npkg install nsq\n```\n\n### 编写配置文件\n- NSQ 配置文件样例：https://github.com/nsqio/nsq/tree/master/contrib\n- 部署在`/usr/local/etc/`下\n    - nsqd.conf\n    - nsqlookup.conf\n    - nsqadmin.conf\n\n### 应用配置文件\n在`/usr/local/etc/rc.d/`下找到对应的服务管理脚本。\n\n会看到下面的头部：\n```sh\n#!/bin/sh\n\n# $FreeBSD: branches/2019Q2/net/nsq/files/nsqd.in 454856 2017-11-24 23:17:50Z dbaio $\n#\n# PROVIDE: nsqd\n# REQUIRE: LOGIN\n# KEYWORD: shutdown\n\n# Add the following lines to /etc/rc.conf to enable nsqd:\n# nsqd_enable=\"YES\"\n# nsqd_args=\"<set as needed>\"\n\n\n```\n在此将\n```sh\n# nsqd_enable=\"YES\"\n# nsqd_args=\"<set as needed>\"\n```\n改为：\n```sh\nnsqd_enable=\"YES\"\nnsqd_args=\"--config=/usr/local/etc/nsqd.conf\"\n```\n\n### 启动\n`service nsqd start`\n","slug":"nsq-deploy","published":1,"updated":"2021-01-06T09:56:16.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rp00172aah2deq1i1f","content":"<h2 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h2><ul>\n<li>系统：FreeBSD 12</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install nsq</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h3><ul>\n<li>NSQ 配置文件样例：<a class=\"link\"   href=\"https://github.com/nsqio/nsq/tree/master/contrib\" >https://github.com/nsqio/nsq/tree/master/contrib<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>部署在<code>/usr/local/etc/</code>下<ul>\n<li>nsqd.conf</li>\n<li>nsqlookup.conf</li>\n<li>nsqadmin.conf</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"应用配置文件\"><a href=\"#应用配置文件\" class=\"headerlink\" title=\"应用配置文件\"></a>应用配置文件</h3><p>在<code>/usr/local/etc/rc.d/</code>下找到对应的服务管理脚本。</p>\n<p>会看到下面的头部：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># $FreeBSD: branches/2019Q2/net/nsq/files/nsqd.in 454856 2017-11-24 23:17:50Z dbaio $</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># PROVIDE: nsqd</span></span><br><span class=\"line\"><span class=\"comment\"># REQUIRE: LOGIN</span></span><br><span class=\"line\"><span class=\"comment\"># KEYWORD: shutdown</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the following lines to /etc/rc.conf to enable nsqd:</span></span><br><span class=\"line\"><span class=\"comment\"># nsqd_enable=&quot;YES&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># nsqd_args=&quot;&lt;set as needed&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在此将</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nsqd_enable=&quot;YES&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># nsqd_args=&quot;&lt;set as needed&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>改为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nsqd_enable=<span class=\"string\">&quot;YES&quot;</span></span><br><span class=\"line\">nsqd_args=<span class=\"string\">&quot;--config=/usr/local/etc/nsqd.conf&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p><code>service nsqd start</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h2><ul>\n<li>系统：FreeBSD 12</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install nsq</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h3><ul>\n<li>NSQ 配置文件样例：<a class=\"link\"   href=\"https://github.com/nsqio/nsq/tree/master/contrib\" >https://github.com/nsqio/nsq/tree/master/contrib<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>部署在<code>/usr/local/etc/</code>下<ul>\n<li>nsqd.conf</li>\n<li>nsqlookup.conf</li>\n<li>nsqadmin.conf</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"应用配置文件\"><a href=\"#应用配置文件\" class=\"headerlink\" title=\"应用配置文件\"></a>应用配置文件</h3><p>在<code>/usr/local/etc/rc.d/</code>下找到对应的服务管理脚本。</p>\n<p>会看到下面的头部：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># $FreeBSD: branches/2019Q2/net/nsq/files/nsqd.in 454856 2017-11-24 23:17:50Z dbaio $</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># PROVIDE: nsqd</span></span><br><span class=\"line\"><span class=\"comment\"># REQUIRE: LOGIN</span></span><br><span class=\"line\"><span class=\"comment\"># KEYWORD: shutdown</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the following lines to /etc/rc.conf to enable nsqd:</span></span><br><span class=\"line\"><span class=\"comment\"># nsqd_enable=&quot;YES&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># nsqd_args=&quot;&lt;set as needed&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在此将</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nsqd_enable=&quot;YES&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># nsqd_args=&quot;&lt;set as needed&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>改为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nsqd_enable=<span class=\"string\">&quot;YES&quot;</span></span><br><span class=\"line\">nsqd_args=<span class=\"string\">&quot;--config=/usr/local/etc/nsqd.conf&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p><code>service nsqd start</code></p>\n"},{"title":"编译OpenWRT","date":"2020-03-10T08:28:31.000Z","_content":"\n\n之前编译OpenWRT时有很多顾虑。比如：\n\n- 太多依赖，担心把自己MacOS装太多不明用处的包。将来无法清理\n- 担心搞不懂编译过程中遇到的陌生概念。比如：出一个问题，google一下，得到了10个问题！\n- 不知道编译结果是什么。如何把编译结果变成指定的系统镜像。不相信`make`能直接出镜像。\n\n事实上，OpenWRT 团队是群非常实在的人！只需要一次`make`多版本的IMG镜像和选中的软件包。全编译出来并打好包，还整理得非常整齐！\n\n[官方的中文编译说明](https://openwrt.org/zh-cn/doc/howto/build)这里展示了准备好后的编译过程。由此文可见，确实不难！当然，仅凭此一文，不足以指导完成编译！\n\n下边记录一下我的编译经历。\n\n# 规划\n选择在虚拟机里编译。免得污染OS。\n- 虚拟机选择VirtualBox；因为免费稳健。\n- 编译OS，选择Alpine Linux；因为它小且便于安装。\n    - OpenWRT编译支持几乎所有常见Linux发行版和MacOS。FreeBSD官方文档立了项，但没有写，就此略过。Windows没有看到相关文档。\n\n## 注意事项\n\n- 虚拟机尽量多给几个CPU核心，因为OpenWRT项目相当大！更多的核心能压缩编译时间。\n- 虚拟机硬盘给15GB以上，最好20GB以上。\n- 给装好的OS建立一个新用户。OpenWRT官方不推荐在`root`账号下编译。\n- 源码中依赖的第三方库，多数在海外。一架舒适的小飞机，是理想的选择；甚至是必须！\n\n## 要求\n以下要求，不在本文探讨范围。\n- 要会用VirtualBox。\n- 要会安装Alpine Linux。\n- 要会用git。理解分支和标签的概念和用法。\n- 自备小飞机。\n\n# 参考文档\n\n- 虚拟机环境准备参考：[Build system – Installation](https://openwrt.org/docs/guide-developer/build-system/install-buildsystem)\n- 编译过程及选项参考：[Build system – Usage](https://openwrt.org/docs/guide-developer/build-system/use-buildsystem)\n\n# 重点提示：\n\n- 环境准备，在装完OS后，其实很简单。只要在[Build system – Installation](https://openwrt.org/docs/guide-developer/build-system/install-buildsystem)文章中复制一下对应的安装指令，执行一下；再找个地方clone出源码即可。\n- `git tag`查找需要的版本。`git checkout`需要的版本。\n- `./scripts/feeds` feeds 指令是管理Apk（OpenWRT上的安装包）的。就像MacOS上的`brew`。在`menuconfig`之前值得更新一下，`./scripts/feeds update -a`。\n - 自己的安装包将来也是在这里创建和管理、编译。\n- `make menuconfig` 有UI界面，可在UI界面上选择要编译的镜像的目标设备。如：选择`brcm2708`是`Raspberry Pi`类型的芯片，子类型对应`Raspberry Pi`的不同Model版本，如：`bcm2710`是`Raspberry Pi 3`的芯片型号。\n- `make defconfig` 设置默认项\n- `make kernel_menuconfig` 望文生义，内核配置，一般不需要。\n- `make download` 下载源码编译过程中依赖的工具。\n - 在`make download`前，配置一下`wget`的`http_proxy``https_proxy``ftp_proxy`，并启用`proxy`。`wget`配置文件在：`/etc/wgetrc`\n- `make` \n - 参数`-j3`，就是3个线程并发编译，这个数字取决于CPU。\n - 参数`V=s`，是显示详细。\n - 参数`package/cups/compile`，是编译单个应用。\n\n# 我的编译成果\n## 固件特点\n- 固件型号：\t**Raspberry Pi 4 Model B Rev 1.2**\n- 1GB 根空间。\n- 镜像内置了USB转rj45驱动\n- 默认支持`bbr`、`tcpdump`\n- 支持`v2ray`，在配置好源后，`opkg update && opkg install v2ray`就能得到。\n - 广告过滤\n - 分流\n - 屏蔽大厂部分产品的日志收集\n - 出口配置样例\n- 编译了package中部分我认为常用的包，如：`luci-app-statistics`、`6to4`、`htop`、`curl`、`fdisk`、`cfdisk`、`ffmpeg`、`luci-app-samba`等。\n\n## 固件源\n\n固件下载、升级：[http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/](http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/)\n\n`/etc/opkg/distfeeds.conf` 源配置：\n```conf\nsrc/gz jf_core http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/packages\nsrc/gz jf_base http://openwrt.wangjunfeng.com.cn/packages/aarch64_cortex-a72/base\nsrc/gz jf_luci http://openwrt.wangjunfeng.com.cn/packages/aarch64_cortex-a72/luci\nsrc/gz jf_packages http://openwrt.wangjunfeng.com.cn/packages/aarch64_cortex-a72/packages\n```\n","source":"_posts/openwrt-compile.md","raw":"---\ntitle: 编译OpenWRT\ndate: 2020-03-10 16:28:31\ntags: [openWRT, 编译]\n---\n\n\n之前编译OpenWRT时有很多顾虑。比如：\n\n- 太多依赖，担心把自己MacOS装太多不明用处的包。将来无法清理\n- 担心搞不懂编译过程中遇到的陌生概念。比如：出一个问题，google一下，得到了10个问题！\n- 不知道编译结果是什么。如何把编译结果变成指定的系统镜像。不相信`make`能直接出镜像。\n\n事实上，OpenWRT 团队是群非常实在的人！只需要一次`make`多版本的IMG镜像和选中的软件包。全编译出来并打好包，还整理得非常整齐！\n\n[官方的中文编译说明](https://openwrt.org/zh-cn/doc/howto/build)这里展示了准备好后的编译过程。由此文可见，确实不难！当然，仅凭此一文，不足以指导完成编译！\n\n下边记录一下我的编译经历。\n\n# 规划\n选择在虚拟机里编译。免得污染OS。\n- 虚拟机选择VirtualBox；因为免费稳健。\n- 编译OS，选择Alpine Linux；因为它小且便于安装。\n    - OpenWRT编译支持几乎所有常见Linux发行版和MacOS。FreeBSD官方文档立了项，但没有写，就此略过。Windows没有看到相关文档。\n\n## 注意事项\n\n- 虚拟机尽量多给几个CPU核心，因为OpenWRT项目相当大！更多的核心能压缩编译时间。\n- 虚拟机硬盘给15GB以上，最好20GB以上。\n- 给装好的OS建立一个新用户。OpenWRT官方不推荐在`root`账号下编译。\n- 源码中依赖的第三方库，多数在海外。一架舒适的小飞机，是理想的选择；甚至是必须！\n\n## 要求\n以下要求，不在本文探讨范围。\n- 要会用VirtualBox。\n- 要会安装Alpine Linux。\n- 要会用git。理解分支和标签的概念和用法。\n- 自备小飞机。\n\n# 参考文档\n\n- 虚拟机环境准备参考：[Build system – Installation](https://openwrt.org/docs/guide-developer/build-system/install-buildsystem)\n- 编译过程及选项参考：[Build system – Usage](https://openwrt.org/docs/guide-developer/build-system/use-buildsystem)\n\n# 重点提示：\n\n- 环境准备，在装完OS后，其实很简单。只要在[Build system – Installation](https://openwrt.org/docs/guide-developer/build-system/install-buildsystem)文章中复制一下对应的安装指令，执行一下；再找个地方clone出源码即可。\n- `git tag`查找需要的版本。`git checkout`需要的版本。\n- `./scripts/feeds` feeds 指令是管理Apk（OpenWRT上的安装包）的。就像MacOS上的`brew`。在`menuconfig`之前值得更新一下，`./scripts/feeds update -a`。\n - 自己的安装包将来也是在这里创建和管理、编译。\n- `make menuconfig` 有UI界面，可在UI界面上选择要编译的镜像的目标设备。如：选择`brcm2708`是`Raspberry Pi`类型的芯片，子类型对应`Raspberry Pi`的不同Model版本，如：`bcm2710`是`Raspberry Pi 3`的芯片型号。\n- `make defconfig` 设置默认项\n- `make kernel_menuconfig` 望文生义，内核配置，一般不需要。\n- `make download` 下载源码编译过程中依赖的工具。\n - 在`make download`前，配置一下`wget`的`http_proxy``https_proxy``ftp_proxy`，并启用`proxy`。`wget`配置文件在：`/etc/wgetrc`\n- `make` \n - 参数`-j3`，就是3个线程并发编译，这个数字取决于CPU。\n - 参数`V=s`，是显示详细。\n - 参数`package/cups/compile`，是编译单个应用。\n\n# 我的编译成果\n## 固件特点\n- 固件型号：\t**Raspberry Pi 4 Model B Rev 1.2**\n- 1GB 根空间。\n- 镜像内置了USB转rj45驱动\n- 默认支持`bbr`、`tcpdump`\n- 支持`v2ray`，在配置好源后，`opkg update && opkg install v2ray`就能得到。\n - 广告过滤\n - 分流\n - 屏蔽大厂部分产品的日志收集\n - 出口配置样例\n- 编译了package中部分我认为常用的包，如：`luci-app-statistics`、`6to4`、`htop`、`curl`、`fdisk`、`cfdisk`、`ffmpeg`、`luci-app-samba`等。\n\n## 固件源\n\n固件下载、升级：[http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/](http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/)\n\n`/etc/opkg/distfeeds.conf` 源配置：\n```conf\nsrc/gz jf_core http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/packages\nsrc/gz jf_base http://openwrt.wangjunfeng.com.cn/packages/aarch64_cortex-a72/base\nsrc/gz jf_luci http://openwrt.wangjunfeng.com.cn/packages/aarch64_cortex-a72/luci\nsrc/gz jf_packages http://openwrt.wangjunfeng.com.cn/packages/aarch64_cortex-a72/packages\n```\n","slug":"openwrt-compile","published":1,"updated":"2021-01-06T09:56:16.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rq001a2aahetk223pb","content":"<p>之前编译OpenWRT时有很多顾虑。比如：</p>\n<ul>\n<li>太多依赖，担心把自己MacOS装太多不明用处的包。将来无法清理</li>\n<li>担心搞不懂编译过程中遇到的陌生概念。比如：出一个问题，google一下，得到了10个问题！</li>\n<li>不知道编译结果是什么。如何把编译结果变成指定的系统镜像。不相信<code>make</code>能直接出镜像。</li>\n</ul>\n<p>事实上，OpenWRT 团队是群非常实在的人！只需要一次<code>make</code>多版本的IMG镜像和选中的软件包。全编译出来并打好包，还整理得非常整齐！</p>\n<p><a class=\"link\"   href=\"https://openwrt.org/zh-cn/doc/howto/build\" >官方的中文编译说明<i class=\"fas fa-external-link-alt\"></i></a>这里展示了准备好后的编译过程。由此文可见，确实不难！当然，仅凭此一文，不足以指导完成编译！</p>\n<p>下边记录一下我的编译经历。</p>\n<h1 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h1><p>选择在虚拟机里编译。免得污染OS。</p>\n<ul>\n<li>虚拟机选择VirtualBox；因为免费稳健。</li>\n<li>编译OS，选择Alpine Linux；因为它小且便于安装。<ul>\n<li>OpenWRT编译支持几乎所有常见Linux发行版和MacOS。FreeBSD官方文档立了项，但没有写，就此略过。Windows没有看到相关文档。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>虚拟机尽量多给几个CPU核心，因为OpenWRT项目相当大！更多的核心能压缩编译时间。</li>\n<li>虚拟机硬盘给15GB以上，最好20GB以上。</li>\n<li>给装好的OS建立一个新用户。OpenWRT官方不推荐在<code>root</code>账号下编译。</li>\n<li>源码中依赖的第三方库，多数在海外。一架舒适的小飞机，是理想的选择；甚至是必须！</li>\n</ul>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>以下要求，不在本文探讨范围。</p>\n<ul>\n<li>要会用VirtualBox。</li>\n<li>要会安装Alpine Linux。</li>\n<li>要会用git。理解分支和标签的概念和用法。</li>\n<li>自备小飞机。</li>\n</ul>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ul>\n<li>虚拟机环境准备参考：<a class=\"link\"   href=\"https://openwrt.org/docs/guide-developer/build-system/install-buildsystem\" >Build system – Installation<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>编译过程及选项参考：<a class=\"link\"   href=\"https://openwrt.org/docs/guide-developer/build-system/use-buildsystem\" >Build system – Usage<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h1 id=\"重点提示：\"><a href=\"#重点提示：\" class=\"headerlink\" title=\"重点提示：\"></a>重点提示：</h1><ul>\n<li>环境准备，在装完OS后，其实很简单。只要在<a class=\"link\"   href=\"https://openwrt.org/docs/guide-developer/build-system/install-buildsystem\" >Build system – Installation<i class=\"fas fa-external-link-alt\"></i></a>文章中复制一下对应的安装指令，执行一下；再找个地方clone出源码即可。</li>\n<li><code>git tag</code>查找需要的版本。<code>git checkout</code>需要的版本。</li>\n<li><code>./scripts/feeds</code> feeds 指令是管理Apk（OpenWRT上的安装包）的。就像MacOS上的<code>brew</code>。在<code>menuconfig</code>之前值得更新一下，<code>./scripts/feeds update -a</code>。</li>\n<li>自己的安装包将来也是在这里创建和管理、编译。</li>\n<li><code>make menuconfig</code> 有UI界面，可在UI界面上选择要编译的镜像的目标设备。如：选择<code>brcm2708</code>是<code>Raspberry Pi</code>类型的芯片，子类型对应<code>Raspberry Pi</code>的不同Model版本，如：<code>bcm2710</code>是<code>Raspberry Pi 3</code>的芯片型号。</li>\n<li><code>make defconfig</code> 设置默认项</li>\n<li><code>make kernel_menuconfig</code> 望文生义，内核配置，一般不需要。</li>\n<li><code>make download</code> 下载源码编译过程中依赖的工具。</li>\n<li>在<code>make download</code>前，配置一下<code>wget</code>的<code>http_proxy``https_proxy``ftp_proxy</code>，并启用<code>proxy</code>。<code>wget</code>配置文件在：<code>/etc/wgetrc</code></li>\n<li><code>make</code> </li>\n<li>参数<code>-j3</code>，就是3个线程并发编译，这个数字取决于CPU。</li>\n<li>参数<code>V=s</code>，是显示详细。</li>\n<li>参数<code>package/cups/compile</code>，是编译单个应用。</li>\n</ul>\n<h1 id=\"我的编译成果\"><a href=\"#我的编译成果\" class=\"headerlink\" title=\"我的编译成果\"></a>我的编译成果</h1><h2 id=\"固件特点\"><a href=\"#固件特点\" class=\"headerlink\" title=\"固件特点\"></a>固件特点</h2><ul>\n<li>固件型号：    <strong>Raspberry Pi 4 Model B Rev 1.2</strong></li>\n<li>1GB 根空间。</li>\n<li>镜像内置了USB转rj45驱动</li>\n<li>默认支持<code>bbr</code>、<code>tcpdump</code></li>\n<li>支持<code>v2ray</code>，在配置好源后，<code>opkg update &amp;&amp; opkg install v2ray</code>就能得到。</li>\n<li>广告过滤</li>\n<li>分流</li>\n<li>屏蔽大厂部分产品的日志收集</li>\n<li>出口配置样例</li>\n<li>编译了package中部分我认为常用的包，如：<code>luci-app-statistics</code>、<code>6to4</code>、<code>htop</code>、<code>curl</code>、<code>fdisk</code>、<code>cfdisk</code>、<code>ffmpeg</code>、<code>luci-app-samba</code>等。</li>\n</ul>\n<h2 id=\"固件源\"><a href=\"#固件源\" class=\"headerlink\" title=\"固件源\"></a>固件源</h2><p>固件下载、升级：<a class=\"link\"   href=\"http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/\" >http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><code>/etc/opkg/distfeeds.conf</code> 源配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src&#x2F;gz jf_core http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;targets&#x2F;bcm27xx&#x2F;bcm2711&#x2F;packages</span><br><span class=\"line\">src&#x2F;gz jf_base http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;packages&#x2F;aarch64_cortex-a72&#x2F;base</span><br><span class=\"line\">src&#x2F;gz jf_luci http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;packages&#x2F;aarch64_cortex-a72&#x2F;luci</span><br><span class=\"line\">src&#x2F;gz jf_packages http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;packages&#x2F;aarch64_cortex-a72&#x2F;packages</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>之前编译OpenWRT时有很多顾虑。比如：</p>\n<ul>\n<li>太多依赖，担心把自己MacOS装太多不明用处的包。将来无法清理</li>\n<li>担心搞不懂编译过程中遇到的陌生概念。比如：出一个问题，google一下，得到了10个问题！</li>\n<li>不知道编译结果是什么。如何把编译结果变成指定的系统镜像。不相信<code>make</code>能直接出镜像。</li>\n</ul>\n<p>事实上，OpenWRT 团队是群非常实在的人！只需要一次<code>make</code>多版本的IMG镜像和选中的软件包。全编译出来并打好包，还整理得非常整齐！</p>\n<p><a class=\"link\"   href=\"https://openwrt.org/zh-cn/doc/howto/build\" >官方的中文编译说明<i class=\"fas fa-external-link-alt\"></i></a>这里展示了准备好后的编译过程。由此文可见，确实不难！当然，仅凭此一文，不足以指导完成编译！</p>\n<p>下边记录一下我的编译经历。</p>\n<h1 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h1><p>选择在虚拟机里编译。免得污染OS。</p>\n<ul>\n<li>虚拟机选择VirtualBox；因为免费稳健。</li>\n<li>编译OS，选择Alpine Linux；因为它小且便于安装。<ul>\n<li>OpenWRT编译支持几乎所有常见Linux发行版和MacOS。FreeBSD官方文档立了项，但没有写，就此略过。Windows没有看到相关文档。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>虚拟机尽量多给几个CPU核心，因为OpenWRT项目相当大！更多的核心能压缩编译时间。</li>\n<li>虚拟机硬盘给15GB以上，最好20GB以上。</li>\n<li>给装好的OS建立一个新用户。OpenWRT官方不推荐在<code>root</code>账号下编译。</li>\n<li>源码中依赖的第三方库，多数在海外。一架舒适的小飞机，是理想的选择；甚至是必须！</li>\n</ul>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>以下要求，不在本文探讨范围。</p>\n<ul>\n<li>要会用VirtualBox。</li>\n<li>要会安装Alpine Linux。</li>\n<li>要会用git。理解分支和标签的概念和用法。</li>\n<li>自备小飞机。</li>\n</ul>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ul>\n<li>虚拟机环境准备参考：<a class=\"link\"   href=\"https://openwrt.org/docs/guide-developer/build-system/install-buildsystem\" >Build system – Installation<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>编译过程及选项参考：<a class=\"link\"   href=\"https://openwrt.org/docs/guide-developer/build-system/use-buildsystem\" >Build system – Usage<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h1 id=\"重点提示：\"><a href=\"#重点提示：\" class=\"headerlink\" title=\"重点提示：\"></a>重点提示：</h1><ul>\n<li>环境准备，在装完OS后，其实很简单。只要在<a class=\"link\"   href=\"https://openwrt.org/docs/guide-developer/build-system/install-buildsystem\" >Build system – Installation<i class=\"fas fa-external-link-alt\"></i></a>文章中复制一下对应的安装指令，执行一下；再找个地方clone出源码即可。</li>\n<li><code>git tag</code>查找需要的版本。<code>git checkout</code>需要的版本。</li>\n<li><code>./scripts/feeds</code> feeds 指令是管理Apk（OpenWRT上的安装包）的。就像MacOS上的<code>brew</code>。在<code>menuconfig</code>之前值得更新一下，<code>./scripts/feeds update -a</code>。</li>\n<li>自己的安装包将来也是在这里创建和管理、编译。</li>\n<li><code>make menuconfig</code> 有UI界面，可在UI界面上选择要编译的镜像的目标设备。如：选择<code>brcm2708</code>是<code>Raspberry Pi</code>类型的芯片，子类型对应<code>Raspberry Pi</code>的不同Model版本，如：<code>bcm2710</code>是<code>Raspberry Pi 3</code>的芯片型号。</li>\n<li><code>make defconfig</code> 设置默认项</li>\n<li><code>make kernel_menuconfig</code> 望文生义，内核配置，一般不需要。</li>\n<li><code>make download</code> 下载源码编译过程中依赖的工具。</li>\n<li>在<code>make download</code>前，配置一下<code>wget</code>的<code>http_proxy``https_proxy``ftp_proxy</code>，并启用<code>proxy</code>。<code>wget</code>配置文件在：<code>/etc/wgetrc</code></li>\n<li><code>make</code> </li>\n<li>参数<code>-j3</code>，就是3个线程并发编译，这个数字取决于CPU。</li>\n<li>参数<code>V=s</code>，是显示详细。</li>\n<li>参数<code>package/cups/compile</code>，是编译单个应用。</li>\n</ul>\n<h1 id=\"我的编译成果\"><a href=\"#我的编译成果\" class=\"headerlink\" title=\"我的编译成果\"></a>我的编译成果</h1><h2 id=\"固件特点\"><a href=\"#固件特点\" class=\"headerlink\" title=\"固件特点\"></a>固件特点</h2><ul>\n<li>固件型号：    <strong>Raspberry Pi 4 Model B Rev 1.2</strong></li>\n<li>1GB 根空间。</li>\n<li>镜像内置了USB转rj45驱动</li>\n<li>默认支持<code>bbr</code>、<code>tcpdump</code></li>\n<li>支持<code>v2ray</code>，在配置好源后，<code>opkg update &amp;&amp; opkg install v2ray</code>就能得到。</li>\n<li>广告过滤</li>\n<li>分流</li>\n<li>屏蔽大厂部分产品的日志收集</li>\n<li>出口配置样例</li>\n<li>编译了package中部分我认为常用的包，如：<code>luci-app-statistics</code>、<code>6to4</code>、<code>htop</code>、<code>curl</code>、<code>fdisk</code>、<code>cfdisk</code>、<code>ffmpeg</code>、<code>luci-app-samba</code>等。</li>\n</ul>\n<h2 id=\"固件源\"><a href=\"#固件源\" class=\"headerlink\" title=\"固件源\"></a>固件源</h2><p>固件下载、升级：<a class=\"link\"   href=\"http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/\" >http://openwrt.wangjunfeng.com.cn/targets/bcm27xx/bcm2711/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><code>/etc/opkg/distfeeds.conf</code> 源配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src&#x2F;gz jf_core http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;targets&#x2F;bcm27xx&#x2F;bcm2711&#x2F;packages</span><br><span class=\"line\">src&#x2F;gz jf_base http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;packages&#x2F;aarch64_cortex-a72&#x2F;base</span><br><span class=\"line\">src&#x2F;gz jf_luci http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;packages&#x2F;aarch64_cortex-a72&#x2F;luci</span><br><span class=\"line\">src&#x2F;gz jf_packages http:&#x2F;&#x2F;openwrt.wangjunfeng.com.cn&#x2F;packages&#x2F;aarch64_cortex-a72&#x2F;packages</span><br></pre></td></tr></table></figure>"},{"title":"OpenWRT实现内网tcp连接请求整形 搭建逼真开发环境","date":"2020-08-04T09:20:41.000Z","_content":"\n# 开发环境\n## 头疼的配置\n开发者本地开发一款网络应用时，一般是在测试时，使用测试域名/IP。发布时使用正式域名/IP。\n\n看似简单的小操作。但在多轮迭代时，这个小操作一但出错，会出大问题。\n\n如果开发环境配置与生产环境完全一样，那就省事许多。\n\n在有自己可控的内网路由情况下，实现起来，一般有两种方式：DNS劫持、IP劫持。\n\n## DNS劫持\n只需在登入OpenWRT后，把域名新的解析写入 `/etc/hosts` 。再 `/etc/init.d/dnsmasq reload` 重载一下`dnsmasq`就好了。简单好用！\n\n## IP劫持\n这个相对复杂一些。因为在OpenWRT的 `网络 - 防火墙 - NAT 规则` 只支持重写源地址，不支持重写目标地址。\n\n这就得手动写`网络 - 防火墙 - 自定义规则`了！\n### IPv4劫持\nIPv4的规则直接写就可以，例如：\n```shell script\niptables -t nat -A PREROUTING -i br-lan -d 1.2.3.4 -p tcp -m tcp --dport 443 -m comment --comment \"dev\" -j DNAT --to-destination 192.168.1.2:443\n```\n\n### IPv6劫持\nIPv6就麻烦些了。因为IPv6设计目标就是弃用`NAT`（因为有几乎无穷的地址资源）。\n虽然按标准应该不用，但依旧有`热心人`对它进行了实现。\n\n在`系统 - 软件包`里搜索并安装：`kmod-ipt-nat` `ip6tables-mod-nat`。这就具备了对IPv6进行`NAT`的能力了！\n\n但不能直接写规则；需先开启发住内网的v6的伪装。例如：\n```shell script\nip6tables -t nat -I POSTROUTING -o br-lan -j MASQUERADE\n```\n再给从内网发出的包写具体规则；例如：\n```shell script\nip6tables -t nat -A PREROUTING -i br-lan -d 2408:4002:xx::xx -p tcp -m tcp --dport 443 -m comment --comment \"dev\" -j DNAT --to-destination [2408:8207:xx:xx::2]:443\n```\n","source":"_posts/openwrt-ipv6-firewall-forward.md","raw":"---\ntitle: OpenWRT实现内网tcp连接请求整形 搭建逼真开发环境\ndate: 2020-08-04 17:20:41\ntags: [ip6tables, ipv6, OpenWRT]\n---\n\n# 开发环境\n## 头疼的配置\n开发者本地开发一款网络应用时，一般是在测试时，使用测试域名/IP。发布时使用正式域名/IP。\n\n看似简单的小操作。但在多轮迭代时，这个小操作一但出错，会出大问题。\n\n如果开发环境配置与生产环境完全一样，那就省事许多。\n\n在有自己可控的内网路由情况下，实现起来，一般有两种方式：DNS劫持、IP劫持。\n\n## DNS劫持\n只需在登入OpenWRT后，把域名新的解析写入 `/etc/hosts` 。再 `/etc/init.d/dnsmasq reload` 重载一下`dnsmasq`就好了。简单好用！\n\n## IP劫持\n这个相对复杂一些。因为在OpenWRT的 `网络 - 防火墙 - NAT 规则` 只支持重写源地址，不支持重写目标地址。\n\n这就得手动写`网络 - 防火墙 - 自定义规则`了！\n### IPv4劫持\nIPv4的规则直接写就可以，例如：\n```shell script\niptables -t nat -A PREROUTING -i br-lan -d 1.2.3.4 -p tcp -m tcp --dport 443 -m comment --comment \"dev\" -j DNAT --to-destination 192.168.1.2:443\n```\n\n### IPv6劫持\nIPv6就麻烦些了。因为IPv6设计目标就是弃用`NAT`（因为有几乎无穷的地址资源）。\n虽然按标准应该不用，但依旧有`热心人`对它进行了实现。\n\n在`系统 - 软件包`里搜索并安装：`kmod-ipt-nat` `ip6tables-mod-nat`。这就具备了对IPv6进行`NAT`的能力了！\n\n但不能直接写规则；需先开启发住内网的v6的伪装。例如：\n```shell script\nip6tables -t nat -I POSTROUTING -o br-lan -j MASQUERADE\n```\n再给从内网发出的包写具体规则；例如：\n```shell script\nip6tables -t nat -A PREROUTING -i br-lan -d 2408:4002:xx::xx -p tcp -m tcp --dport 443 -m comment --comment \"dev\" -j DNAT --to-destination [2408:8207:xx:xx::2]:443\n```\n","slug":"openwrt-ipv6-firewall-forward","published":1,"updated":"2021-01-06T09:56:16.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rr001c2aah3xz41tjj","content":"<h1 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h1><h2 id=\"头疼的配置\"><a href=\"#头疼的配置\" class=\"headerlink\" title=\"头疼的配置\"></a>头疼的配置</h2><p>开发者本地开发一款网络应用时，一般是在测试时，使用测试域名/IP。发布时使用正式域名/IP。</p>\n<p>看似简单的小操作。但在多轮迭代时，这个小操作一但出错，会出大问题。</p>\n<p>如果开发环境配置与生产环境完全一样，那就省事许多。</p>\n<p>在有自己可控的内网路由情况下，实现起来，一般有两种方式：DNS劫持、IP劫持。</p>\n<h2 id=\"DNS劫持\"><a href=\"#DNS劫持\" class=\"headerlink\" title=\"DNS劫持\"></a>DNS劫持</h2><p>只需在登入OpenWRT后，把域名新的解析写入 <code>/etc/hosts</code> 。再 <code>/etc/init.d/dnsmasq reload</code> 重载一下<code>dnsmasq</code>就好了。简单好用！</p>\n<h2 id=\"IP劫持\"><a href=\"#IP劫持\" class=\"headerlink\" title=\"IP劫持\"></a>IP劫持</h2><p>这个相对复杂一些。因为在OpenWRT的 <code>网络 - 防火墙 - NAT 规则</code> 只支持重写源地址，不支持重写目标地址。</p>\n<p>这就得手动写<code>网络 - 防火墙 - 自定义规则</code>了！</p>\n<h3 id=\"IPv4劫持\"><a href=\"#IPv4劫持\" class=\"headerlink\" title=\"IPv4劫持\"></a>IPv4劫持</h3><p>IPv4的规则直接写就可以，例如：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -i br-lan -d 1.2.3.4 -p tcp -m tcp --dport 443 -m comment --comment &quot;dev&quot; -j DNAT --to-destination 192.168.1.2:443</span><br></pre></td></tr></table></figure>\n<h3 id=\"IPv6劫持\"><a href=\"#IPv6劫持\" class=\"headerlink\" title=\"IPv6劫持\"></a>IPv6劫持</h3><p>IPv6就麻烦些了。因为IPv6设计目标就是弃用<code>NAT</code>（因为有几乎无穷的地址资源）。<br>虽然按标准应该不用，但依旧有<code>热心人</code>对它进行了实现。</p>\n<p>在<code>系统 - 软件包</code>里搜索并安装：<code>kmod-ipt-nat</code> <code>ip6tables-mod-nat</code>。这就具备了对IPv6进行<code>NAT</code>的能力了！</p>\n<p>但不能直接写规则；需先开启发住内网的v6的伪装。例如：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -I POSTROUTING -o br-lan -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<p>再给从内网发出的包写具体规则；例如：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -A PREROUTING -i br-lan -d 2408:4002:xx::xx -p tcp -m tcp --dport 443 -m comment --comment &quot;dev&quot; -j DNAT --to-destination [2408:8207:xx:xx::2]:443</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h1><h2 id=\"头疼的配置\"><a href=\"#头疼的配置\" class=\"headerlink\" title=\"头疼的配置\"></a>头疼的配置</h2><p>开发者本地开发一款网络应用时，一般是在测试时，使用测试域名/IP。发布时使用正式域名/IP。</p>\n<p>看似简单的小操作。但在多轮迭代时，这个小操作一但出错，会出大问题。</p>\n<p>如果开发环境配置与生产环境完全一样，那就省事许多。</p>\n<p>在有自己可控的内网路由情况下，实现起来，一般有两种方式：DNS劫持、IP劫持。</p>\n<h2 id=\"DNS劫持\"><a href=\"#DNS劫持\" class=\"headerlink\" title=\"DNS劫持\"></a>DNS劫持</h2><p>只需在登入OpenWRT后，把域名新的解析写入 <code>/etc/hosts</code> 。再 <code>/etc/init.d/dnsmasq reload</code> 重载一下<code>dnsmasq</code>就好了。简单好用！</p>\n<h2 id=\"IP劫持\"><a href=\"#IP劫持\" class=\"headerlink\" title=\"IP劫持\"></a>IP劫持</h2><p>这个相对复杂一些。因为在OpenWRT的 <code>网络 - 防火墙 - NAT 规则</code> 只支持重写源地址，不支持重写目标地址。</p>\n<p>这就得手动写<code>网络 - 防火墙 - 自定义规则</code>了！</p>\n<h3 id=\"IPv4劫持\"><a href=\"#IPv4劫持\" class=\"headerlink\" title=\"IPv4劫持\"></a>IPv4劫持</h3><p>IPv4的规则直接写就可以，例如：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -i br-lan -d 1.2.3.4 -p tcp -m tcp --dport 443 -m comment --comment &quot;dev&quot; -j DNAT --to-destination 192.168.1.2:443</span><br></pre></td></tr></table></figure>\n<h3 id=\"IPv6劫持\"><a href=\"#IPv6劫持\" class=\"headerlink\" title=\"IPv6劫持\"></a>IPv6劫持</h3><p>IPv6就麻烦些了。因为IPv6设计目标就是弃用<code>NAT</code>（因为有几乎无穷的地址资源）。<br>虽然按标准应该不用，但依旧有<code>热心人</code>对它进行了实现。</p>\n<p>在<code>系统 - 软件包</code>里搜索并安装：<code>kmod-ipt-nat</code> <code>ip6tables-mod-nat</code>。这就具备了对IPv6进行<code>NAT</code>的能力了！</p>\n<p>但不能直接写规则；需先开启发住内网的v6的伪装。例如：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -I POSTROUTING -o br-lan -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<p>再给从内网发出的包写具体规则；例如：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -A PREROUTING -i br-lan -d 2408:4002:xx::xx -p tcp -m tcp --dport 443 -m comment --comment &quot;dev&quot; -j DNAT --to-destination [2408:8207:xx:xx::2]:443</span><br></pre></td></tr></table></figure>"},{"title":"RaspberryPI上安装OpenWRT","date":"2019-12-04T13:20:25.000Z","_content":"\n# 设计\n家用网络拓扑设计\n```mermaid\ngraph LR\nlt((联通宽带))\nsubgraph Raspberry PI\nopenwrt(OpenWRT)\nend\ntp(TP-Link)\nmac(Laptop)\nphone(Phone)\nsubgraph Raspberry PI 2\nosmc(OSMC Dodi)\nend\ntv(TV)\ndisk[(USB 硬盘)]\n\nlt ---|光猫桥接| openwrt\nopenwrt ---|USB转网线| tp\nopenwrt --- disk\ntp -. wifi .- mac\ntp -. wifi .- phone\ntp ---|网线| osmc\nosmc ---|HDMI| tv \nopenwrt -. wifi .- mac\nopenwrt -. wifi .- phone\n```\n\n路由器连接RPI由网线接口。RPI连接电视由HDMI接口。\n\n# 配件准备\n唯独RPI连接路由器。额外需要一个 USB转网口。\n淘宝之：\n![image](https://gd4.alicdn.com/imgextra/i4/4282361926/O1CN0184Ycaa1Q69NjPfQVD_!!4282361926.png_400x400.jpg)\n[树莓派USB2.0 HUB 网卡加hub 分线器转RJ45外置有线网卡 USB网口](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.2b562e8d64yuA7&id=597724398426&_u=416uj6v1a71)\n\n# 刷OS\nOpenWRT 官方提供了详细的解说。\n[OpenWrt Project: Raspberry Pi](https://openwrt.org/toh/raspberry_pi_foundation/raspberry_pi)\n\n# 设置\n启动后。通过web连接至OpenWRT。\n\n## 设置USTC源\n在【系统】-【软件包】-【配置】将软件源全替换为USTC源。\n- [USTC配置帮助](https://mirrors.ustc.edu.cn/help/lede.html)\n配置效果：\n```text\nsrc/gz openwrt_core http://mirrors.ustc.edu.cn/lede/releases/18.06.5/targets/arm_arm1176jzf-s_vfp/packages\nsrc/gz openwrt_base http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/base\nsrc/gz openwrt_luci http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/luci\nsrc/gz openwrt_packages http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/packages\nsrc/gz openwrt_routing http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/routing\nsrc/gz openwrt_telephony http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/telephony\n```\n\n## 安装需要的包\n\n- 中文语言包：luci-i18n-base-zh-cn\n- USB转网口：kmod-usb-net-rtl8152\n- 开启BBR：kmod-tcp-bbr\n\n## 编译V2ray\nv2ray的arm版对不同版本芯片支持不完整。辣么，自己动手！\n查看芯片信息：`cat /proc/cpuinfo`\n参考[手工构建](https://www.v2ray.com/developer/intro/compile.html#manualbuild)\n参考[golang ARM芯片构建支持情况](https://github.com/golang/go/wiki/GoArm)\n- 源码准备：`go get github.com/v2ray/v2ray-core`\n- 编译`v2ray`：`GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ray -ldflags \"-s -w\"`\n- 编译`v2ctl`：`GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ctl -ldflags \"-s -w\" -tags confonly `\n\n","source":"_posts/openwrt-on-raspberry-pi.md","raw":"---\ntitle: RaspberryPI上安装OpenWRT\ndate: 2019-12-04 21:20:25\ntags: [RaspberryPi, OpenWRT]\n---\n\n# 设计\n家用网络拓扑设计\n```mermaid\ngraph LR\nlt((联通宽带))\nsubgraph Raspberry PI\nopenwrt(OpenWRT)\nend\ntp(TP-Link)\nmac(Laptop)\nphone(Phone)\nsubgraph Raspberry PI 2\nosmc(OSMC Dodi)\nend\ntv(TV)\ndisk[(USB 硬盘)]\n\nlt ---|光猫桥接| openwrt\nopenwrt ---|USB转网线| tp\nopenwrt --- disk\ntp -. wifi .- mac\ntp -. wifi .- phone\ntp ---|网线| osmc\nosmc ---|HDMI| tv \nopenwrt -. wifi .- mac\nopenwrt -. wifi .- phone\n```\n\n路由器连接RPI由网线接口。RPI连接电视由HDMI接口。\n\n# 配件准备\n唯独RPI连接路由器。额外需要一个 USB转网口。\n淘宝之：\n![image](https://gd4.alicdn.com/imgextra/i4/4282361926/O1CN0184Ycaa1Q69NjPfQVD_!!4282361926.png_400x400.jpg)\n[树莓派USB2.0 HUB 网卡加hub 分线器转RJ45外置有线网卡 USB网口](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.2b562e8d64yuA7&id=597724398426&_u=416uj6v1a71)\n\n# 刷OS\nOpenWRT 官方提供了详细的解说。\n[OpenWrt Project: Raspberry Pi](https://openwrt.org/toh/raspberry_pi_foundation/raspberry_pi)\n\n# 设置\n启动后。通过web连接至OpenWRT。\n\n## 设置USTC源\n在【系统】-【软件包】-【配置】将软件源全替换为USTC源。\n- [USTC配置帮助](https://mirrors.ustc.edu.cn/help/lede.html)\n配置效果：\n```text\nsrc/gz openwrt_core http://mirrors.ustc.edu.cn/lede/releases/18.06.5/targets/arm_arm1176jzf-s_vfp/packages\nsrc/gz openwrt_base http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/base\nsrc/gz openwrt_luci http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/luci\nsrc/gz openwrt_packages http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/packages\nsrc/gz openwrt_routing http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/routing\nsrc/gz openwrt_telephony http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/telephony\n```\n\n## 安装需要的包\n\n- 中文语言包：luci-i18n-base-zh-cn\n- USB转网口：kmod-usb-net-rtl8152\n- 开启BBR：kmod-tcp-bbr\n\n## 编译V2ray\nv2ray的arm版对不同版本芯片支持不完整。辣么，自己动手！\n查看芯片信息：`cat /proc/cpuinfo`\n参考[手工构建](https://www.v2ray.com/developer/intro/compile.html#manualbuild)\n参考[golang ARM芯片构建支持情况](https://github.com/golang/go/wiki/GoArm)\n- 源码准备：`go get github.com/v2ray/v2ray-core`\n- 编译`v2ray`：`GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ray -ldflags \"-s -w\"`\n- 编译`v2ctl`：`GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ctl -ldflags \"-s -w\" -tags confonly `\n\n","slug":"openwrt-on-raspberry-pi","published":1,"updated":"2021-02-17T05:25:53.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rs001e2aahghkn8se2","content":"<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><p>家用网络拓扑设计</p>\n<pre class=\"mermaid\">graph LR\nlt((联通宽带))\nsubgraph Raspberry PI\nopenwrt(OpenWRT)\nend\ntp(TP-Link)\nmac(Laptop)\nphone(Phone)\nsubgraph Raspberry PI 2\nosmc(OSMC Dodi)\nend\ntv(TV)\ndisk[(USB 硬盘)]\n\nlt ---|光猫桥接| openwrt\nopenwrt ---|USB转网线| tp\nopenwrt --- disk\ntp -. wifi .- mac\ntp -. wifi .- phone\ntp ---|网线| osmc\nosmc ---|HDMI| tv \nopenwrt -. wifi .- mac\nopenwrt -. wifi .- phone</pre>\n\n<p>路由器连接RPI由网线接口。RPI连接电视由HDMI接口。</p>\n<h1 id=\"配件准备\"><a href=\"#配件准备\" class=\"headerlink\" title=\"配件准备\"></a>配件准备</h1><p>唯独RPI连接路由器。额外需要一个 USB转网口。<br>淘宝之：<br><img src=\"https://gd4.alicdn.com/imgextra/i4/4282361926/O1CN0184Ycaa1Q69NjPfQVD_!!4282361926.png_400x400.jpg\" alt=\"image\"><br><a class=\"link\"   href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.2b562e8d64yuA7&id=597724398426&_u=416uj6v1a71\" >树莓派USB2.0 HUB 网卡加hub 分线器转RJ45外置有线网卡 USB网口<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"刷OS\"><a href=\"#刷OS\" class=\"headerlink\" title=\"刷OS\"></a>刷OS</h1><p>OpenWRT 官方提供了详细的解说。<br><a class=\"link\"   href=\"https://openwrt.org/toh/raspberry_pi_foundation/raspberry_pi\" >OpenWrt Project: Raspberry Pi<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h1><p>启动后。通过web连接至OpenWRT。</p>\n<h2 id=\"设置USTC源\"><a href=\"#设置USTC源\" class=\"headerlink\" title=\"设置USTC源\"></a>设置USTC源</h2><p>在【系统】-【软件包】-【配置】将软件源全替换为USTC源。</p>\n<ul>\n<li><p><a class=\"link\"   href=\"https://mirrors.ustc.edu.cn/help/lede.html\" >USTC配置帮助<i class=\"fas fa-external-link-alt\"></i></a><br>配置效果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/gz openwrt_core http://mirrors.ustc.edu.cn/lede/releases/18.06.5/targets/arm_arm1176jzf-s_vfp/packages</span><br><span class=\"line\">src/gz openwrt_base http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/base</span><br><span class=\"line\">src/gz openwrt_luci http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/luci</span><br><span class=\"line\">src/gz openwrt_packages http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/packages</span><br><span class=\"line\">src/gz openwrt_routing http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/routing</span><br><span class=\"line\">src/gz openwrt_telephony http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/telephony</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装需要的包\"><a href=\"#安装需要的包\" class=\"headerlink\" title=\"安装需要的包\"></a>安装需要的包</h2></li>\n<li><p>中文语言包：luci-i18n-base-zh-cn</p>\n</li>\n<li><p>USB转网口：kmod-usb-net-rtl8152</p>\n</li>\n<li><p>开启BBR：kmod-tcp-bbr</p>\n</li>\n</ul>\n<h2 id=\"编译V2ray\"><a href=\"#编译V2ray\" class=\"headerlink\" title=\"编译V2ray\"></a>编译V2ray</h2><p>v2ray的arm版对不同版本芯片支持不完整。辣么，自己动手！<br>查看芯片信息：<code>cat /proc/cpuinfo</code><br>参考<a class=\"link\"   href=\"https://www.v2ray.com/developer/intro/compile.html#manualbuild\" >手工构建<i class=\"fas fa-external-link-alt\"></i></a><br>参考<a class=\"link\"   href=\"https://github.com/golang/go/wiki/GoArm\" >golang ARM芯片构建支持情况<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>源码准备：<code>go get github.com/v2ray/v2ray-core</code></li>\n<li>编译<code>v2ray</code>：<code>GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ray -ldflags &quot;-s -w&quot;</code></li>\n<li>编译<code>v2ctl</code>：<code>GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ctl -ldflags &quot;-s -w&quot; -tags confonly </code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><p>家用网络拓扑设计</p>\n<pre class=\"mermaid\">graph LR\nlt((联通宽带))\nsubgraph Raspberry PI\nopenwrt(OpenWRT)\nend\ntp(TP-Link)\nmac(Laptop)\nphone(Phone)\nsubgraph Raspberry PI 2\nosmc(OSMC Dodi)\nend\ntv(TV)\ndisk[(USB 硬盘)]\n\nlt ---|光猫桥接| openwrt\nopenwrt ---|USB转网线| tp\nopenwrt --- disk\ntp -. wifi .- mac\ntp -. wifi .- phone\ntp ---|网线| osmc\nosmc ---|HDMI| tv \nopenwrt -. wifi .- mac\nopenwrt -. wifi .- phone</pre>\n\n<p>路由器连接RPI由网线接口。RPI连接电视由HDMI接口。</p>\n<h1 id=\"配件准备\"><a href=\"#配件准备\" class=\"headerlink\" title=\"配件准备\"></a>配件准备</h1><p>唯独RPI连接路由器。额外需要一个 USB转网口。<br>淘宝之：<br><img src=\"https://gd4.alicdn.com/imgextra/i4/4282361926/O1CN0184Ycaa1Q69NjPfQVD_!!4282361926.png_400x400.jpg\" alt=\"image\"><br><a class=\"link\"   href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.2b562e8d64yuA7&id=597724398426&_u=416uj6v1a71\" >树莓派USB2.0 HUB 网卡加hub 分线器转RJ45外置有线网卡 USB网口<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"刷OS\"><a href=\"#刷OS\" class=\"headerlink\" title=\"刷OS\"></a>刷OS</h1><p>OpenWRT 官方提供了详细的解说。<br><a class=\"link\"   href=\"https://openwrt.org/toh/raspberry_pi_foundation/raspberry_pi\" >OpenWrt Project: Raspberry Pi<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h1><p>启动后。通过web连接至OpenWRT。</p>\n<h2 id=\"设置USTC源\"><a href=\"#设置USTC源\" class=\"headerlink\" title=\"设置USTC源\"></a>设置USTC源</h2><p>在【系统】-【软件包】-【配置】将软件源全替换为USTC源。</p>\n<ul>\n<li><p><a class=\"link\"   href=\"https://mirrors.ustc.edu.cn/help/lede.html\" >USTC配置帮助<i class=\"fas fa-external-link-alt\"></i></a><br>配置效果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/gz openwrt_core http://mirrors.ustc.edu.cn/lede/releases/18.06.5/targets/arm_arm1176jzf-s_vfp/packages</span><br><span class=\"line\">src/gz openwrt_base http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/base</span><br><span class=\"line\">src/gz openwrt_luci http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/luci</span><br><span class=\"line\">src/gz openwrt_packages http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/packages</span><br><span class=\"line\">src/gz openwrt_routing http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/routing</span><br><span class=\"line\">src/gz openwrt_telephony http://mirrors.ustc.edu.cn/lede/releases/18.06.5/packages/arm_arm1176jzf-s_vfp/telephony</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装需要的包\"><a href=\"#安装需要的包\" class=\"headerlink\" title=\"安装需要的包\"></a>安装需要的包</h2></li>\n<li><p>中文语言包：luci-i18n-base-zh-cn</p>\n</li>\n<li><p>USB转网口：kmod-usb-net-rtl8152</p>\n</li>\n<li><p>开启BBR：kmod-tcp-bbr</p>\n</li>\n</ul>\n<h2 id=\"编译V2ray\"><a href=\"#编译V2ray\" class=\"headerlink\" title=\"编译V2ray\"></a>编译V2ray</h2><p>v2ray的arm版对不同版本芯片支持不完整。辣么，自己动手！<br>查看芯片信息：<code>cat /proc/cpuinfo</code><br>参考<a class=\"link\"   href=\"https://www.v2ray.com/developer/intro/compile.html#manualbuild\" >手工构建<i class=\"fas fa-external-link-alt\"></i></a><br>参考<a class=\"link\"   href=\"https://github.com/golang/go/wiki/GoArm\" >golang ARM芯片构建支持情况<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>源码准备：<code>go get github.com/v2ray/v2ray-core</code></li>\n<li>编译<code>v2ray</code>：<code>GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ray -ldflags &quot;-s -w&quot;</code></li>\n<li>编译<code>v2ctl</code>：<code>GOPROXY=https://goproxy.io CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -o $HOME/v2ctl -ldflags &quot;-s -w&quot; -tags confonly </code></li>\n</ul>\n"},{"title":"OpenWRT 在 RaspberryPI 播放音频","date":"2020-07-06T04:46:57.000Z","_content":"\nRaspberryPI 不只能满足路由计算需要，还能用于多媒体，如：插上音箱放音乐！\n\n# OpenWrt编译要求\n## 内核驱动类要求：\n- Kernel modules > Sound Support > kmod-sound-core\n- Kernel modules > Sound Support > kmod-sound-arm-bcm2835\n## 软件要求\n- Sound > alsa-utils\n- Sound > madplay\n\n# Raspberry PI 设置\n## 开放设备\n在 `/boot/config.txt` 里添加如下行：\n```text\ndtparam=audio=on\n```\n使Raspberry PI开放音频硬件。不然有驱动程序，但找不到音频设备！\n## 设置音频输出\n通过`amixer`命令完成：\n\n`$ amixer cset numid=3 1` ：指定音频输出接口为 3.5mm 耳机接口\n`$ amixer cset numid=3 2` ：指定音频输出接口为 HDMI\n\n# 使用\n```shell script\n$ madplay music.mp3\n  MPEG Audio Decoder 0.15.2 (beta) - Copyright (C) 2000-2004 Robert Leslie et al.\n```\n","source":"_posts/openwrt-on-raspberrypi-play-audio.md","raw":"---\ntitle: OpenWRT 在 RaspberryPI 播放音频\ndate: 2020-07-06 12:46:57\ntags: [OpenWRT, RaspberryPi, 音频]\n---\n\nRaspberryPI 不只能满足路由计算需要，还能用于多媒体，如：插上音箱放音乐！\n\n# OpenWrt编译要求\n## 内核驱动类要求：\n- Kernel modules > Sound Support > kmod-sound-core\n- Kernel modules > Sound Support > kmod-sound-arm-bcm2835\n## 软件要求\n- Sound > alsa-utils\n- Sound > madplay\n\n# Raspberry PI 设置\n## 开放设备\n在 `/boot/config.txt` 里添加如下行：\n```text\ndtparam=audio=on\n```\n使Raspberry PI开放音频硬件。不然有驱动程序，但找不到音频设备！\n## 设置音频输出\n通过`amixer`命令完成：\n\n`$ amixer cset numid=3 1` ：指定音频输出接口为 3.5mm 耳机接口\n`$ amixer cset numid=3 2` ：指定音频输出接口为 HDMI\n\n# 使用\n```shell script\n$ madplay music.mp3\n  MPEG Audio Decoder 0.15.2 (beta) - Copyright (C) 2000-2004 Robert Leslie et al.\n```\n","slug":"openwrt-on-raspberrypi-play-audio","published":1,"updated":"2021-01-06T09:56:16.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rt001g2aah0w2dcdar","content":"<p>RaspberryPI 不只能满足路由计算需要，还能用于多媒体，如：插上音箱放音乐！</p>\n<h1 id=\"OpenWrt编译要求\"><a href=\"#OpenWrt编译要求\" class=\"headerlink\" title=\"OpenWrt编译要求\"></a>OpenWrt编译要求</h1><h2 id=\"内核驱动类要求：\"><a href=\"#内核驱动类要求：\" class=\"headerlink\" title=\"内核驱动类要求：\"></a>内核驱动类要求：</h2><ul>\n<li>Kernel modules &gt; Sound Support &gt; kmod-sound-core</li>\n<li>Kernel modules &gt; Sound Support &gt; kmod-sound-arm-bcm2835<h2 id=\"软件要求\"><a href=\"#软件要求\" class=\"headerlink\" title=\"软件要求\"></a>软件要求</h2></li>\n<li>Sound &gt; alsa-utils</li>\n<li>Sound &gt; madplay</li>\n</ul>\n<h1 id=\"Raspberry-PI-设置\"><a href=\"#Raspberry-PI-设置\" class=\"headerlink\" title=\"Raspberry PI 设置\"></a>Raspberry PI 设置</h1><h2 id=\"开放设备\"><a href=\"#开放设备\" class=\"headerlink\" title=\"开放设备\"></a>开放设备</h2><p>在 <code>/boot/config.txt</code> 里添加如下行：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtparam=audio=on</span><br></pre></td></tr></table></figure>\n<p>使Raspberry PI开放音频硬件。不然有驱动程序，但找不到音频设备！</p>\n<h2 id=\"设置音频输出\"><a href=\"#设置音频输出\" class=\"headerlink\" title=\"设置音频输出\"></a>设置音频输出</h2><p>通过<code>amixer</code>命令完成：</p>\n<p><code>$ amixer cset numid=3 1</code> ：指定音频输出接口为 3.5mm 耳机接口<br><code>$ amixer cset numid=3 2</code> ：指定音频输出接口为 HDMI</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> madplay music.mp3</span></span><br><span class=\"line\">  MPEG Audio Decoder 0.15.2 (beta) - Copyright (C) 2000-2004 Robert Leslie et al.</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>RaspberryPI 不只能满足路由计算需要，还能用于多媒体，如：插上音箱放音乐！</p>\n<h1 id=\"OpenWrt编译要求\"><a href=\"#OpenWrt编译要求\" class=\"headerlink\" title=\"OpenWrt编译要求\"></a>OpenWrt编译要求</h1><h2 id=\"内核驱动类要求：\"><a href=\"#内核驱动类要求：\" class=\"headerlink\" title=\"内核驱动类要求：\"></a>内核驱动类要求：</h2><ul>\n<li>Kernel modules &gt; Sound Support &gt; kmod-sound-core</li>\n<li>Kernel modules &gt; Sound Support &gt; kmod-sound-arm-bcm2835<h2 id=\"软件要求\"><a href=\"#软件要求\" class=\"headerlink\" title=\"软件要求\"></a>软件要求</h2></li>\n<li>Sound &gt; alsa-utils</li>\n<li>Sound &gt; madplay</li>\n</ul>\n<h1 id=\"Raspberry-PI-设置\"><a href=\"#Raspberry-PI-设置\" class=\"headerlink\" title=\"Raspberry PI 设置\"></a>Raspberry PI 设置</h1><h2 id=\"开放设备\"><a href=\"#开放设备\" class=\"headerlink\" title=\"开放设备\"></a>开放设备</h2><p>在 <code>/boot/config.txt</code> 里添加如下行：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtparam=audio=on</span><br></pre></td></tr></table></figure>\n<p>使Raspberry PI开放音频硬件。不然有驱动程序，但找不到音频设备！</p>\n<h2 id=\"设置音频输出\"><a href=\"#设置音频输出\" class=\"headerlink\" title=\"设置音频输出\"></a>设置音频输出</h2><p>通过<code>amixer</code>命令完成：</p>\n<p><code>$ amixer cset numid=3 1</code> ：指定音频输出接口为 3.5mm 耳机接口<br><code>$ amixer cset numid=3 2</code> ：指定音频输出接口为 HDMI</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> madplay music.mp3</span></span><br><span class=\"line\">  MPEG Audio Decoder 0.15.2 (beta) - Copyright (C) 2000-2004 Robert Leslie et al.</span><br></pre></td></tr></table></figure>"},{"title":"plan 9 效应 - 为什么功能没坏，你就不该去重构它！","date":"2019-08-05T13:27:46.000Z","_content":"Plan-9是一个很棒的、很先进的，而且完全是全新实现的Unix系统，它的目的就是要最终解决Unix最初的诺言：一切皆为文件。你听说过这套系统吗？没有？那好，下面就是为什么。\n\n我十分确信你不知道Plan-9是什么东西，并且很有可能你还是第一次听说这个名字。\n\nPlan-9是一款神奇的新版Unix，几乎是由70年代当初开发Unix系统的同一个团队开发的。它的确是一款非常酷的操作系统。它跟Unix非常相似，但它不是Unix，它纠正了Unix系统里很多不一致的、古怪的、至今仍然存在的特性。\n\nUnix在当初立项时有个这样的许诺：系统里任何的东西都是‘文件’——根据某些文件的定义。例如，sockets，也许称作网络连接更合适，它们就不是文件，进程也不是文件。\n\n在Plan-9中，所有的这些问题都解决了！先进的9P虚拟文件系统协议最终让所有东西都成为了文件。目录变成了“命名空间”，资源被映射成了文件。多么神奇！现在，你可以通过对/proc目录(现在应该成其为一个命名空间)里的一个文件使用“cat”命令来查看进程的情况。同样，打开一个网络连接的方式变成了打开/net/tcp目录里的一个文件，这就是它。”iotcl”系统调用在这个系统里完全被根除了，因为基于操作系统上的现代文件形式中的这种怪胎已经不再需要了。\n\n## 那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\n\n你从来没有听说过它的原因是，它并不是一款成功的操作系统。这怎么可能呢？是这样的，是因为Plan-9实际上没有解决任何问题。在Unix世界里，从来没有人抱怨说Unix没有兑现当初关于文件抽象的诺言。\n\n在随后的日子里，Plan-9里的/proc文件系统概念被人移植到到了Solaris等很多其他商业版Unix系统里(Linux也采用了它)。 Plan-9里另外一个非常著名的首创——UTF-8——被迅速的被众多其它操作系统采用，不仅仅是Unix家族。在所有的操作系统里，即使存在一些由于各种原因没有采用UTF-8的，它们也开发出来将UTF-8和本地编码转换的程序库。\n\nPlan-9的对于网络通信的特殊的处理方式需要在这里特别的说明一下。虽然用基于命名空间/文件系统的方式来代替专用API来处理网络操作，听起来很吸引人，但是整个Unix世界，不仅所有人都已经接受了使用伯克利Socket API做为标准方式来进行网络编程，甚至Windows平台也实现了几乎相同的API里简化各种网络应用向Windows上移植——虽然存在一些小问题。\n\n更重要的是，Plan-9发明的这种与众不同的网络编程编程方式在诞生之日就注定了毫无用处。因为在当时，大部分做网络编程的人都已经转向了更高的网络抽象层。RPC和Corba已经诞生，所有的需要跟远程服务器通信的应用全都转向了它们。程序员为了跟远程服务通信时需要打开sockets的机会越来越少，所有的他们都已经习惯了使用Berkeley API。(旁注：曾经有一个POSIX模拟层，叫做APE“ANSI/POSIX Environment”，试图将Plan-9上的某些功能映射到POSIX对应的功能上。这个模拟层一直都没实现，因为一些应用——例如X11——的迁移过于复杂，不可能完成。“维持它正确运行的工作量太过巨大”——维基百科。)\n\nPlan-9的一个最主要的问题出在AT&T和Unix幕后的这群人身上，尽管他们都是才华横溢的科学家和程序员，但他们不懂得如何去开发商业软件，而AT&T也从来没打算进入软件业。这些，我承认听起来有些大不敬，但事实就是这样。他们使用软件，他们喜欢开发内部软件来运行他们的高端网络设备，但是他们却从来不去开发要卖给别人的软件，而且跟Sun，IBM，微软等商业公司不一样，这从来不是他们的资金的主要来源。这就意味着他们不需要有外部世界需要什么样的软件的意识。举个例子，Sun公司就需要这样的意识，所以他们开发出了RPC。他们认识到人们在进行网络编程时很痛苦，他们看到了创建一个网络抽象层的商业机会：“嗨，大伙们，SunOS有一个很酷的东西，让我们能够不直接跟sockets打交道就可以开发出网络应用！你绝对应该使用SunOS”。\n\n还有，在Plan-9中，很多“好的老的东西”被删除了，大量的跟其它Unix不兼容的东西被加入了系统。这几乎打消了众多公司试图将他们的应用迁移到Plan-9的念头。如果你不知道这样一个新系统是否能够获得成功，那为什么要耗费了大量的工作把自己的应用迁移到这个新平台上呢？这就是典型的鸡生蛋蛋生鸡问题：一个操作系统的价值就在于上面有大量应用可运行，无它。如果一个系统很新，你要做的是必须发展一个能够支持各种应用的生态系统，通过它们让这个系统变得有价值。只有两条路能做到这样。第一个就是让这个系统跟目前现存的系统保持最大的兼容，也就是Unix， POSIX 和 Motif 这些系统。第二个就是创建自己的生态系统，以此来提升新系统的价值，微软Windows和Office办公系统软件就是典型例子。\n\n## 我们应该从Plan-9的历史教训中总结出一些经验吗？\n当然，我们至少可以获得下面这些：\n\n- 首先是，不要试图去修改那些没有坏或你认为不够好的东西，如果要修，只去修改出问题的部分，不要去修改看起来很笨——但事实上是在按要求工作的东西。例如，UTF-8是个非常棒的创意，你需要它，但你可以用程序库或子系统实现它，这样其它系统也能使用它，而不是去基于这个编码开发出一套全新的操作系统。\n- 第二个是，在开发一个你的系统前，先去搞清楚它是否有市场，或者人们是否需要这个东西。例如，/net/tcp文件系统绝对是一个精彩的纯学术课题，如果是早几年，它一定能完胜Berkeley sockets，但不应该是在直接使用Socket的人群已经没剩几个的时候。\n- 第三，要么完全的独立自主，要么跟现有的系统保持最大兼容。但Plan-9却处在它完全不应该的位置：中间。这套系统既不跟现有的所有Unix系统兼容，同时也不提供其它Unix系统中都有的、必要的工具。没有高级文本编辑器、表格软件、CAD程序和服务器软件。它就是一个神奇的空盒子，却没有提供任何方法让人们容易的把东西放进去。\n\n这些看起来都是一些非常高层的东西，并不是特别跟程序员的日常开发相关。看起来是这样，但事实远非如此。现如今，你可以很容易的开创自己的事业，开始向用户提供某种的服务。然而，你的服务是一个有价值的产品？还是变成了另外一个Plan-9传奇？这并不是很容易判断的事。例如，你的打算开发一个报表系统，来展现监控数据或其它任何可视的状态，如果你没有提供用它将这些报表导入到Excel的功能，那你在写第一行代码前就输了。如果你打算开发一个新的Web社交应用，而你没有提供使用Fackbook、Twitter或LinkedIn登录的方式，那你在搭建WEB服务器前就输了。如果你web服务中信息的导出方式没有采用RSS或ATOM，而是采用了一种全新的格式，猜会怎么样？你在吸引到第一个用户前就输了。但是，比着一切更重要的是：你的产品真正的解决了一个现实存在的问题吗？\n\n翻译自：[The Plan-9 Effect or why you should not fix it if it ain't broken](http://www.di.unipi.it/~nids/docs/the_plan-9_effect.html)","source":"_posts/plan-9-effect.md","raw":"---\ntitle: plan 9 效应 - 为什么功能没坏，你就不该去重构它！\ndate: 2019-08-05 21:27:46\ntags: [plan9, 架构]\n---\nPlan-9是一个很棒的、很先进的，而且完全是全新实现的Unix系统，它的目的就是要最终解决Unix最初的诺言：一切皆为文件。你听说过这套系统吗？没有？那好，下面就是为什么。\n\n我十分确信你不知道Plan-9是什么东西，并且很有可能你还是第一次听说这个名字。\n\nPlan-9是一款神奇的新版Unix，几乎是由70年代当初开发Unix系统的同一个团队开发的。它的确是一款非常酷的操作系统。它跟Unix非常相似，但它不是Unix，它纠正了Unix系统里很多不一致的、古怪的、至今仍然存在的特性。\n\nUnix在当初立项时有个这样的许诺：系统里任何的东西都是‘文件’——根据某些文件的定义。例如，sockets，也许称作网络连接更合适，它们就不是文件，进程也不是文件。\n\n在Plan-9中，所有的这些问题都解决了！先进的9P虚拟文件系统协议最终让所有东西都成为了文件。目录变成了“命名空间”，资源被映射成了文件。多么神奇！现在，你可以通过对/proc目录(现在应该成其为一个命名空间)里的一个文件使用“cat”命令来查看进程的情况。同样，打开一个网络连接的方式变成了打开/net/tcp目录里的一个文件，这就是它。”iotcl”系统调用在这个系统里完全被根除了，因为基于操作系统上的现代文件形式中的这种怪胎已经不再需要了。\n\n## 那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\n\n你从来没有听说过它的原因是，它并不是一款成功的操作系统。这怎么可能呢？是这样的，是因为Plan-9实际上没有解决任何问题。在Unix世界里，从来没有人抱怨说Unix没有兑现当初关于文件抽象的诺言。\n\n在随后的日子里，Plan-9里的/proc文件系统概念被人移植到到了Solaris等很多其他商业版Unix系统里(Linux也采用了它)。 Plan-9里另外一个非常著名的首创——UTF-8——被迅速的被众多其它操作系统采用，不仅仅是Unix家族。在所有的操作系统里，即使存在一些由于各种原因没有采用UTF-8的，它们也开发出来将UTF-8和本地编码转换的程序库。\n\nPlan-9的对于网络通信的特殊的处理方式需要在这里特别的说明一下。虽然用基于命名空间/文件系统的方式来代替专用API来处理网络操作，听起来很吸引人，但是整个Unix世界，不仅所有人都已经接受了使用伯克利Socket API做为标准方式来进行网络编程，甚至Windows平台也实现了几乎相同的API里简化各种网络应用向Windows上移植——虽然存在一些小问题。\n\n更重要的是，Plan-9发明的这种与众不同的网络编程编程方式在诞生之日就注定了毫无用处。因为在当时，大部分做网络编程的人都已经转向了更高的网络抽象层。RPC和Corba已经诞生，所有的需要跟远程服务器通信的应用全都转向了它们。程序员为了跟远程服务通信时需要打开sockets的机会越来越少，所有的他们都已经习惯了使用Berkeley API。(旁注：曾经有一个POSIX模拟层，叫做APE“ANSI/POSIX Environment”，试图将Plan-9上的某些功能映射到POSIX对应的功能上。这个模拟层一直都没实现，因为一些应用——例如X11——的迁移过于复杂，不可能完成。“维持它正确运行的工作量太过巨大”——维基百科。)\n\nPlan-9的一个最主要的问题出在AT&T和Unix幕后的这群人身上，尽管他们都是才华横溢的科学家和程序员，但他们不懂得如何去开发商业软件，而AT&T也从来没打算进入软件业。这些，我承认听起来有些大不敬，但事实就是这样。他们使用软件，他们喜欢开发内部软件来运行他们的高端网络设备，但是他们却从来不去开发要卖给别人的软件，而且跟Sun，IBM，微软等商业公司不一样，这从来不是他们的资金的主要来源。这就意味着他们不需要有外部世界需要什么样的软件的意识。举个例子，Sun公司就需要这样的意识，所以他们开发出了RPC。他们认识到人们在进行网络编程时很痛苦，他们看到了创建一个网络抽象层的商业机会：“嗨，大伙们，SunOS有一个很酷的东西，让我们能够不直接跟sockets打交道就可以开发出网络应用！你绝对应该使用SunOS”。\n\n还有，在Plan-9中，很多“好的老的东西”被删除了，大量的跟其它Unix不兼容的东西被加入了系统。这几乎打消了众多公司试图将他们的应用迁移到Plan-9的念头。如果你不知道这样一个新系统是否能够获得成功，那为什么要耗费了大量的工作把自己的应用迁移到这个新平台上呢？这就是典型的鸡生蛋蛋生鸡问题：一个操作系统的价值就在于上面有大量应用可运行，无它。如果一个系统很新，你要做的是必须发展一个能够支持各种应用的生态系统，通过它们让这个系统变得有价值。只有两条路能做到这样。第一个就是让这个系统跟目前现存的系统保持最大的兼容，也就是Unix， POSIX 和 Motif 这些系统。第二个就是创建自己的生态系统，以此来提升新系统的价值，微软Windows和Office办公系统软件就是典型例子。\n\n## 我们应该从Plan-9的历史教训中总结出一些经验吗？\n当然，我们至少可以获得下面这些：\n\n- 首先是，不要试图去修改那些没有坏或你认为不够好的东西，如果要修，只去修改出问题的部分，不要去修改看起来很笨——但事实上是在按要求工作的东西。例如，UTF-8是个非常棒的创意，你需要它，但你可以用程序库或子系统实现它，这样其它系统也能使用它，而不是去基于这个编码开发出一套全新的操作系统。\n- 第二个是，在开发一个你的系统前，先去搞清楚它是否有市场，或者人们是否需要这个东西。例如，/net/tcp文件系统绝对是一个精彩的纯学术课题，如果是早几年，它一定能完胜Berkeley sockets，但不应该是在直接使用Socket的人群已经没剩几个的时候。\n- 第三，要么完全的独立自主，要么跟现有的系统保持最大兼容。但Plan-9却处在它完全不应该的位置：中间。这套系统既不跟现有的所有Unix系统兼容，同时也不提供其它Unix系统中都有的、必要的工具。没有高级文本编辑器、表格软件、CAD程序和服务器软件。它就是一个神奇的空盒子，却没有提供任何方法让人们容易的把东西放进去。\n\n这些看起来都是一些非常高层的东西，并不是特别跟程序员的日常开发相关。看起来是这样，但事实远非如此。现如今，你可以很容易的开创自己的事业，开始向用户提供某种的服务。然而，你的服务是一个有价值的产品？还是变成了另外一个Plan-9传奇？这并不是很容易判断的事。例如，你的打算开发一个报表系统，来展现监控数据或其它任何可视的状态，如果你没有提供用它将这些报表导入到Excel的功能，那你在写第一行代码前就输了。如果你打算开发一个新的Web社交应用，而你没有提供使用Fackbook、Twitter或LinkedIn登录的方式，那你在搭建WEB服务器前就输了。如果你web服务中信息的导出方式没有采用RSS或ATOM，而是采用了一种全新的格式，猜会怎么样？你在吸引到第一个用户前就输了。但是，比着一切更重要的是：你的产品真正的解决了一个现实存在的问题吗？\n\n翻译自：[The Plan-9 Effect or why you should not fix it if it ain't broken](http://www.di.unipi.it/~nids/docs/the_plan-9_effect.html)","slug":"plan-9-effect","published":1,"updated":"2021-01-06T09:56:16.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5ru001j2aah90h280ma","content":"<p>Plan-9是一个很棒的、很先进的，而且完全是全新实现的Unix系统，它的目的就是要最终解决Unix最初的诺言：一切皆为文件。你听说过这套系统吗？没有？那好，下面就是为什么。</p>\n<p>我十分确信你不知道Plan-9是什么东西，并且很有可能你还是第一次听说这个名字。</p>\n<p>Plan-9是一款神奇的新版Unix，几乎是由70年代当初开发Unix系统的同一个团队开发的。它的确是一款非常酷的操作系统。它跟Unix非常相似，但它不是Unix，它纠正了Unix系统里很多不一致的、古怪的、至今仍然存在的特性。</p>\n<p>Unix在当初立项时有个这样的许诺：系统里任何的东西都是‘文件’——根据某些文件的定义。例如，sockets，也许称作网络连接更合适，它们就不是文件，进程也不是文件。</p>\n<p>在Plan-9中，所有的这些问题都解决了！先进的9P虚拟文件系统协议最终让所有东西都成为了文件。目录变成了“命名空间”，资源被映射成了文件。多么神奇！现在，你可以通过对/proc目录(现在应该成其为一个命名空间)里的一个文件使用“cat”命令来查看进程的情况。同样，打开一个网络连接的方式变成了打开/net/tcp目录里的一个文件，这就是它。”iotcl”系统调用在这个系统里完全被根除了，因为基于操作系统上的现代文件形式中的这种怪胎已经不再需要了。</p>\n<h2 id=\"那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\"><a href=\"#那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\" class=\"headerlink\" title=\"那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\"></a>那么，为什么你从来没有听说过这样一款神奇的操作系统呢？</h2><p>你从来没有听说过它的原因是，它并不是一款成功的操作系统。这怎么可能呢？是这样的，是因为Plan-9实际上没有解决任何问题。在Unix世界里，从来没有人抱怨说Unix没有兑现当初关于文件抽象的诺言。</p>\n<p>在随后的日子里，Plan-9里的/proc文件系统概念被人移植到到了Solaris等很多其他商业版Unix系统里(Linux也采用了它)。 Plan-9里另外一个非常著名的首创——UTF-8——被迅速的被众多其它操作系统采用，不仅仅是Unix家族。在所有的操作系统里，即使存在一些由于各种原因没有采用UTF-8的，它们也开发出来将UTF-8和本地编码转换的程序库。</p>\n<p>Plan-9的对于网络通信的特殊的处理方式需要在这里特别的说明一下。虽然用基于命名空间/文件系统的方式来代替专用API来处理网络操作，听起来很吸引人，但是整个Unix世界，不仅所有人都已经接受了使用伯克利Socket API做为标准方式来进行网络编程，甚至Windows平台也实现了几乎相同的API里简化各种网络应用向Windows上移植——虽然存在一些小问题。</p>\n<p>更重要的是，Plan-9发明的这种与众不同的网络编程编程方式在诞生之日就注定了毫无用处。因为在当时，大部分做网络编程的人都已经转向了更高的网络抽象层。RPC和Corba已经诞生，所有的需要跟远程服务器通信的应用全都转向了它们。程序员为了跟远程服务通信时需要打开sockets的机会越来越少，所有的他们都已经习惯了使用Berkeley API。(旁注：曾经有一个POSIX模拟层，叫做APE“ANSI/POSIX Environment”，试图将Plan-9上的某些功能映射到POSIX对应的功能上。这个模拟层一直都没实现，因为一些应用——例如X11——的迁移过于复杂，不可能完成。“维持它正确运行的工作量太过巨大”——维基百科。)</p>\n<p>Plan-9的一个最主要的问题出在AT&amp;T和Unix幕后的这群人身上，尽管他们都是才华横溢的科学家和程序员，但他们不懂得如何去开发商业软件，而AT&amp;T也从来没打算进入软件业。这些，我承认听起来有些大不敬，但事实就是这样。他们使用软件，他们喜欢开发内部软件来运行他们的高端网络设备，但是他们却从来不去开发要卖给别人的软件，而且跟Sun，IBM，微软等商业公司不一样，这从来不是他们的资金的主要来源。这就意味着他们不需要有外部世界需要什么样的软件的意识。举个例子，Sun公司就需要这样的意识，所以他们开发出了RPC。他们认识到人们在进行网络编程时很痛苦，他们看到了创建一个网络抽象层的商业机会：“嗨，大伙们，SunOS有一个很酷的东西，让我们能够不直接跟sockets打交道就可以开发出网络应用！你绝对应该使用SunOS”。</p>\n<p>还有，在Plan-9中，很多“好的老的东西”被删除了，大量的跟其它Unix不兼容的东西被加入了系统。这几乎打消了众多公司试图将他们的应用迁移到Plan-9的念头。如果你不知道这样一个新系统是否能够获得成功，那为什么要耗费了大量的工作把自己的应用迁移到这个新平台上呢？这就是典型的鸡生蛋蛋生鸡问题：一个操作系统的价值就在于上面有大量应用可运行，无它。如果一个系统很新，你要做的是必须发展一个能够支持各种应用的生态系统，通过它们让这个系统变得有价值。只有两条路能做到这样。第一个就是让这个系统跟目前现存的系统保持最大的兼容，也就是Unix， POSIX 和 Motif 这些系统。第二个就是创建自己的生态系统，以此来提升新系统的价值，微软Windows和Office办公系统软件就是典型例子。</p>\n<h2 id=\"我们应该从Plan-9的历史教训中总结出一些经验吗？\"><a href=\"#我们应该从Plan-9的历史教训中总结出一些经验吗？\" class=\"headerlink\" title=\"我们应该从Plan-9的历史教训中总结出一些经验吗？\"></a>我们应该从Plan-9的历史教训中总结出一些经验吗？</h2><p>当然，我们至少可以获得下面这些：</p>\n<ul>\n<li>首先是，不要试图去修改那些没有坏或你认为不够好的东西，如果要修，只去修改出问题的部分，不要去修改看起来很笨——但事实上是在按要求工作的东西。例如，UTF-8是个非常棒的创意，你需要它，但你可以用程序库或子系统实现它，这样其它系统也能使用它，而不是去基于这个编码开发出一套全新的操作系统。</li>\n<li>第二个是，在开发一个你的系统前，先去搞清楚它是否有市场，或者人们是否需要这个东西。例如，/net/tcp文件系统绝对是一个精彩的纯学术课题，如果是早几年，它一定能完胜Berkeley sockets，但不应该是在直接使用Socket的人群已经没剩几个的时候。</li>\n<li>第三，要么完全的独立自主，要么跟现有的系统保持最大兼容。但Plan-9却处在它完全不应该的位置：中间。这套系统既不跟现有的所有Unix系统兼容，同时也不提供其它Unix系统中都有的、必要的工具。没有高级文本编辑器、表格软件、CAD程序和服务器软件。它就是一个神奇的空盒子，却没有提供任何方法让人们容易的把东西放进去。</li>\n</ul>\n<p>这些看起来都是一些非常高层的东西，并不是特别跟程序员的日常开发相关。看起来是这样，但事实远非如此。现如今，你可以很容易的开创自己的事业，开始向用户提供某种的服务。然而，你的服务是一个有价值的产品？还是变成了另外一个Plan-9传奇？这并不是很容易判断的事。例如，你的打算开发一个报表系统，来展现监控数据或其它任何可视的状态，如果你没有提供用它将这些报表导入到Excel的功能，那你在写第一行代码前就输了。如果你打算开发一个新的Web社交应用，而你没有提供使用Fackbook、Twitter或LinkedIn登录的方式，那你在搭建WEB服务器前就输了。如果你web服务中信息的导出方式没有采用RSS或ATOM，而是采用了一种全新的格式，猜会怎么样？你在吸引到第一个用户前就输了。但是，比着一切更重要的是：你的产品真正的解决了一个现实存在的问题吗？</p>\n<p>翻译自：<a class=\"link\"   href=\"http://www.di.unipi.it/~nids/docs/the_plan-9_effect.html\" >The Plan-9 Effect or why you should not fix it if it ain’t broken<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Plan-9是一个很棒的、很先进的，而且完全是全新实现的Unix系统，它的目的就是要最终解决Unix最初的诺言：一切皆为文件。你听说过这套系统吗？没有？那好，下面就是为什么。</p>\n<p>我十分确信你不知道Plan-9是什么东西，并且很有可能你还是第一次听说这个名字。</p>\n<p>Plan-9是一款神奇的新版Unix，几乎是由70年代当初开发Unix系统的同一个团队开发的。它的确是一款非常酷的操作系统。它跟Unix非常相似，但它不是Unix，它纠正了Unix系统里很多不一致的、古怪的、至今仍然存在的特性。</p>\n<p>Unix在当初立项时有个这样的许诺：系统里任何的东西都是‘文件’——根据某些文件的定义。例如，sockets，也许称作网络连接更合适，它们就不是文件，进程也不是文件。</p>\n<p>在Plan-9中，所有的这些问题都解决了！先进的9P虚拟文件系统协议最终让所有东西都成为了文件。目录变成了“命名空间”，资源被映射成了文件。多么神奇！现在，你可以通过对/proc目录(现在应该成其为一个命名空间)里的一个文件使用“cat”命令来查看进程的情况。同样，打开一个网络连接的方式变成了打开/net/tcp目录里的一个文件，这就是它。”iotcl”系统调用在这个系统里完全被根除了，因为基于操作系统上的现代文件形式中的这种怪胎已经不再需要了。</p>\n<h2 id=\"那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\"><a href=\"#那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\" class=\"headerlink\" title=\"那么，为什么你从来没有听说过这样一款神奇的操作系统呢？\"></a>那么，为什么你从来没有听说过这样一款神奇的操作系统呢？</h2><p>你从来没有听说过它的原因是，它并不是一款成功的操作系统。这怎么可能呢？是这样的，是因为Plan-9实际上没有解决任何问题。在Unix世界里，从来没有人抱怨说Unix没有兑现当初关于文件抽象的诺言。</p>\n<p>在随后的日子里，Plan-9里的/proc文件系统概念被人移植到到了Solaris等很多其他商业版Unix系统里(Linux也采用了它)。 Plan-9里另外一个非常著名的首创——UTF-8——被迅速的被众多其它操作系统采用，不仅仅是Unix家族。在所有的操作系统里，即使存在一些由于各种原因没有采用UTF-8的，它们也开发出来将UTF-8和本地编码转换的程序库。</p>\n<p>Plan-9的对于网络通信的特殊的处理方式需要在这里特别的说明一下。虽然用基于命名空间/文件系统的方式来代替专用API来处理网络操作，听起来很吸引人，但是整个Unix世界，不仅所有人都已经接受了使用伯克利Socket API做为标准方式来进行网络编程，甚至Windows平台也实现了几乎相同的API里简化各种网络应用向Windows上移植——虽然存在一些小问题。</p>\n<p>更重要的是，Plan-9发明的这种与众不同的网络编程编程方式在诞生之日就注定了毫无用处。因为在当时，大部分做网络编程的人都已经转向了更高的网络抽象层。RPC和Corba已经诞生，所有的需要跟远程服务器通信的应用全都转向了它们。程序员为了跟远程服务通信时需要打开sockets的机会越来越少，所有的他们都已经习惯了使用Berkeley API。(旁注：曾经有一个POSIX模拟层，叫做APE“ANSI/POSIX Environment”，试图将Plan-9上的某些功能映射到POSIX对应的功能上。这个模拟层一直都没实现，因为一些应用——例如X11——的迁移过于复杂，不可能完成。“维持它正确运行的工作量太过巨大”——维基百科。)</p>\n<p>Plan-9的一个最主要的问题出在AT&amp;T和Unix幕后的这群人身上，尽管他们都是才华横溢的科学家和程序员，但他们不懂得如何去开发商业软件，而AT&amp;T也从来没打算进入软件业。这些，我承认听起来有些大不敬，但事实就是这样。他们使用软件，他们喜欢开发内部软件来运行他们的高端网络设备，但是他们却从来不去开发要卖给别人的软件，而且跟Sun，IBM，微软等商业公司不一样，这从来不是他们的资金的主要来源。这就意味着他们不需要有外部世界需要什么样的软件的意识。举个例子，Sun公司就需要这样的意识，所以他们开发出了RPC。他们认识到人们在进行网络编程时很痛苦，他们看到了创建一个网络抽象层的商业机会：“嗨，大伙们，SunOS有一个很酷的东西，让我们能够不直接跟sockets打交道就可以开发出网络应用！你绝对应该使用SunOS”。</p>\n<p>还有，在Plan-9中，很多“好的老的东西”被删除了，大量的跟其它Unix不兼容的东西被加入了系统。这几乎打消了众多公司试图将他们的应用迁移到Plan-9的念头。如果你不知道这样一个新系统是否能够获得成功，那为什么要耗费了大量的工作把自己的应用迁移到这个新平台上呢？这就是典型的鸡生蛋蛋生鸡问题：一个操作系统的价值就在于上面有大量应用可运行，无它。如果一个系统很新，你要做的是必须发展一个能够支持各种应用的生态系统，通过它们让这个系统变得有价值。只有两条路能做到这样。第一个就是让这个系统跟目前现存的系统保持最大的兼容，也就是Unix， POSIX 和 Motif 这些系统。第二个就是创建自己的生态系统，以此来提升新系统的价值，微软Windows和Office办公系统软件就是典型例子。</p>\n<h2 id=\"我们应该从Plan-9的历史教训中总结出一些经验吗？\"><a href=\"#我们应该从Plan-9的历史教训中总结出一些经验吗？\" class=\"headerlink\" title=\"我们应该从Plan-9的历史教训中总结出一些经验吗？\"></a>我们应该从Plan-9的历史教训中总结出一些经验吗？</h2><p>当然，我们至少可以获得下面这些：</p>\n<ul>\n<li>首先是，不要试图去修改那些没有坏或你认为不够好的东西，如果要修，只去修改出问题的部分，不要去修改看起来很笨——但事实上是在按要求工作的东西。例如，UTF-8是个非常棒的创意，你需要它，但你可以用程序库或子系统实现它，这样其它系统也能使用它，而不是去基于这个编码开发出一套全新的操作系统。</li>\n<li>第二个是，在开发一个你的系统前，先去搞清楚它是否有市场，或者人们是否需要这个东西。例如，/net/tcp文件系统绝对是一个精彩的纯学术课题，如果是早几年，它一定能完胜Berkeley sockets，但不应该是在直接使用Socket的人群已经没剩几个的时候。</li>\n<li>第三，要么完全的独立自主，要么跟现有的系统保持最大兼容。但Plan-9却处在它完全不应该的位置：中间。这套系统既不跟现有的所有Unix系统兼容，同时也不提供其它Unix系统中都有的、必要的工具。没有高级文本编辑器、表格软件、CAD程序和服务器软件。它就是一个神奇的空盒子，却没有提供任何方法让人们容易的把东西放进去。</li>\n</ul>\n<p>这些看起来都是一些非常高层的东西，并不是特别跟程序员的日常开发相关。看起来是这样，但事实远非如此。现如今，你可以很容易的开创自己的事业，开始向用户提供某种的服务。然而，你的服务是一个有价值的产品？还是变成了另外一个Plan-9传奇？这并不是很容易判断的事。例如，你的打算开发一个报表系统，来展现监控数据或其它任何可视的状态，如果你没有提供用它将这些报表导入到Excel的功能，那你在写第一行代码前就输了。如果你打算开发一个新的Web社交应用，而你没有提供使用Fackbook、Twitter或LinkedIn登录的方式，那你在搭建WEB服务器前就输了。如果你web服务中信息的导出方式没有采用RSS或ATOM，而是采用了一种全新的格式，猜会怎么样？你在吸引到第一个用户前就输了。但是，比着一切更重要的是：你的产品真正的解决了一个现实存在的问题吗？</p>\n<p>翻译自：<a class=\"link\"   href=\"http://www.di.unipi.it/~nids/docs/the_plan-9_effect.html\" >The Plan-9 Effect or why you should not fix it if it ain’t broken<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"PostgreSQL 外部表","date":"2018-09-07T13:31:11.000Z","_content":"\n是时候用一下PG外部表了。这些年过去，这功能应该是稳定了的。\n## 开启\n首先确定contrib是否有安装。如果没有要先安装：\n```bash\npkg install postgresql10-contrib\n```\n然后开启扩展\n```sql\nCREATE EXTENSION postgres_fdw;\n```\n\n## 创建远程服务\n```sql\nCREATE SERVER server156\n  FOREIGN DATA WRAPPER postgres_fdw\nOPTIONS (host '192.168.1.156',dbname 'bossdb',port '5432');\n```\n这里有个坑,就是如果192.168.1.156连不上的情况下上面语句也会执行成功.其实真正的连接到远程服务器是要等到后面dml执行时才会连接\n\n## 创建用户映射\n```sql\nCREATE USER MAPPING FOR postgres\n  SERVER server156\n  OPTIONS (user 'postgres',password '000000');\n```\n这里如果输错了也不会知道。\n\n## 创建远程表\n```sql\nCREATE FOREIGN TABLE if NOT EXISTS qbit_test (\n  id INTEGER  ,\n  name CHARACTER VARYING(50),\n  class CHARACTER VARYING(50),\n  time CHARACTER VARYING(50)\n)\n  SERVER server156\nOPTIONS (schema_name 'public',table_name 'qbit_test');\n```\n","source":"_posts/postgres_fdw.md","raw":"---\ntitle: PostgreSQL 外部表\ndate: 2018-09-07 21:31:11\ntags: [PostgreSQL, FDW, 外部表]\n---\n\n是时候用一下PG外部表了。这些年过去，这功能应该是稳定了的。\n## 开启\n首先确定contrib是否有安装。如果没有要先安装：\n```bash\npkg install postgresql10-contrib\n```\n然后开启扩展\n```sql\nCREATE EXTENSION postgres_fdw;\n```\n\n## 创建远程服务\n```sql\nCREATE SERVER server156\n  FOREIGN DATA WRAPPER postgres_fdw\nOPTIONS (host '192.168.1.156',dbname 'bossdb',port '5432');\n```\n这里有个坑,就是如果192.168.1.156连不上的情况下上面语句也会执行成功.其实真正的连接到远程服务器是要等到后面dml执行时才会连接\n\n## 创建用户映射\n```sql\nCREATE USER MAPPING FOR postgres\n  SERVER server156\n  OPTIONS (user 'postgres',password '000000');\n```\n这里如果输错了也不会知道。\n\n## 创建远程表\n```sql\nCREATE FOREIGN TABLE if NOT EXISTS qbit_test (\n  id INTEGER  ,\n  name CHARACTER VARYING(50),\n  class CHARACTER VARYING(50),\n  time CHARACTER VARYING(50)\n)\n  SERVER server156\nOPTIONS (schema_name 'public',table_name 'qbit_test');\n```\n","slug":"postgres_fdw","published":1,"updated":"2021-01-06T09:56:16.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rw001k2aahcle27251","content":"<p>是时候用一下PG外部表了。这些年过去，这功能应该是稳定了的。</p>\n<h2 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h2><p>首先确定contrib是否有安装。如果没有要先安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install postgresql10-contrib</span><br></pre></td></tr></table></figure>\n<p>然后开启扩展</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> EXTENSION postgres_fdw;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建远程服务\"><a href=\"#创建远程服务\" class=\"headerlink\" title=\"创建远程服务\"></a>创建远程服务</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SERVER server156</span><br><span class=\"line\">  <span class=\"keyword\">FOREIGN</span> DATA WRAPPER postgres_fdw</span><br><span class=\"line\">OPTIONS (host <span class=\"string\">&#x27;192.168.1.156&#x27;</span>,dbname <span class=\"string\">&#x27;bossdb&#x27;</span>,port <span class=\"string\">&#x27;5432&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里有个坑,就是如果192.168.1.156连不上的情况下上面语句也会执行成功.其实真正的连接到远程服务器是要等到后面dml执行时才会连接</p>\n<h2 id=\"创建用户映射\"><a href=\"#创建用户映射\" class=\"headerlink\" title=\"创建用户映射\"></a>创建用户映射</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> MAPPING <span class=\"keyword\">FOR</span> postgres</span><br><span class=\"line\">  SERVER server156</span><br><span class=\"line\">  OPTIONS (<span class=\"keyword\">user</span> <span class=\"string\">&#x27;postgres&#x27;</span>,password <span class=\"string\">&#x27;000000&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里如果输错了也不会知道。</p>\n<h2 id=\"创建远程表\"><a href=\"#创建远程表\" class=\"headerlink\" title=\"创建远程表\"></a>创建远程表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">TABLE</span> if <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> qbit_test (</span><br><span class=\"line\">  id <span class=\"type\">INTEGER</span>  ,</span><br><span class=\"line\">  name <span class=\"type\">CHARACTER</span> <span class=\"type\">VARYING</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">  class <span class=\"type\">CHARACTER</span> <span class=\"type\">VARYING</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">  <span class=\"type\">time</span> <span class=\"type\">CHARACTER</span> <span class=\"type\">VARYING</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">  SERVER server156</span><br><span class=\"line\">OPTIONS (schema_name <span class=\"string\">&#x27;public&#x27;</span>,table_name <span class=\"string\">&#x27;qbit_test&#x27;</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>是时候用一下PG外部表了。这些年过去，这功能应该是稳定了的。</p>\n<h2 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h2><p>首先确定contrib是否有安装。如果没有要先安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install postgresql10-contrib</span><br></pre></td></tr></table></figure>\n<p>然后开启扩展</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> EXTENSION postgres_fdw;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建远程服务\"><a href=\"#创建远程服务\" class=\"headerlink\" title=\"创建远程服务\"></a>创建远程服务</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SERVER server156</span><br><span class=\"line\">  <span class=\"keyword\">FOREIGN</span> DATA WRAPPER postgres_fdw</span><br><span class=\"line\">OPTIONS (host <span class=\"string\">&#x27;192.168.1.156&#x27;</span>,dbname <span class=\"string\">&#x27;bossdb&#x27;</span>,port <span class=\"string\">&#x27;5432&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里有个坑,就是如果192.168.1.156连不上的情况下上面语句也会执行成功.其实真正的连接到远程服务器是要等到后面dml执行时才会连接</p>\n<h2 id=\"创建用户映射\"><a href=\"#创建用户映射\" class=\"headerlink\" title=\"创建用户映射\"></a>创建用户映射</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> MAPPING <span class=\"keyword\">FOR</span> postgres</span><br><span class=\"line\">  SERVER server156</span><br><span class=\"line\">  OPTIONS (<span class=\"keyword\">user</span> <span class=\"string\">&#x27;postgres&#x27;</span>,password <span class=\"string\">&#x27;000000&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这里如果输错了也不会知道。</p>\n<h2 id=\"创建远程表\"><a href=\"#创建远程表\" class=\"headerlink\" title=\"创建远程表\"></a>创建远程表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">TABLE</span> if <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> qbit_test (</span><br><span class=\"line\">  id <span class=\"type\">INTEGER</span>  ,</span><br><span class=\"line\">  name <span class=\"type\">CHARACTER</span> <span class=\"type\">VARYING</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">  class <span class=\"type\">CHARACTER</span> <span class=\"type\">VARYING</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">  <span class=\"type\">time</span> <span class=\"type\">CHARACTER</span> <span class=\"type\">VARYING</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">  SERVER server156</span><br><span class=\"line\">OPTIONS (schema_name <span class=\"string\">&#x27;public&#x27;</span>,table_name <span class=\"string\">&#x27;qbit_test&#x27;</span>);</span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu 上安装 PostgreSQL 10","date":"2018-04-09T09:46:11.000Z","_content":"\n## 目标\n* 支持中文\n* 自定义日志\n* 初始密码\n\n## 安装\n先按[PostgreSQL](https://www.postgresql.org/download/linux/ubuntu/)官方指引在Ubuntu上安装好源\n```bash\nsudo apt install language-pack-zh-hans postgresql-10 postgresql-server-dev-10\nsudo vim /etc/default/locale\n# + LANG=zh_CN.utf8\nsudo su - postgres\ninitdb data10 -E utf8 --locale=zh_CN.UTF-8\nvim data10/postgresql.conf\n```\n\n","source":"_posts/postgresql-10-install-ubuntu.md","raw":"---\ntitle: Ubuntu 上安装 PostgreSQL 10\ndate: 2018-04-09 17:46:11\ntags: [Ubuntu, PostgreSQL, initdb]\n---\n\n## 目标\n* 支持中文\n* 自定义日志\n* 初始密码\n\n## 安装\n先按[PostgreSQL](https://www.postgresql.org/download/linux/ubuntu/)官方指引在Ubuntu上安装好源\n```bash\nsudo apt install language-pack-zh-hans postgresql-10 postgresql-server-dev-10\nsudo vim /etc/default/locale\n# + LANG=zh_CN.utf8\nsudo su - postgres\ninitdb data10 -E utf8 --locale=zh_CN.UTF-8\nvim data10/postgresql.conf\n```\n\n","slug":"postgresql-10-install-ubuntu","published":1,"updated":"2021-01-06T09:56:16.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rx001m2aah0y5117nw","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>支持中文</li>\n<li>自定义日志</li>\n<li>初始密码</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>先按<a class=\"link\"   href=\"https://www.postgresql.org/download/linux/ubuntu/\" >PostgreSQL<i class=\"fas fa-external-link-alt\"></i></a>官方指引在Ubuntu上安装好源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install language-pack-zh-hans postgresql-10 postgresql-server-dev-10</span><br><span class=\"line\">sudo vim /etc/default/locale</span><br><span class=\"line\"><span class=\"comment\"># + LANG=zh_CN.utf8</span></span><br><span class=\"line\">sudo su - postgres</span><br><span class=\"line\">initdb data10 -E utf8 --locale=zh_CN.UTF-8</span><br><span class=\"line\">vim data10/postgresql.conf</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>支持中文</li>\n<li>自定义日志</li>\n<li>初始密码</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>先按<a class=\"link\"   href=\"https://www.postgresql.org/download/linux/ubuntu/\" >PostgreSQL<i class=\"fas fa-external-link-alt\"></i></a>官方指引在Ubuntu上安装好源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install language-pack-zh-hans postgresql-10 postgresql-server-dev-10</span><br><span class=\"line\">sudo vim /etc/default/locale</span><br><span class=\"line\"><span class=\"comment\"># + LANG=zh_CN.utf8</span></span><br><span class=\"line\">sudo su - postgres</span><br><span class=\"line\">initdb data10 -E utf8 --locale=zh_CN.UTF-8</span><br><span class=\"line\">vim data10/postgresql.conf</span><br></pre></td></tr></table></figure>\n"},{"title":"PostgreSQL 12 变更点评","date":"2019-10-28T09:08:33.000Z","_content":"\nPostgreSQL 12 于2019年10月3日。之前只阅读了它的[中文概要说明](https://www.postgresql.org/about/press/presskit12/zh/#original_release) \n了解到了很多的性能提升。\n 但在阅读[完整发行说明](https://www.postgresql.org/docs/12/release-12.html)后，了解到了更多的有用的变更。\n 以下挑选一些我关心的，做一下介绍。\n\n# 流复制和恢复\n\n## 废弃了`recvoery.conf`。\n- 将其功能并入了`postgresql.conf`。\n- 使用`recovery.signal`或`standby.signal`文件来标记当前实例的状态。\n- 使用`promove_trigger_file`参数 替代了旧的 `trigger_file`参数。\n- 添加`pg_promote()`函数，可以在不操作文件系统的情况下，将从库，直接升级为主库。\n\n## `pg_basebackup` 操作行为变更\n使用`pg_basebackup -R ...`完成基准备份后，在备份好的数据文件夹中，没有了`recovery.conf`。\n会多出一个`standby.signal`空文件。且在`postgresql.conf`中找不到 `primary_conninfo`项的配置。\n此项配置会自动创建在`postgresql.auto.conf`文件中。\n\n\n# 默认开启`JIT`\n\n但在`FreeBSD 12.0`上，`pkg`包中，依旧默认选择保守地关闭了`JIT`支持。\n\n# 授权控制\n\n# 支持服务端核验证书域名\n在`pg_hba.conf`中通过配置`clientcert=verify-full`实现。这让服务器更安全！完整地实现了SSL安全传输。从源头堵住了第三方通过非法证书连接服务！\n\n# 性能\n\n## `btee`增强\n允许较小的多列`btree`索引，多列索引。提高了`btree`的索引性能和空间利用率。减少锁定开销，进一步提高了`btree`插入速度。\n\n## 表分区增强\n更好的分表性能\n\n## `reindex` 支持 `concurently`\n支持异步重建索引","source":"_posts/postgresql-12.md","raw":"---\ntitle: PostgreSQL 12 变更点评\ndate: 2019-10-28 17:08:33\ntags: [PostgreSQL]\n---\n\nPostgreSQL 12 于2019年10月3日。之前只阅读了它的[中文概要说明](https://www.postgresql.org/about/press/presskit12/zh/#original_release) \n了解到了很多的性能提升。\n 但在阅读[完整发行说明](https://www.postgresql.org/docs/12/release-12.html)后，了解到了更多的有用的变更。\n 以下挑选一些我关心的，做一下介绍。\n\n# 流复制和恢复\n\n## 废弃了`recvoery.conf`。\n- 将其功能并入了`postgresql.conf`。\n- 使用`recovery.signal`或`standby.signal`文件来标记当前实例的状态。\n- 使用`promove_trigger_file`参数 替代了旧的 `trigger_file`参数。\n- 添加`pg_promote()`函数，可以在不操作文件系统的情况下，将从库，直接升级为主库。\n\n## `pg_basebackup` 操作行为变更\n使用`pg_basebackup -R ...`完成基准备份后，在备份好的数据文件夹中，没有了`recovery.conf`。\n会多出一个`standby.signal`空文件。且在`postgresql.conf`中找不到 `primary_conninfo`项的配置。\n此项配置会自动创建在`postgresql.auto.conf`文件中。\n\n\n# 默认开启`JIT`\n\n但在`FreeBSD 12.0`上，`pkg`包中，依旧默认选择保守地关闭了`JIT`支持。\n\n# 授权控制\n\n# 支持服务端核验证书域名\n在`pg_hba.conf`中通过配置`clientcert=verify-full`实现。这让服务器更安全！完整地实现了SSL安全传输。从源头堵住了第三方通过非法证书连接服务！\n\n# 性能\n\n## `btee`增强\n允许较小的多列`btree`索引，多列索引。提高了`btree`的索引性能和空间利用率。减少锁定开销，进一步提高了`btree`插入速度。\n\n## 表分区增强\n更好的分表性能\n\n## `reindex` 支持 `concurently`\n支持异步重建索引","slug":"postgresql-12","published":1,"updated":"2021-01-06T09:56:16.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5ry001o2aah9p24a8zp","content":"<p>PostgreSQL 12 于2019年10月3日。之前只阅读了它的<a class=\"link\"   href=\"https://www.postgresql.org/about/press/presskit12/zh/#original_release\" >中文概要说明<i class=\"fas fa-external-link-alt\"></i></a><br>了解到了很多的性能提升。<br> 但在阅读<a class=\"link\"   href=\"https://www.postgresql.org/docs/12/release-12.html\" >完整发行说明<i class=\"fas fa-external-link-alt\"></i></a>后，了解到了更多的有用的变更。<br> 以下挑选一些我关心的，做一下介绍。</p>\n<h1 id=\"流复制和恢复\"><a href=\"#流复制和恢复\" class=\"headerlink\" title=\"流复制和恢复\"></a>流复制和恢复</h1><h2 id=\"废弃了recvoery-conf。\"><a href=\"#废弃了recvoery-conf。\" class=\"headerlink\" title=\"废弃了recvoery.conf。\"></a>废弃了<code>recvoery.conf</code>。</h2><ul>\n<li>将其功能并入了<code>postgresql.conf</code>。</li>\n<li>使用<code>recovery.signal</code>或<code>standby.signal</code>文件来标记当前实例的状态。</li>\n<li>使用<code>promove_trigger_file</code>参数 替代了旧的 <code>trigger_file</code>参数。</li>\n<li>添加<code>pg_promote()</code>函数，可以在不操作文件系统的情况下，将从库，直接升级为主库。</li>\n</ul>\n<h2 id=\"pg-basebackup-操作行为变更\"><a href=\"#pg-basebackup-操作行为变更\" class=\"headerlink\" title=\"pg_basebackup 操作行为变更\"></a><code>pg_basebackup</code> 操作行为变更</h2><p>使用<code>pg_basebackup -R ...</code>完成基准备份后，在备份好的数据文件夹中，没有了<code>recovery.conf</code>。<br>会多出一个<code>standby.signal</code>空文件。且在<code>postgresql.conf</code>中找不到 <code>primary_conninfo</code>项的配置。<br>此项配置会自动创建在<code>postgresql.auto.conf</code>文件中。</p>\n<h1 id=\"默认开启JIT\"><a href=\"#默认开启JIT\" class=\"headerlink\" title=\"默认开启JIT\"></a>默认开启<code>JIT</code></h1><p>但在<code>FreeBSD 12.0</code>上，<code>pkg</code>包中，依旧默认选择保守地关闭了<code>JIT</code>支持。</p>\n<h1 id=\"授权控制\"><a href=\"#授权控制\" class=\"headerlink\" title=\"授权控制\"></a>授权控制</h1><h1 id=\"支持服务端核验证书域名\"><a href=\"#支持服务端核验证书域名\" class=\"headerlink\" title=\"支持服务端核验证书域名\"></a>支持服务端核验证书域名</h1><p>在<code>pg_hba.conf</code>中通过配置<code>clientcert=verify-full</code>实现。这让服务器更安全！完整地实现了SSL安全传输。从源头堵住了第三方通过非法证书连接服务！</p>\n<h1 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h1><h2 id=\"btee增强\"><a href=\"#btee增强\" class=\"headerlink\" title=\"btee增强\"></a><code>btee</code>增强</h2><p>允许较小的多列<code>btree</code>索引，多列索引。提高了<code>btree</code>的索引性能和空间利用率。减少锁定开销，进一步提高了<code>btree</code>插入速度。</p>\n<h2 id=\"表分区增强\"><a href=\"#表分区增强\" class=\"headerlink\" title=\"表分区增强\"></a>表分区增强</h2><p>更好的分表性能</p>\n<h2 id=\"reindex-支持-concurently\"><a href=\"#reindex-支持-concurently\" class=\"headerlink\" title=\"reindex 支持 concurently\"></a><code>reindex</code> 支持 <code>concurently</code></h2><p>支持异步重建索引</p>\n","site":{"data":{}},"excerpt":"","more":"<p>PostgreSQL 12 于2019年10月3日。之前只阅读了它的<a class=\"link\"   href=\"https://www.postgresql.org/about/press/presskit12/zh/#original_release\" >中文概要说明<i class=\"fas fa-external-link-alt\"></i></a><br>了解到了很多的性能提升。<br> 但在阅读<a class=\"link\"   href=\"https://www.postgresql.org/docs/12/release-12.html\" >完整发行说明<i class=\"fas fa-external-link-alt\"></i></a>后，了解到了更多的有用的变更。<br> 以下挑选一些我关心的，做一下介绍。</p>\n<h1 id=\"流复制和恢复\"><a href=\"#流复制和恢复\" class=\"headerlink\" title=\"流复制和恢复\"></a>流复制和恢复</h1><h2 id=\"废弃了recvoery-conf。\"><a href=\"#废弃了recvoery-conf。\" class=\"headerlink\" title=\"废弃了recvoery.conf。\"></a>废弃了<code>recvoery.conf</code>。</h2><ul>\n<li>将其功能并入了<code>postgresql.conf</code>。</li>\n<li>使用<code>recovery.signal</code>或<code>standby.signal</code>文件来标记当前实例的状态。</li>\n<li>使用<code>promove_trigger_file</code>参数 替代了旧的 <code>trigger_file</code>参数。</li>\n<li>添加<code>pg_promote()</code>函数，可以在不操作文件系统的情况下，将从库，直接升级为主库。</li>\n</ul>\n<h2 id=\"pg-basebackup-操作行为变更\"><a href=\"#pg-basebackup-操作行为变更\" class=\"headerlink\" title=\"pg_basebackup 操作行为变更\"></a><code>pg_basebackup</code> 操作行为变更</h2><p>使用<code>pg_basebackup -R ...</code>完成基准备份后，在备份好的数据文件夹中，没有了<code>recovery.conf</code>。<br>会多出一个<code>standby.signal</code>空文件。且在<code>postgresql.conf</code>中找不到 <code>primary_conninfo</code>项的配置。<br>此项配置会自动创建在<code>postgresql.auto.conf</code>文件中。</p>\n<h1 id=\"默认开启JIT\"><a href=\"#默认开启JIT\" class=\"headerlink\" title=\"默认开启JIT\"></a>默认开启<code>JIT</code></h1><p>但在<code>FreeBSD 12.0</code>上，<code>pkg</code>包中，依旧默认选择保守地关闭了<code>JIT</code>支持。</p>\n<h1 id=\"授权控制\"><a href=\"#授权控制\" class=\"headerlink\" title=\"授权控制\"></a>授权控制</h1><h1 id=\"支持服务端核验证书域名\"><a href=\"#支持服务端核验证书域名\" class=\"headerlink\" title=\"支持服务端核验证书域名\"></a>支持服务端核验证书域名</h1><p>在<code>pg_hba.conf</code>中通过配置<code>clientcert=verify-full</code>实现。这让服务器更安全！完整地实现了SSL安全传输。从源头堵住了第三方通过非法证书连接服务！</p>\n<h1 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h1><h2 id=\"btee增强\"><a href=\"#btee增强\" class=\"headerlink\" title=\"btee增强\"></a><code>btee</code>增强</h2><p>允许较小的多列<code>btree</code>索引，多列索引。提高了<code>btree</code>的索引性能和空间利用率。减少锁定开销，进一步提高了<code>btree</code>插入速度。</p>\n<h2 id=\"表分区增强\"><a href=\"#表分区增强\" class=\"headerlink\" title=\"表分区增强\"></a>表分区增强</h2><p>更好的分表性能</p>\n<h2 id=\"reindex-支持-concurently\"><a href=\"#reindex-支持-concurently\" class=\"headerlink\" title=\"reindex 支持 concurently\"></a><code>reindex</code> 支持 <code>concurently</code></h2><p>支持异步重建索引</p>\n"},{"title":"PostgreSQL BRIN索引 日志型数据索引神器","date":"2020-06-29T07:25:58.000Z","_content":"\n一张随着时间增长的表。当表的体积达到数GB或数十GB后。你会发现`BTREE`索引也也有数GB或数十GB；BTREE索引尺寸有时能达到表本身尺寸的70%左右！\n\n当索引的尺寸接近或超过系统内存一半时。查询使用了索引，速度也会慢到令人无法忍受！\n\n此时一般的想法是：分表！将表按不同时间段拆开。这样查询时就不需要扫描整个索引了！速度就上来了。\n\n其实，此时PostgreSQL还有个更有意思的索引，简直是从根本上重新定义了这个问题！它就是：\n\n## `BRIN`索引\n通过[`BRIN`索引的官方介绍](http://postgres.cn/docs/12/brin-intro.html)，得知，它的索引实现是完全另一种思路：\n\n`BRIN`索引，是按写入磁盘的数据块，做索引的。它记录这张表，索引字段在这个数据块上的最大值与最小值；也叫这个字段的区间。\n\n这就大大减少了索引的复杂度，提高了查询速度。\n\n来具体体验一下：\n```sql\ncashier=> \\dt+ log.table_name\n                           关联列表\n 架构模式 |    名称    |  类型  |  拥有者  |  大小   |  描述\n----------+------------+--------+----------+---------+---------\n log      | table_name | 数据表 | postgres | 6908 MB | gdb应用\n(1 行记录)\n\ncashier=> \\di+ log.table_name_log_at_idx\n                                    关联列表\n 架构模式 |         名称          | 类型 |  拥有者  |   数据表   |  大小  | 描述\n----------+-----------------------+------+----------+------------+--------+------\n log      | table_name_log_at_idx | 索引 | postgres | table_name | 272 kB |\n(1 行记录)\n\ncashier=> explain analyze select count(1) from log.table_name where log_at between '2020-01-01 12:00:00' and '2020-01-01 12:01:00';\n                                                                          QUERY PLAN\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=15547.84..15547.85 rows=1 width=8) (actual time=46.691..46.700 rows=1 loops=1)\n   ->  Bitmap Heap Scan on table_name  (cost=109.06..15547.55 rows=116 width=0) (actual time=3.063..46.153 rows=113 loops=1)\n         Recheck Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n         Rows Removed by Index Recheck: 124960\n         Heap Blocks: lossy=3848\n         ->  Bitmap Index Scan on table_name_log_at_idx  (cost=0.00..109.03 rows=4059 width=0) (actual time=1.384..1.389 rows=39680 loops=1)\n               Index Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n Planning Time: 0.106 ms\n Execution Time: 46.797 ms\n(9 行记录)\n\ncashier=> explain analyze select count(1) from log.table_name where log_at between '2020-01-01 12:00:00' and '2020-01-01 12:01:00' and body_size>100;\n                                                                          QUERY PLAN\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=15557.94..15557.95 rows=1 width=8) (actual time=49.396..49.405 rows=1 loops=1)\n   ->  Bitmap Heap Scan on table_name  (cost=109.06..15557.69 rows=97 width=0) (actual time=3.574..48.848 rows=101 loops=1)\n         Recheck Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n         Rows Removed by Index Recheck: 125418\n         Filter: (body_size > 100)\n         Rows Removed by Filter: 12\n         Heap Blocks: lossy=3862\n         ->  Bitmap Index Scan on table_name_log_at_idx  (cost=0.00..109.03 rows=4059 width=0) (actual time=2.176..2.180 rows=39680 loops=1)\n               Index Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n Planning Time: 0.901 ms\n Execution Time: 49.624 ms\n(11 行记录)\n\n```\n可见：\n- 在一张6.9GB数据的表上，按创建时间建`BRIN`索引，建成后，索引只有272KB！\n- 在做中远距离的`between`查询。只要`46ms`！\n- 带时间段的多条件查询，也只要`49ms`！\n","source":"_posts/postgresql-brin-index.md","raw":"---\ntitle: PostgreSQL BRIN索引 日志型数据索引神器\ndate: 2020-06-29 15:25:58\ntags: [PostgreSQL,索引]\n---\n\n一张随着时间增长的表。当表的体积达到数GB或数十GB后。你会发现`BTREE`索引也也有数GB或数十GB；BTREE索引尺寸有时能达到表本身尺寸的70%左右！\n\n当索引的尺寸接近或超过系统内存一半时。查询使用了索引，速度也会慢到令人无法忍受！\n\n此时一般的想法是：分表！将表按不同时间段拆开。这样查询时就不需要扫描整个索引了！速度就上来了。\n\n其实，此时PostgreSQL还有个更有意思的索引，简直是从根本上重新定义了这个问题！它就是：\n\n## `BRIN`索引\n通过[`BRIN`索引的官方介绍](http://postgres.cn/docs/12/brin-intro.html)，得知，它的索引实现是完全另一种思路：\n\n`BRIN`索引，是按写入磁盘的数据块，做索引的。它记录这张表，索引字段在这个数据块上的最大值与最小值；也叫这个字段的区间。\n\n这就大大减少了索引的复杂度，提高了查询速度。\n\n来具体体验一下：\n```sql\ncashier=> \\dt+ log.table_name\n                           关联列表\n 架构模式 |    名称    |  类型  |  拥有者  |  大小   |  描述\n----------+------------+--------+----------+---------+---------\n log      | table_name | 数据表 | postgres | 6908 MB | gdb应用\n(1 行记录)\n\ncashier=> \\di+ log.table_name_log_at_idx\n                                    关联列表\n 架构模式 |         名称          | 类型 |  拥有者  |   数据表   |  大小  | 描述\n----------+-----------------------+------+----------+------------+--------+------\n log      | table_name_log_at_idx | 索引 | postgres | table_name | 272 kB |\n(1 行记录)\n\ncashier=> explain analyze select count(1) from log.table_name where log_at between '2020-01-01 12:00:00' and '2020-01-01 12:01:00';\n                                                                          QUERY PLAN\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=15547.84..15547.85 rows=1 width=8) (actual time=46.691..46.700 rows=1 loops=1)\n   ->  Bitmap Heap Scan on table_name  (cost=109.06..15547.55 rows=116 width=0) (actual time=3.063..46.153 rows=113 loops=1)\n         Recheck Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n         Rows Removed by Index Recheck: 124960\n         Heap Blocks: lossy=3848\n         ->  Bitmap Index Scan on table_name_log_at_idx  (cost=0.00..109.03 rows=4059 width=0) (actual time=1.384..1.389 rows=39680 loops=1)\n               Index Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n Planning Time: 0.106 ms\n Execution Time: 46.797 ms\n(9 行记录)\n\ncashier=> explain analyze select count(1) from log.table_name where log_at between '2020-01-01 12:00:00' and '2020-01-01 12:01:00' and body_size>100;\n                                                                          QUERY PLAN\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=15557.94..15557.95 rows=1 width=8) (actual time=49.396..49.405 rows=1 loops=1)\n   ->  Bitmap Heap Scan on table_name  (cost=109.06..15557.69 rows=97 width=0) (actual time=3.574..48.848 rows=101 loops=1)\n         Recheck Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n         Rows Removed by Index Recheck: 125418\n         Filter: (body_size > 100)\n         Rows Removed by Filter: 12\n         Heap Blocks: lossy=3862\n         ->  Bitmap Index Scan on table_name_log_at_idx  (cost=0.00..109.03 rows=4059 width=0) (actual time=2.176..2.180 rows=39680 loops=1)\n               Index Cond: ((log_at >= '2020-01-01 12:00:00+08'::timestamp with time zone) AND (log_at <= '2020-01-01 12:01:00+08'::timestamp with time zone))\n Planning Time: 0.901 ms\n Execution Time: 49.624 ms\n(11 行记录)\n\n```\n可见：\n- 在一张6.9GB数据的表上，按创建时间建`BRIN`索引，建成后，索引只有272KB！\n- 在做中远距离的`between`查询。只要`46ms`！\n- 带时间段的多条件查询，也只要`49ms`！\n","slug":"postgresql-brin-index","published":1,"updated":"2021-01-06T09:56:16.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5rz001q2aahf8l4h32u","content":"<p>一张随着时间增长的表。当表的体积达到数GB或数十GB后。你会发现<code>BTREE</code>索引也也有数GB或数十GB；BTREE索引尺寸有时能达到表本身尺寸的70%左右！</p>\n<p>当索引的尺寸接近或超过系统内存一半时。查询使用了索引，速度也会慢到令人无法忍受！</p>\n<p>此时一般的想法是：分表！将表按不同时间段拆开。这样查询时就不需要扫描整个索引了！速度就上来了。</p>\n<p>其实，此时PostgreSQL还有个更有意思的索引，简直是从根本上重新定义了这个问题！它就是：</p>\n<h2 id=\"BRIN索引\"><a href=\"#BRIN索引\" class=\"headerlink\" title=\"BRIN索引\"></a><code>BRIN</code>索引</h2><p>通过<a href=\"http://postgres.cn/docs/12/brin-intro.html\"><code>BRIN</code>索引的官方介绍</a>，得知，它的索引实现是完全另一种思路：</p>\n<p><code>BRIN</code>索引，是按写入磁盘的数据块，做索引的。它记录这张表，索引字段在这个数据块上的最大值与最小值；也叫这个字段的区间。</p>\n<p>这就大大减少了索引的复杂度，提高了查询速度。</p>\n<p>来具体体验一下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\dt<span class=\"operator\">+</span> log.table_name</span><br><span class=\"line\">                           关联列表</span><br><span class=\"line\"> 架构模式 <span class=\"operator\">|</span>    名称    <span class=\"operator\">|</span>  类型  <span class=\"operator\">|</span>  拥有者  <span class=\"operator\">|</span>  大小   <span class=\"operator\">|</span>  描述</span><br><span class=\"line\"><span class=\"comment\">----------+------------+--------+----------+---------+---------</span></span><br><span class=\"line\"> log      <span class=\"operator\">|</span> table_name <span class=\"operator\">|</span> 数据表 <span class=\"operator\">|</span> postgres <span class=\"operator\">|</span> <span class=\"number\">6908</span> MB <span class=\"operator\">|</span> gdb应用</span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\di<span class=\"operator\">+</span> log.table_name_log_at_idx</span><br><span class=\"line\">                                    关联列表</span><br><span class=\"line\"> 架构模式 <span class=\"operator\">|</span>         名称          <span class=\"operator\">|</span> 类型 <span class=\"operator\">|</span>  拥有者  <span class=\"operator\">|</span>   数据表   <span class=\"operator\">|</span>  大小  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"comment\">----------+-----------------------+------+----------+------------+--------+------</span></span><br><span class=\"line\"> log      <span class=\"operator\">|</span> table_name_log_at_idx <span class=\"operator\">|</span> 索引 <span class=\"operator\">|</span> postgres <span class=\"operator\">|</span> table_name <span class=\"operator\">|</span> <span class=\"number\">272</span> kB <span class=\"operator\">|</span></span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> explain analyze <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> log.table_name <span class=\"keyword\">where</span> log_at <span class=\"keyword\">between</span> <span class=\"string\">&#x27;2020-01-01 12:00:00&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2020-01-01 12:01:00&#x27;</span>;</span><br><span class=\"line\">                                                                          QUERY PLAN</span><br><span class=\"line\"><span class=\"comment\">---------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"> Aggregate  (cost<span class=\"operator\">=</span><span class=\"number\">15547.84</span>.<span class=\"number\">.15547</span><span class=\"number\">.85</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> width<span class=\"operator\">=</span><span class=\"number\">8</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">46.691</span>.<span class=\"number\">.46</span><span class=\"number\">.700</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">   <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Heap Scan <span class=\"keyword\">on</span> table_name  (cost<span class=\"operator\">=</span><span class=\"number\">109.06</span>.<span class=\"number\">.15547</span><span class=\"number\">.55</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">116</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">3.063</span>.<span class=\"number\">.46</span><span class=\"number\">.153</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">113</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">         Recheck Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\">         <span class=\"keyword\">Rows</span> Removed <span class=\"keyword\">by</span> Index Recheck: <span class=\"number\">124960</span></span><br><span class=\"line\">         Heap Blocks: lossy<span class=\"operator\">=</span><span class=\"number\">3848</span></span><br><span class=\"line\">         <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Index Scan <span class=\"keyword\">on</span> table_name_log_at_idx  (cost<span class=\"operator\">=</span><span class=\"number\">0.00</span>.<span class=\"number\">.109</span><span class=\"number\">.03</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">4059</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">1.384</span>.<span class=\"number\">.1</span><span class=\"number\">.389</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">39680</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">               Index Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\"> Planning <span class=\"type\">Time</span>: <span class=\"number\">0.106</span> ms</span><br><span class=\"line\"> Execution <span class=\"type\">Time</span>: <span class=\"number\">46.797</span> ms</span><br><span class=\"line\">(<span class=\"number\">9</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> explain analyze <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> log.table_name <span class=\"keyword\">where</span> log_at <span class=\"keyword\">between</span> <span class=\"string\">&#x27;2020-01-01 12:00:00&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2020-01-01 12:01:00&#x27;</span> <span class=\"keyword\">and</span> body_size<span class=\"operator\">&gt;</span><span class=\"number\">100</span>;</span><br><span class=\"line\">                                                                          QUERY PLAN</span><br><span class=\"line\"><span class=\"comment\">---------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"> Aggregate  (cost<span class=\"operator\">=</span><span class=\"number\">15557.94</span>.<span class=\"number\">.15557</span><span class=\"number\">.95</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> width<span class=\"operator\">=</span><span class=\"number\">8</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">49.396</span>.<span class=\"number\">.49</span><span class=\"number\">.405</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">   <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Heap Scan <span class=\"keyword\">on</span> table_name  (cost<span class=\"operator\">=</span><span class=\"number\">109.06</span>.<span class=\"number\">.15557</span><span class=\"number\">.69</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">97</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">3.574</span>.<span class=\"number\">.48</span><span class=\"number\">.848</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">101</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">         Recheck Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\">         <span class=\"keyword\">Rows</span> Removed <span class=\"keyword\">by</span> Index Recheck: <span class=\"number\">125418</span></span><br><span class=\"line\">         <span class=\"keyword\">Filter</span>: (body_size <span class=\"operator\">&gt;</span> <span class=\"number\">100</span>)</span><br><span class=\"line\">         <span class=\"keyword\">Rows</span> Removed <span class=\"keyword\">by</span> <span class=\"keyword\">Filter</span>: <span class=\"number\">12</span></span><br><span class=\"line\">         Heap Blocks: lossy<span class=\"operator\">=</span><span class=\"number\">3862</span></span><br><span class=\"line\">         <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Index Scan <span class=\"keyword\">on</span> table_name_log_at_idx  (cost<span class=\"operator\">=</span><span class=\"number\">0.00</span>.<span class=\"number\">.109</span><span class=\"number\">.03</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">4059</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">2.176</span>.<span class=\"number\">.2</span><span class=\"number\">.180</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">39680</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">               Index Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\"> Planning <span class=\"type\">Time</span>: <span class=\"number\">0.901</span> ms</span><br><span class=\"line\"> Execution <span class=\"type\">Time</span>: <span class=\"number\">49.624</span> ms</span><br><span class=\"line\">(<span class=\"number\">11</span> 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可见：</p>\n<ul>\n<li>在一张6.9GB数据的表上，按创建时间建<code>BRIN</code>索引，建成后，索引只有272KB！</li>\n<li>在做中远距离的<code>between</code>查询。只要<code>46ms</code>！</li>\n<li>带时间段的多条件查询，也只要<code>49ms</code>！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>一张随着时间增长的表。当表的体积达到数GB或数十GB后。你会发现<code>BTREE</code>索引也也有数GB或数十GB；BTREE索引尺寸有时能达到表本身尺寸的70%左右！</p>\n<p>当索引的尺寸接近或超过系统内存一半时。查询使用了索引，速度也会慢到令人无法忍受！</p>\n<p>此时一般的想法是：分表！将表按不同时间段拆开。这样查询时就不需要扫描整个索引了！速度就上来了。</p>\n<p>其实，此时PostgreSQL还有个更有意思的索引，简直是从根本上重新定义了这个问题！它就是：</p>\n<h2 id=\"BRIN索引\"><a href=\"#BRIN索引\" class=\"headerlink\" title=\"BRIN索引\"></a><code>BRIN</code>索引</h2><p>通过<a href=\"http://postgres.cn/docs/12/brin-intro.html\"><code>BRIN</code>索引的官方介绍</a>，得知，它的索引实现是完全另一种思路：</p>\n<p><code>BRIN</code>索引，是按写入磁盘的数据块，做索引的。它记录这张表，索引字段在这个数据块上的最大值与最小值；也叫这个字段的区间。</p>\n<p>这就大大减少了索引的复杂度，提高了查询速度。</p>\n<p>来具体体验一下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\dt<span class=\"operator\">+</span> log.table_name</span><br><span class=\"line\">                           关联列表</span><br><span class=\"line\"> 架构模式 <span class=\"operator\">|</span>    名称    <span class=\"operator\">|</span>  类型  <span class=\"operator\">|</span>  拥有者  <span class=\"operator\">|</span>  大小   <span class=\"operator\">|</span>  描述</span><br><span class=\"line\"><span class=\"comment\">----------+------------+--------+----------+---------+---------</span></span><br><span class=\"line\"> log      <span class=\"operator\">|</span> table_name <span class=\"operator\">|</span> 数据表 <span class=\"operator\">|</span> postgres <span class=\"operator\">|</span> <span class=\"number\">6908</span> MB <span class=\"operator\">|</span> gdb应用</span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\di<span class=\"operator\">+</span> log.table_name_log_at_idx</span><br><span class=\"line\">                                    关联列表</span><br><span class=\"line\"> 架构模式 <span class=\"operator\">|</span>         名称          <span class=\"operator\">|</span> 类型 <span class=\"operator\">|</span>  拥有者  <span class=\"operator\">|</span>   数据表   <span class=\"operator\">|</span>  大小  <span class=\"operator\">|</span> 描述</span><br><span class=\"line\"><span class=\"comment\">----------+-----------------------+------+----------+------------+--------+------</span></span><br><span class=\"line\"> log      <span class=\"operator\">|</span> table_name_log_at_idx <span class=\"operator\">|</span> 索引 <span class=\"operator\">|</span> postgres <span class=\"operator\">|</span> table_name <span class=\"operator\">|</span> <span class=\"number\">272</span> kB <span class=\"operator\">|</span></span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> explain analyze <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> log.table_name <span class=\"keyword\">where</span> log_at <span class=\"keyword\">between</span> <span class=\"string\">&#x27;2020-01-01 12:00:00&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2020-01-01 12:01:00&#x27;</span>;</span><br><span class=\"line\">                                                                          QUERY PLAN</span><br><span class=\"line\"><span class=\"comment\">---------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"> Aggregate  (cost<span class=\"operator\">=</span><span class=\"number\">15547.84</span>.<span class=\"number\">.15547</span><span class=\"number\">.85</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> width<span class=\"operator\">=</span><span class=\"number\">8</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">46.691</span>.<span class=\"number\">.46</span><span class=\"number\">.700</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">   <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Heap Scan <span class=\"keyword\">on</span> table_name  (cost<span class=\"operator\">=</span><span class=\"number\">109.06</span>.<span class=\"number\">.15547</span><span class=\"number\">.55</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">116</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">3.063</span>.<span class=\"number\">.46</span><span class=\"number\">.153</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">113</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">         Recheck Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\">         <span class=\"keyword\">Rows</span> Removed <span class=\"keyword\">by</span> Index Recheck: <span class=\"number\">124960</span></span><br><span class=\"line\">         Heap Blocks: lossy<span class=\"operator\">=</span><span class=\"number\">3848</span></span><br><span class=\"line\">         <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Index Scan <span class=\"keyword\">on</span> table_name_log_at_idx  (cost<span class=\"operator\">=</span><span class=\"number\">0.00</span>.<span class=\"number\">.109</span><span class=\"number\">.03</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">4059</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">1.384</span>.<span class=\"number\">.1</span><span class=\"number\">.389</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">39680</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">               Index Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\"> Planning <span class=\"type\">Time</span>: <span class=\"number\">0.106</span> ms</span><br><span class=\"line\"> Execution <span class=\"type\">Time</span>: <span class=\"number\">46.797</span> ms</span><br><span class=\"line\">(<span class=\"number\">9</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">cashier<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> explain analyze <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> log.table_name <span class=\"keyword\">where</span> log_at <span class=\"keyword\">between</span> <span class=\"string\">&#x27;2020-01-01 12:00:00&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2020-01-01 12:01:00&#x27;</span> <span class=\"keyword\">and</span> body_size<span class=\"operator\">&gt;</span><span class=\"number\">100</span>;</span><br><span class=\"line\">                                                                          QUERY PLAN</span><br><span class=\"line\"><span class=\"comment\">---------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"> Aggregate  (cost<span class=\"operator\">=</span><span class=\"number\">15557.94</span>.<span class=\"number\">.15557</span><span class=\"number\">.95</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> width<span class=\"operator\">=</span><span class=\"number\">8</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">49.396</span>.<span class=\"number\">.49</span><span class=\"number\">.405</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">1</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">   <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Heap Scan <span class=\"keyword\">on</span> table_name  (cost<span class=\"operator\">=</span><span class=\"number\">109.06</span>.<span class=\"number\">.15557</span><span class=\"number\">.69</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">97</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">3.574</span>.<span class=\"number\">.48</span><span class=\"number\">.848</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">101</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">         Recheck Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\">         <span class=\"keyword\">Rows</span> Removed <span class=\"keyword\">by</span> Index Recheck: <span class=\"number\">125418</span></span><br><span class=\"line\">         <span class=\"keyword\">Filter</span>: (body_size <span class=\"operator\">&gt;</span> <span class=\"number\">100</span>)</span><br><span class=\"line\">         <span class=\"keyword\">Rows</span> Removed <span class=\"keyword\">by</span> <span class=\"keyword\">Filter</span>: <span class=\"number\">12</span></span><br><span class=\"line\">         Heap Blocks: lossy<span class=\"operator\">=</span><span class=\"number\">3862</span></span><br><span class=\"line\">         <span class=\"operator\">-</span><span class=\"operator\">&gt;</span>  Bitmap Index Scan <span class=\"keyword\">on</span> table_name_log_at_idx  (cost<span class=\"operator\">=</span><span class=\"number\">0.00</span>.<span class=\"number\">.109</span><span class=\"number\">.03</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">4059</span> width<span class=\"operator\">=</span><span class=\"number\">0</span>) (actual <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">2.176</span>.<span class=\"number\">.2</span><span class=\"number\">.180</span> <span class=\"keyword\">rows</span><span class=\"operator\">=</span><span class=\"number\">39680</span> loops<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\">               Index Cond: ((log_at <span class=\"operator\">&gt;=</span> <span class=\"string\">&#x27;2020-01-01 12:00:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone) <span class=\"keyword\">AND</span> (log_at <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2020-01-01 12:01:00+08&#x27;</span>::<span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone))</span><br><span class=\"line\"> Planning <span class=\"type\">Time</span>: <span class=\"number\">0.901</span> ms</span><br><span class=\"line\"> Execution <span class=\"type\">Time</span>: <span class=\"number\">49.624</span> ms</span><br><span class=\"line\">(<span class=\"number\">11</span> 行记录)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可见：</p>\n<ul>\n<li>在一张6.9GB数据的表上，按创建时间建<code>BRIN</code>索引，建成后，索引只有272KB！</li>\n<li>在做中远距离的<code>between</code>查询。只要<code>46ms</code>！</li>\n<li>带时间段的多条件查询，也只要<code>49ms</code>！</li>\n</ul>\n"},{"title":"Citus，PostgreSQL的最佳分布式改造！","date":"2020-08-14T04:23:02.000Z","_content":"\n对于一直工作在关系型数据库，且功能强大的PostgreSQL的开发者来说。\nCitus 无疑是给他们插上了一对火箭！让关系型数据库的用户，也能翱翔在大数据的时代。\n\nCitus 正在被很多大数据机构使用，日均更新5～10亿记录，甚至有在70个节点上，运行数据规模达1.4PB！\n\nCitus 适用于多租户、实时分析场景。（这也正是我迫切需要的！）\n\n下边介绍Citus的上手经历。\n\n# 试验架构\n```mermaid\ngraph TB\n  m[(citus0)]\n  slave1[(citus1)]\n  slave2[(citus2)]\n  m---slave1\n  m---slave2\n```\n\n# 准备主机\n分布式，至少两台以上主机。\n- 协调节点，负责统筹。主机名：citus0\n- 工作节点，负责存储计算。主机名：citus1、citus2\n\n# 编译安装\n在每一台机器上，按以下操作同样参数安装。\n## 版本\n- OS：FreeBSD-12.1-RELEASE-AMD64\n    - https://www.freebsd.org/releases/12.1R/announce.html\n- PostgreSQL：12.3\n    - https://www.postgresql.org/ftp/source/v12.3/\n- Citus：9.4.0\n    - https://github.com/citusdata/citus/releases/tag/v9.4.0\n\n## 编译参数\n### PostgreSQL 12.3 编译\n编译：\n```shell\nkg install llvm90 gettext curl gmake\n./configure '--with-libraries=/usr/local/lib' '--with-includes=/usr/local/include' '--enable-thread-safety' '--disable-debug' '--enable-nls' '--without-pam' '--with-openssl' '--without-llvm' '--without-gssapi' '--prefix=/usr/local' '--localstatedir=/var' '--mandir=/usr/local/man' '--infodir=/usr/local/share/info/' '--build=amd64-portbld-freebsd12.1' 'build_alias=amd64-portbld-freebsd12.1' 'CC=cc' 'CFLAGS=-O2 -pipe  -fstack-protector-strong -fno-strict-aliasing ' 'LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong ' 'LIBS=' 'CPPFLAGS=-I/usr/local/include' 'CXX=c++' 'CXXFLAGS=-O2 -pipe -fstack-protector-strong -fno-strict-aliasing  ' 'CPP=cpp' 'PKG_CONFIG=pkgconf' 'LDFLAGS_SL='\nmake world\nmake install-world\nadduser postgres\n```\n\n### Citus 9.4.0 编译\n编译\n```shell\n./configure 'LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong ' CPPFLAGS=-I/usr/local/include\ngmake\ngmake install\n```\n\n# 设置并启用Citus\n## 所有主机上的共同操作\n注意：***以下所有操作都在要每个节点主机上完整操作完。包括建库和启用`citus`。且一定是先建库，进入`main`库后再启动`citus`扩展***\n- 初始化数据库\n```shell\nsu postgres\ninitdb data\n```\n- 配置`postgresql.conf`\n> listen_addresses = '*'\n>\n> port = 5432\n>\n>shared_buffers = 256MB # 按需调节\n>\n>shared_preload_libraries = 'citus' # 关键配置\n>\n- 配置`pg_hba.conf`\n>host    all             all             192.168.1.1/24          trust  # 开放内网访问\n>\n- 启动PostgreSQL\n```shell script\npg_ctl -D data start\n```\n- 建库并启用Citus\n```shell\npsql\ncreate database main;\n\\c main\ncreate extension citus;\n```\n\n## 协调节点上的操作\n```shell\npsql main\nselect master_add_node('citus1',5432);\nselect master_add_node('citus2',5432);\n\nmain=# select master_get_active_worker_nodes();\n master_get_active_worker_nodes\n--------------------------------\n (citus1,5432)\n (citus2,5432)\n(2 行记录)\n```\n\n# 使用Citus\n现在只要在协调节点`citus0`上的`main`库中建表。所有工作节点都会自动创建分表。\n\n在协调节点上存储会将数据分发到不同的工作节点上。查询也是在多个工作节点上分布查询了。\n","source":"_posts/postgresql-citus.md","raw":"---\ntitle: Citus，PostgreSQL的最佳分布式改造！\ndate: 2020-08-14 12:23:02\ntags: [PostgreSQL, Citus]\n---\n\n对于一直工作在关系型数据库，且功能强大的PostgreSQL的开发者来说。\nCitus 无疑是给他们插上了一对火箭！让关系型数据库的用户，也能翱翔在大数据的时代。\n\nCitus 正在被很多大数据机构使用，日均更新5～10亿记录，甚至有在70个节点上，运行数据规模达1.4PB！\n\nCitus 适用于多租户、实时分析场景。（这也正是我迫切需要的！）\n\n下边介绍Citus的上手经历。\n\n# 试验架构\n```mermaid\ngraph TB\n  m[(citus0)]\n  slave1[(citus1)]\n  slave2[(citus2)]\n  m---slave1\n  m---slave2\n```\n\n# 准备主机\n分布式，至少两台以上主机。\n- 协调节点，负责统筹。主机名：citus0\n- 工作节点，负责存储计算。主机名：citus1、citus2\n\n# 编译安装\n在每一台机器上，按以下操作同样参数安装。\n## 版本\n- OS：FreeBSD-12.1-RELEASE-AMD64\n    - https://www.freebsd.org/releases/12.1R/announce.html\n- PostgreSQL：12.3\n    - https://www.postgresql.org/ftp/source/v12.3/\n- Citus：9.4.0\n    - https://github.com/citusdata/citus/releases/tag/v9.4.0\n\n## 编译参数\n### PostgreSQL 12.3 编译\n编译：\n```shell\nkg install llvm90 gettext curl gmake\n./configure '--with-libraries=/usr/local/lib' '--with-includes=/usr/local/include' '--enable-thread-safety' '--disable-debug' '--enable-nls' '--without-pam' '--with-openssl' '--without-llvm' '--without-gssapi' '--prefix=/usr/local' '--localstatedir=/var' '--mandir=/usr/local/man' '--infodir=/usr/local/share/info/' '--build=amd64-portbld-freebsd12.1' 'build_alias=amd64-portbld-freebsd12.1' 'CC=cc' 'CFLAGS=-O2 -pipe  -fstack-protector-strong -fno-strict-aliasing ' 'LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong ' 'LIBS=' 'CPPFLAGS=-I/usr/local/include' 'CXX=c++' 'CXXFLAGS=-O2 -pipe -fstack-protector-strong -fno-strict-aliasing  ' 'CPP=cpp' 'PKG_CONFIG=pkgconf' 'LDFLAGS_SL='\nmake world\nmake install-world\nadduser postgres\n```\n\n### Citus 9.4.0 编译\n编译\n```shell\n./configure 'LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong ' CPPFLAGS=-I/usr/local/include\ngmake\ngmake install\n```\n\n# 设置并启用Citus\n## 所有主机上的共同操作\n注意：***以下所有操作都在要每个节点主机上完整操作完。包括建库和启用`citus`。且一定是先建库，进入`main`库后再启动`citus`扩展***\n- 初始化数据库\n```shell\nsu postgres\ninitdb data\n```\n- 配置`postgresql.conf`\n> listen_addresses = '*'\n>\n> port = 5432\n>\n>shared_buffers = 256MB # 按需调节\n>\n>shared_preload_libraries = 'citus' # 关键配置\n>\n- 配置`pg_hba.conf`\n>host    all             all             192.168.1.1/24          trust  # 开放内网访问\n>\n- 启动PostgreSQL\n```shell script\npg_ctl -D data start\n```\n- 建库并启用Citus\n```shell\npsql\ncreate database main;\n\\c main\ncreate extension citus;\n```\n\n## 协调节点上的操作\n```shell\npsql main\nselect master_add_node('citus1',5432);\nselect master_add_node('citus2',5432);\n\nmain=# select master_get_active_worker_nodes();\n master_get_active_worker_nodes\n--------------------------------\n (citus1,5432)\n (citus2,5432)\n(2 行记录)\n```\n\n# 使用Citus\n现在只要在协调节点`citus0`上的`main`库中建表。所有工作节点都会自动创建分表。\n\n在协调节点上存储会将数据分发到不同的工作节点上。查询也是在多个工作节点上分布查询了。\n","slug":"postgresql-citus","published":1,"updated":"2021-09-21T13:10:13.653Z","_id":"ckl8zw5s0001t2aah8ewjgm69","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对于一直工作在关系型数据库，且功能强大的PostgreSQL的开发者来说。<br>Citus 无疑是给他们插上了一对火箭！让关系型数据库的用户，也能翱翔在大数据的时代。</p>\n<p>Citus 正在被很多大数据机构使用，日均更新5～10亿记录，甚至有在70个节点上，运行数据规模达1.4PB！</p>\n<p>Citus 适用于多租户、实时分析场景。（这也正是我迫切需要的！）</p>\n<p>下边介绍Citus的上手经历。</p>\n<h1 id=\"试验架构\"><a href=\"#试验架构\" class=\"headerlink\" title=\"试验架构\"></a>试验架构</h1><pre class=\"mermaid\">graph TB\n  m[(citus0)]\n  slave1[(citus1)]\n  slave2[(citus2)]\n  m---slave1\n  m---slave2</pre>\n\n<h1 id=\"准备主机\"><a href=\"#准备主机\" class=\"headerlink\" title=\"准备主机\"></a>准备主机</h1><p>分布式，至少两台以上主机。</p>\n<ul>\n<li>协调节点，负责统筹。主机名：citus0</li>\n<li>工作节点，负责存储计算。主机名：citus1、citus2</li>\n</ul>\n<h1 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h1><p>在每一台机器上，按以下操作同样参数安装。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>OS：FreeBSD-12.1-RELEASE-AMD64<ul>\n<li><a class=\"link\"   href=\"https://www.freebsd.org/releases/12.1R/announce.html\" >https://www.freebsd.org/releases/12.1R/announce.html<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li>PostgreSQL：12.3<ul>\n<li><a class=\"link\"   href=\"https://www.postgresql.org/ftp/source/v12.3/\" >https://www.postgresql.org/ftp/source/v12.3/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li>Citus：9.4.0<ul>\n<li><a class=\"link\"   href=\"https://github.com/citusdata/citus/releases/tag/v9.4.0\" >https://github.com/citusdata/citus/releases/tag/v9.4.0<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译参数\"><a href=\"#编译参数\" class=\"headerlink\" title=\"编译参数\"></a>编译参数</h2><h3 id=\"PostgreSQL-12-3-编译\"><a href=\"#PostgreSQL-12-3-编译\" class=\"headerlink\" title=\"PostgreSQL 12.3 编译\"></a>PostgreSQL 12.3 编译</h3><p>编译：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kg install llvm90 gettext curl gmake</span><br><span class=\"line\">./configure &#x27;--with-libraries=/usr/local/lib&#x27; &#x27;--with-includes=/usr/local/include&#x27; &#x27;--enable-thread-safety&#x27; &#x27;--disable-debug&#x27; &#x27;--enable-nls&#x27; &#x27;--without-pam&#x27; &#x27;--with-openssl&#x27; &#x27;--without-llvm&#x27; &#x27;--without-gssapi&#x27; &#x27;--prefix=/usr/local&#x27; &#x27;--localstatedir=/var&#x27; &#x27;--mandir=/usr/local/man&#x27; &#x27;--infodir=/usr/local/share/info/&#x27; &#x27;--build=amd64-portbld-freebsd12.1&#x27; &#x27;build_alias=amd64-portbld-freebsd12.1&#x27; &#x27;CC=cc&#x27; &#x27;CFLAGS=-O2 -pipe  -fstack-protector-strong -fno-strict-aliasing &#x27; &#x27;LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong &#x27; &#x27;LIBS=&#x27; &#x27;CPPFLAGS=-I/usr/local/include&#x27; &#x27;CXX=c++&#x27; &#x27;CXXFLAGS=-O2 -pipe -fstack-protector-strong -fno-strict-aliasing  &#x27; &#x27;CPP=cpp&#x27; &#x27;PKG_CONFIG=pkgconf&#x27; &#x27;LDFLAGS_SL=&#x27;</span><br><span class=\"line\">make world</span><br><span class=\"line\">make install-world</span><br><span class=\"line\">adduser postgres</span><br></pre></td></tr></table></figure>\n<h3 id=\"Citus-9-4-0-编译\"><a href=\"#Citus-9-4-0-编译\" class=\"headerlink\" title=\"Citus 9.4.0 编译\"></a>Citus 9.4.0 编译</h3><p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure &#x27;LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong &#x27; CPPFLAGS=-I/usr/local/include</span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置并启用Citus\"><a href=\"#设置并启用Citus\" class=\"headerlink\" title=\"设置并启用Citus\"></a>设置并启用Citus</h1><h2 id=\"所有主机上的共同操作\"><a href=\"#所有主机上的共同操作\" class=\"headerlink\" title=\"所有主机上的共同操作\"></a>所有主机上的共同操作</h2><p>注意：**<em>以下所有操作都在要每个节点主机上完整操作完。包括建库和启用<code>citus</code>。且一定是先建库，进入<code>main</code>库后再启动<code>citus</code>扩展**</em></p>\n<ul>\n<li>初始化数据库<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su postgres</span><br><span class=\"line\">initdb data</span><br></pre></td></tr></table></figure></li>\n<li>配置<code>postgresql.conf</code><blockquote>\n<p>listen_addresses = ‘*’</p>\n<p>port = 5432</p>\n<p>shared_buffers = 256MB # 按需调节</p>\n<p>shared_preload_libraries = ‘citus’ # 关键配置</p>\n</blockquote>\n</li>\n<li>配置<code>pg_hba.conf</code><blockquote>\n<p>host    all             all             192.168.1.1/24          trust  # 开放内网访问</p>\n</blockquote>\n</li>\n<li>启动PostgreSQL<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pg_ctl -D data start</span><br></pre></td></tr></table></figure></li>\n<li>建库并启用Citus<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql</span><br><span class=\"line\">create database main;</span><br><span class=\"line\">\\c main</span><br><span class=\"line\">create extension citus;</span><br></pre></td></tr></table></figure>\n<h2 id=\"协调节点上的操作\"><a href=\"#协调节点上的操作\" class=\"headerlink\" title=\"协调节点上的操作\"></a>协调节点上的操作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql main</span><br><span class=\"line\">select master_add_node(&#x27;citus1&#x27;,5432);</span><br><span class=\"line\">select master_add_node(&#x27;citus2&#x27;,5432);</span><br><span class=\"line\"></span><br><span class=\"line\">main=# select master_get_active_worker_nodes();</span><br><span class=\"line\"> master_get_active_worker_nodes</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\"> (citus1,5432)</span><br><span class=\"line\"> (citus2,5432)</span><br><span class=\"line\">(2 行记录)</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Citus\"><a href=\"#使用Citus\" class=\"headerlink\" title=\"使用Citus\"></a>使用Citus</h1>现在只要在协调节点<code>citus0</code>上的<code>main</code>库中建表。所有工作节点都会自动创建分表。</li>\n</ul>\n<p>在协调节点上存储会将数据分发到不同的工作节点上。查询也是在多个工作节点上分布查询了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于一直工作在关系型数据库，且功能强大的PostgreSQL的开发者来说。<br>Citus 无疑是给他们插上了一对火箭！让关系型数据库的用户，也能翱翔在大数据的时代。</p>\n<p>Citus 正在被很多大数据机构使用，日均更新5～10亿记录，甚至有在70个节点上，运行数据规模达1.4PB！</p>\n<p>Citus 适用于多租户、实时分析场景。（这也正是我迫切需要的！）</p>\n<p>下边介绍Citus的上手经历。</p>\n<h1 id=\"试验架构\"><a href=\"#试验架构\" class=\"headerlink\" title=\"试验架构\"></a>试验架构</h1><pre class=\"mermaid\">graph TB\n  m[(citus0)]\n  slave1[(citus1)]\n  slave2[(citus2)]\n  m---slave1\n  m---slave2</pre>\n\n<h1 id=\"准备主机\"><a href=\"#准备主机\" class=\"headerlink\" title=\"准备主机\"></a>准备主机</h1><p>分布式，至少两台以上主机。</p>\n<ul>\n<li>协调节点，负责统筹。主机名：citus0</li>\n<li>工作节点，负责存储计算。主机名：citus1、citus2</li>\n</ul>\n<h1 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h1><p>在每一台机器上，按以下操作同样参数安装。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>OS：FreeBSD-12.1-RELEASE-AMD64<ul>\n<li><a class=\"link\"   href=\"https://www.freebsd.org/releases/12.1R/announce.html\" >https://www.freebsd.org/releases/12.1R/announce.html<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li>PostgreSQL：12.3<ul>\n<li><a class=\"link\"   href=\"https://www.postgresql.org/ftp/source/v12.3/\" >https://www.postgresql.org/ftp/source/v12.3/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li>Citus：9.4.0<ul>\n<li><a class=\"link\"   href=\"https://github.com/citusdata/citus/releases/tag/v9.4.0\" >https://github.com/citusdata/citus/releases/tag/v9.4.0<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译参数\"><a href=\"#编译参数\" class=\"headerlink\" title=\"编译参数\"></a>编译参数</h2><h3 id=\"PostgreSQL-12-3-编译\"><a href=\"#PostgreSQL-12-3-编译\" class=\"headerlink\" title=\"PostgreSQL 12.3 编译\"></a>PostgreSQL 12.3 编译</h3><p>编译：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kg install llvm90 gettext curl gmake</span><br><span class=\"line\">./configure &#x27;--with-libraries=/usr/local/lib&#x27; &#x27;--with-includes=/usr/local/include&#x27; &#x27;--enable-thread-safety&#x27; &#x27;--disable-debug&#x27; &#x27;--enable-nls&#x27; &#x27;--without-pam&#x27; &#x27;--with-openssl&#x27; &#x27;--without-llvm&#x27; &#x27;--without-gssapi&#x27; &#x27;--prefix=/usr/local&#x27; &#x27;--localstatedir=/var&#x27; &#x27;--mandir=/usr/local/man&#x27; &#x27;--infodir=/usr/local/share/info/&#x27; &#x27;--build=amd64-portbld-freebsd12.1&#x27; &#x27;build_alias=amd64-portbld-freebsd12.1&#x27; &#x27;CC=cc&#x27; &#x27;CFLAGS=-O2 -pipe  -fstack-protector-strong -fno-strict-aliasing &#x27; &#x27;LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong &#x27; &#x27;LIBS=&#x27; &#x27;CPPFLAGS=-I/usr/local/include&#x27; &#x27;CXX=c++&#x27; &#x27;CXXFLAGS=-O2 -pipe -fstack-protector-strong -fno-strict-aliasing  &#x27; &#x27;CPP=cpp&#x27; &#x27;PKG_CONFIG=pkgconf&#x27; &#x27;LDFLAGS_SL=&#x27;</span><br><span class=\"line\">make world</span><br><span class=\"line\">make install-world</span><br><span class=\"line\">adduser postgres</span><br></pre></td></tr></table></figure>\n<h3 id=\"Citus-9-4-0-编译\"><a href=\"#Citus-9-4-0-编译\" class=\"headerlink\" title=\"Citus 9.4.0 编译\"></a>Citus 9.4.0 编译</h3><p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure &#x27;LDFLAGS= -L/usr/local/lib -lpthread -L/usr/local/lib  -fstack-protector-strong &#x27; CPPFLAGS=-I/usr/local/include</span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置并启用Citus\"><a href=\"#设置并启用Citus\" class=\"headerlink\" title=\"设置并启用Citus\"></a>设置并启用Citus</h1><h2 id=\"所有主机上的共同操作\"><a href=\"#所有主机上的共同操作\" class=\"headerlink\" title=\"所有主机上的共同操作\"></a>所有主机上的共同操作</h2><p>注意：**<em>以下所有操作都在要每个节点主机上完整操作完。包括建库和启用<code>citus</code>。且一定是先建库，进入<code>main</code>库后再启动<code>citus</code>扩展**</em></p>\n<ul>\n<li>初始化数据库<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su postgres</span><br><span class=\"line\">initdb data</span><br></pre></td></tr></table></figure></li>\n<li>配置<code>postgresql.conf</code><blockquote>\n<p>listen_addresses = ‘*’</p>\n<p>port = 5432</p>\n<p>shared_buffers = 256MB # 按需调节</p>\n<p>shared_preload_libraries = ‘citus’ # 关键配置</p>\n</blockquote>\n</li>\n<li>配置<code>pg_hba.conf</code><blockquote>\n<p>host    all             all             192.168.1.1/24          trust  # 开放内网访问</p>\n</blockquote>\n</li>\n<li>启动PostgreSQL<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pg_ctl -D data start</span><br></pre></td></tr></table></figure></li>\n<li>建库并启用Citus<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql</span><br><span class=\"line\">create database main;</span><br><span class=\"line\">\\c main</span><br><span class=\"line\">create extension citus;</span><br></pre></td></tr></table></figure>\n<h2 id=\"协调节点上的操作\"><a href=\"#协调节点上的操作\" class=\"headerlink\" title=\"协调节点上的操作\"></a>协调节点上的操作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql main</span><br><span class=\"line\">select master_add_node(&#x27;citus1&#x27;,5432);</span><br><span class=\"line\">select master_add_node(&#x27;citus2&#x27;,5432);</span><br><span class=\"line\"></span><br><span class=\"line\">main=# select master_get_active_worker_nodes();</span><br><span class=\"line\"> master_get_active_worker_nodes</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\"> (citus1,5432)</span><br><span class=\"line\"> (citus2,5432)</span><br><span class=\"line\">(2 行记录)</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Citus\"><a href=\"#使用Citus\" class=\"headerlink\" title=\"使用Citus\"></a>使用Citus</h1>现在只要在协调节点<code>citus0</code>上的<code>main</code>库中建表。所有工作节点都会自动创建分表。</li>\n</ul>\n<p>在协调节点上存储会将数据分发到不同的工作节点上。查询也是在多个工作节点上分布查询了。</p>\n"},{"title":"PostgreSQL 性能优化","date":"2016-12-15T05:21:15.000Z","_content":"\n    PostgreSQL 一个连接一个进程，应用给WEB服务就压力山大了。\n    备点货以备山洪来临！\n\n\n*以下整理自：[Sense's Blog](http://blog.gdsyzx.edu.cn/sense/?p=460#content)*\n\n\n# 服务器参数配置\n\n配置文件postgres.conf中的很多设置都会影响性能，\n\n## shared_buffers\n\n这是最重要的参数，postgresql通过shared_buffers和内核/磁盘打交道。\n\n因此应该尽量大，让更多的数据缓存在shared_buffers中，通常设置为实际RAM的10％是合理的，比如50000(400M)\n\n## work_mem\n\n在pgsql 8.0之前叫做sort_mem。postgresql在执行排序操作时，\n\n会根据work_mem的大小决定是否将一个大的结果集拆分为几个小的和work_mem查不多大小的临时文件。\n\n显然拆分的结果是降低了排序的速度。因此增加work_mem有助于提高排序的速度。通常设置为实际RAM的2%-4%，根据需要排序结果集的大小而定，比如81920(80M)\n## effective_cache_size\n\n是postgresql能够使用的最大缓存，\n这个数字对于独立的pgsql服务器而言应该足够大，比如4G的内存，可以设置为3.5G(437500)\n\n## maintence_work_mem\n\n这里定义的内存只是在CREATE INDEX, VACUUM等时用到，因此用到的频率不高，但是往往这些指令消耗比较多的资源，\n\n因此应该尽快让这些指令快速执行完毕：给maintence_work_mem大的内存，比如512M(524288)\n\n## max_connections\n\n通常，max_connections的目的是防止max_connections * work_mem超出了实际内存大小。\n\n比如，如果将work_mem设置为实际内存的2%大小，则在极端情况下，如果有50个查询都有排序要求，而且都使用2％的内存，则会导致swap的产生，系统性能就会大大降低。\n\n当然，如果有4G的内存，同时出现50个如此大的查询的几率应该是很小的。不过，要清楚max_connections和work_mem的关系。\n\n有关参数的解释可见： http://www.postgres.cn/docs/9.5/runtime-config.html\n\n## 硬件的选择\n\n由于计算机硬件大多数是兼容的，人们总是倾向于相信所有计算机硬件质量也是相同的。\n\n事实上不是， ECC RAM（带奇偶校验的内存），SCSI （硬盘）和优质的主板比一些便宜货要更加可靠且具有更好的性能。\n\nPostgreSQL几乎可以运行在任何硬件上，但如果可靠性和性能对你的系统很重要，你就需要全面的研究一下你的硬件配置了。\n\n计算机硬件对性能的影响可浏览 http://candle.pha.pa.us/main/writings/pgsql/hw_performance/index.html 和 http://www.powerpostgresql.com/PerfList/。\n\n## 连接时收到“Sorry, too many clients”消息？\n\n这表示你已达到缺省100个并发后台进程数的限制，\n\n你需要通过修改postgresql.conf文件中的max_connections值来 增加postmaster的后台并发处理数，修改后需重新启动postmaster。\n\n\n# SQL查询\n\n检查数据检索的索引是否建立，凡是需要查找的字段尽量建立索引，甚至是联合索引；\n\n创建索引，包括表达式和部分索引；\n\n使用COPY语句代替多个Insert语句；\n\n将多个SQL语句组成一个事务以减少提交事务的开销；\n\n从一个索引中提取多条记录时使用CLUSTER；\n\n从一个查询结果中取出部分记录时使用LIMIT；\n\n使用预编译式查询（Prepared Query)；\n\n使用ANALYZE以保持精确的优化统计；\n\n定期使用 VACUUM 或 pg_autovacuum\n\n进行大量数据更改时先删除索引（然后重建索引）\n\n# 程序经验\n\n检查程序，是否使用了连接池，如果没有使用，尽快使用吧；\n\n继续检查程序，连接使用后，是否交还给了连接池；\n\n","source":"_posts/postgresql-config.md","raw":"---\ntitle: PostgreSQL 性能优化\ndate: 2016-12-15 13:21:15\ntags: [PostgreSQL, 性能优化]\n---\n\n    PostgreSQL 一个连接一个进程，应用给WEB服务就压力山大了。\n    备点货以备山洪来临！\n\n\n*以下整理自：[Sense's Blog](http://blog.gdsyzx.edu.cn/sense/?p=460#content)*\n\n\n# 服务器参数配置\n\n配置文件postgres.conf中的很多设置都会影响性能，\n\n## shared_buffers\n\n这是最重要的参数，postgresql通过shared_buffers和内核/磁盘打交道。\n\n因此应该尽量大，让更多的数据缓存在shared_buffers中，通常设置为实际RAM的10％是合理的，比如50000(400M)\n\n## work_mem\n\n在pgsql 8.0之前叫做sort_mem。postgresql在执行排序操作时，\n\n会根据work_mem的大小决定是否将一个大的结果集拆分为几个小的和work_mem查不多大小的临时文件。\n\n显然拆分的结果是降低了排序的速度。因此增加work_mem有助于提高排序的速度。通常设置为实际RAM的2%-4%，根据需要排序结果集的大小而定，比如81920(80M)\n## effective_cache_size\n\n是postgresql能够使用的最大缓存，\n这个数字对于独立的pgsql服务器而言应该足够大，比如4G的内存，可以设置为3.5G(437500)\n\n## maintence_work_mem\n\n这里定义的内存只是在CREATE INDEX, VACUUM等时用到，因此用到的频率不高，但是往往这些指令消耗比较多的资源，\n\n因此应该尽快让这些指令快速执行完毕：给maintence_work_mem大的内存，比如512M(524288)\n\n## max_connections\n\n通常，max_connections的目的是防止max_connections * work_mem超出了实际内存大小。\n\n比如，如果将work_mem设置为实际内存的2%大小，则在极端情况下，如果有50个查询都有排序要求，而且都使用2％的内存，则会导致swap的产生，系统性能就会大大降低。\n\n当然，如果有4G的内存，同时出现50个如此大的查询的几率应该是很小的。不过，要清楚max_connections和work_mem的关系。\n\n有关参数的解释可见： http://www.postgres.cn/docs/9.5/runtime-config.html\n\n## 硬件的选择\n\n由于计算机硬件大多数是兼容的，人们总是倾向于相信所有计算机硬件质量也是相同的。\n\n事实上不是， ECC RAM（带奇偶校验的内存），SCSI （硬盘）和优质的主板比一些便宜货要更加可靠且具有更好的性能。\n\nPostgreSQL几乎可以运行在任何硬件上，但如果可靠性和性能对你的系统很重要，你就需要全面的研究一下你的硬件配置了。\n\n计算机硬件对性能的影响可浏览 http://candle.pha.pa.us/main/writings/pgsql/hw_performance/index.html 和 http://www.powerpostgresql.com/PerfList/。\n\n## 连接时收到“Sorry, too many clients”消息？\n\n这表示你已达到缺省100个并发后台进程数的限制，\n\n你需要通过修改postgresql.conf文件中的max_connections值来 增加postmaster的后台并发处理数，修改后需重新启动postmaster。\n\n\n# SQL查询\n\n检查数据检索的索引是否建立，凡是需要查找的字段尽量建立索引，甚至是联合索引；\n\n创建索引，包括表达式和部分索引；\n\n使用COPY语句代替多个Insert语句；\n\n将多个SQL语句组成一个事务以减少提交事务的开销；\n\n从一个索引中提取多条记录时使用CLUSTER；\n\n从一个查询结果中取出部分记录时使用LIMIT；\n\n使用预编译式查询（Prepared Query)；\n\n使用ANALYZE以保持精确的优化统计；\n\n定期使用 VACUUM 或 pg_autovacuum\n\n进行大量数据更改时先删除索引（然后重建索引）\n\n# 程序经验\n\n检查程序，是否使用了连接池，如果没有使用，尽快使用吧；\n\n继续检查程序，连接使用后，是否交还给了连接池；\n\n","slug":"postgresql-config","published":1,"updated":"2021-01-06T09:56:16.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s1001u2aahcap42zyt","content":"<pre><code>PostgreSQL 一个连接一个进程，应用给WEB服务就压力山大了。\n备点货以备山洪来临！</code></pre>\n<p><em>以下整理自：<a class=\"link\"   href=\"http://blog.gdsyzx.edu.cn/sense/?p=460#content\" >Sense’s Blog<i class=\"fas fa-external-link-alt\"></i></a></em></p>\n<h1 id=\"服务器参数配置\"><a href=\"#服务器参数配置\" class=\"headerlink\" title=\"服务器参数配置\"></a>服务器参数配置</h1><p>配置文件postgres.conf中的很多设置都会影响性能，</p>\n<h2 id=\"shared-buffers\"><a href=\"#shared-buffers\" class=\"headerlink\" title=\"shared_buffers\"></a>shared_buffers</h2><p>这是最重要的参数，postgresql通过shared_buffers和内核/磁盘打交道。</p>\n<p>因此应该尽量大，让更多的数据缓存在shared_buffers中，通常设置为实际RAM的10％是合理的，比如50000(400M)</p>\n<h2 id=\"work-mem\"><a href=\"#work-mem\" class=\"headerlink\" title=\"work_mem\"></a>work_mem</h2><p>在pgsql 8.0之前叫做sort_mem。postgresql在执行排序操作时，</p>\n<p>会根据work_mem的大小决定是否将一个大的结果集拆分为几个小的和work_mem查不多大小的临时文件。</p>\n<p>显然拆分的结果是降低了排序的速度。因此增加work_mem有助于提高排序的速度。通常设置为实际RAM的2%-4%，根据需要排序结果集的大小而定，比如81920(80M)</p>\n<h2 id=\"effective-cache-size\"><a href=\"#effective-cache-size\" class=\"headerlink\" title=\"effective_cache_size\"></a>effective_cache_size</h2><p>是postgresql能够使用的最大缓存，<br>这个数字对于独立的pgsql服务器而言应该足够大，比如4G的内存，可以设置为3.5G(437500)</p>\n<h2 id=\"maintence-work-mem\"><a href=\"#maintence-work-mem\" class=\"headerlink\" title=\"maintence_work_mem\"></a>maintence_work_mem</h2><p>这里定义的内存只是在CREATE INDEX, VACUUM等时用到，因此用到的频率不高，但是往往这些指令消耗比较多的资源，</p>\n<p>因此应该尽快让这些指令快速执行完毕：给maintence_work_mem大的内存，比如512M(524288)</p>\n<h2 id=\"max-connections\"><a href=\"#max-connections\" class=\"headerlink\" title=\"max_connections\"></a>max_connections</h2><p>通常，max_connections的目的是防止max_connections * work_mem超出了实际内存大小。</p>\n<p>比如，如果将work_mem设置为实际内存的2%大小，则在极端情况下，如果有50个查询都有排序要求，而且都使用2％的内存，则会导致swap的产生，系统性能就会大大降低。</p>\n<p>当然，如果有4G的内存，同时出现50个如此大的查询的几率应该是很小的。不过，要清楚max_connections和work_mem的关系。</p>\n<p>有关参数的解释可见： <a class=\"link\"   href=\"http://www.postgres.cn/docs/9.5/runtime-config.html\" >http://www.postgres.cn/docs/9.5/runtime-config.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"硬件的选择\"><a href=\"#硬件的选择\" class=\"headerlink\" title=\"硬件的选择\"></a>硬件的选择</h2><p>由于计算机硬件大多数是兼容的，人们总是倾向于相信所有计算机硬件质量也是相同的。</p>\n<p>事实上不是， ECC RAM（带奇偶校验的内存），SCSI （硬盘）和优质的主板比一些便宜货要更加可靠且具有更好的性能。</p>\n<p>PostgreSQL几乎可以运行在任何硬件上，但如果可靠性和性能对你的系统很重要，你就需要全面的研究一下你的硬件配置了。</p>\n<p>计算机硬件对性能的影响可浏览 <a class=\"link\"   href=\"http://candle.pha.pa.us/main/writings/pgsql/hw_performance/index.html\" >http://candle.pha.pa.us/main/writings/pgsql/hw_performance/index.html<i class=\"fas fa-external-link-alt\"></i></a> 和 <a class=\"link\"   href=\"http://www.powerpostgresql.com/PerfList/%E3%80%82\" >http://www.powerpostgresql.com/PerfList/。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"连接时收到“Sorry-too-many-clients”消息？\"><a href=\"#连接时收到“Sorry-too-many-clients”消息？\" class=\"headerlink\" title=\"连接时收到“Sorry, too many clients”消息？\"></a>连接时收到“Sorry, too many clients”消息？</h2><p>这表示你已达到缺省100个并发后台进程数的限制，</p>\n<p>你需要通过修改postgresql.conf文件中的max_connections值来 增加postmaster的后台并发处理数，修改后需重新启动postmaster。</p>\n<h1 id=\"SQL查询\"><a href=\"#SQL查询\" class=\"headerlink\" title=\"SQL查询\"></a>SQL查询</h1><p>检查数据检索的索引是否建立，凡是需要查找的字段尽量建立索引，甚至是联合索引；</p>\n<p>创建索引，包括表达式和部分索引；</p>\n<p>使用COPY语句代替多个Insert语句；</p>\n<p>将多个SQL语句组成一个事务以减少提交事务的开销；</p>\n<p>从一个索引中提取多条记录时使用CLUSTER；</p>\n<p>从一个查询结果中取出部分记录时使用LIMIT；</p>\n<p>使用预编译式查询（Prepared Query)；</p>\n<p>使用ANALYZE以保持精确的优化统计；</p>\n<p>定期使用 VACUUM 或 pg_autovacuum</p>\n<p>进行大量数据更改时先删除索引（然后重建索引）</p>\n<h1 id=\"程序经验\"><a href=\"#程序经验\" class=\"headerlink\" title=\"程序经验\"></a>程序经验</h1><p>检查程序，是否使用了连接池，如果没有使用，尽快使用吧；</p>\n<p>继续检查程序，连接使用后，是否交还给了连接池；</p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>PostgreSQL 一个连接一个进程，应用给WEB服务就压力山大了。\n备点货以备山洪来临！</code></pre>\n<p><em>以下整理自：<a class=\"link\"   href=\"http://blog.gdsyzx.edu.cn/sense/?p=460#content\" >Sense’s Blog<i class=\"fas fa-external-link-alt\"></i></a></em></p>\n<h1 id=\"服务器参数配置\"><a href=\"#服务器参数配置\" class=\"headerlink\" title=\"服务器参数配置\"></a>服务器参数配置</h1><p>配置文件postgres.conf中的很多设置都会影响性能，</p>\n<h2 id=\"shared-buffers\"><a href=\"#shared-buffers\" class=\"headerlink\" title=\"shared_buffers\"></a>shared_buffers</h2><p>这是最重要的参数，postgresql通过shared_buffers和内核/磁盘打交道。</p>\n<p>因此应该尽量大，让更多的数据缓存在shared_buffers中，通常设置为实际RAM的10％是合理的，比如50000(400M)</p>\n<h2 id=\"work-mem\"><a href=\"#work-mem\" class=\"headerlink\" title=\"work_mem\"></a>work_mem</h2><p>在pgsql 8.0之前叫做sort_mem。postgresql在执行排序操作时，</p>\n<p>会根据work_mem的大小决定是否将一个大的结果集拆分为几个小的和work_mem查不多大小的临时文件。</p>\n<p>显然拆分的结果是降低了排序的速度。因此增加work_mem有助于提高排序的速度。通常设置为实际RAM的2%-4%，根据需要排序结果集的大小而定，比如81920(80M)</p>\n<h2 id=\"effective-cache-size\"><a href=\"#effective-cache-size\" class=\"headerlink\" title=\"effective_cache_size\"></a>effective_cache_size</h2><p>是postgresql能够使用的最大缓存，<br>这个数字对于独立的pgsql服务器而言应该足够大，比如4G的内存，可以设置为3.5G(437500)</p>\n<h2 id=\"maintence-work-mem\"><a href=\"#maintence-work-mem\" class=\"headerlink\" title=\"maintence_work_mem\"></a>maintence_work_mem</h2><p>这里定义的内存只是在CREATE INDEX, VACUUM等时用到，因此用到的频率不高，但是往往这些指令消耗比较多的资源，</p>\n<p>因此应该尽快让这些指令快速执行完毕：给maintence_work_mem大的内存，比如512M(524288)</p>\n<h2 id=\"max-connections\"><a href=\"#max-connections\" class=\"headerlink\" title=\"max_connections\"></a>max_connections</h2><p>通常，max_connections的目的是防止max_connections * work_mem超出了实际内存大小。</p>\n<p>比如，如果将work_mem设置为实际内存的2%大小，则在极端情况下，如果有50个查询都有排序要求，而且都使用2％的内存，则会导致swap的产生，系统性能就会大大降低。</p>\n<p>当然，如果有4G的内存，同时出现50个如此大的查询的几率应该是很小的。不过，要清楚max_connections和work_mem的关系。</p>\n<p>有关参数的解释可见： <a class=\"link\"   href=\"http://www.postgres.cn/docs/9.5/runtime-config.html\" >http://www.postgres.cn/docs/9.5/runtime-config.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"硬件的选择\"><a href=\"#硬件的选择\" class=\"headerlink\" title=\"硬件的选择\"></a>硬件的选择</h2><p>由于计算机硬件大多数是兼容的，人们总是倾向于相信所有计算机硬件质量也是相同的。</p>\n<p>事实上不是， ECC RAM（带奇偶校验的内存），SCSI （硬盘）和优质的主板比一些便宜货要更加可靠且具有更好的性能。</p>\n<p>PostgreSQL几乎可以运行在任何硬件上，但如果可靠性和性能对你的系统很重要，你就需要全面的研究一下你的硬件配置了。</p>\n<p>计算机硬件对性能的影响可浏览 <a class=\"link\"   href=\"http://candle.pha.pa.us/main/writings/pgsql/hw_performance/index.html\" >http://candle.pha.pa.us/main/writings/pgsql/hw_performance/index.html<i class=\"fas fa-external-link-alt\"></i></a> 和 <a class=\"link\"   href=\"http://www.powerpostgresql.com/PerfList/%E3%80%82\" >http://www.powerpostgresql.com/PerfList/。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"连接时收到“Sorry-too-many-clients”消息？\"><a href=\"#连接时收到“Sorry-too-many-clients”消息？\" class=\"headerlink\" title=\"连接时收到“Sorry, too many clients”消息？\"></a>连接时收到“Sorry, too many clients”消息？</h2><p>这表示你已达到缺省100个并发后台进程数的限制，</p>\n<p>你需要通过修改postgresql.conf文件中的max_connections值来 增加postmaster的后台并发处理数，修改后需重新启动postmaster。</p>\n<h1 id=\"SQL查询\"><a href=\"#SQL查询\" class=\"headerlink\" title=\"SQL查询\"></a>SQL查询</h1><p>检查数据检索的索引是否建立，凡是需要查找的字段尽量建立索引，甚至是联合索引；</p>\n<p>创建索引，包括表达式和部分索引；</p>\n<p>使用COPY语句代替多个Insert语句；</p>\n<p>将多个SQL语句组成一个事务以减少提交事务的开销；</p>\n<p>从一个索引中提取多条记录时使用CLUSTER；</p>\n<p>从一个查询结果中取出部分记录时使用LIMIT；</p>\n<p>使用预编译式查询（Prepared Query)；</p>\n<p>使用ANALYZE以保持精确的优化统计；</p>\n<p>定期使用 VACUUM 或 pg_autovacuum</p>\n<p>进行大量数据更改时先删除索引（然后重建索引）</p>\n<h1 id=\"程序经验\"><a href=\"#程序经验\" class=\"headerlink\" title=\"程序经验\"></a>程序经验</h1><p>检查程序，是否使用了连接池，如果没有使用，尽快使用吧；</p>\n<p>继续检查程序，连接使用后，是否交还给了连接池；</p>\n"},{"title":"使用postgresql的file-fdw扩展分析nginx日志","date":"2019-07-10T03:58:16.000Z","_content":"\n# 原料\n\n## PostgreSQL 方面\nPostgreSQL的file_fdw使用说明：\n[file_fdw 中文文档](http://www.postgres.cn/docs/11/file-fdw.html)\n\n## nginx 方面\nnginx 部分变量说明：\n- $remote_addr  客户端IP\n- $time_local   读起来不太舒服的时间\n- $time_iso8601 比较舒服的时间\n- $request_time 从accept到发完相应数据，耗费的时间，单位：秒\n- $upstream_response_time   nginx收到请求交给其它应用处理并得到结果的时间，单位：秒\n- $body_bytes_sent  响应包体的尺寸，单位：字节\n- $request  请求描述\n- $status   响应的状态码\n\n**`$request_time`、`$upstream_response_time`的记录值不一定是数字，有时会是`-`**\n\n\n# 操作\n\n## Nginx\nPostgreSQL对处理CSV比较擅长。所以我们要把nginx的日志定制成CSV的样子。\n\n```conf\nlog_format  csv_log '$remote_addr, $time_iso8601, $request_time, $upstream_response_time, $body_bytes_sent, $request, $status';\n```\n在需要的server下应用这个格式，**要确保应用后的日志文件中只有一种格式的日志**。\n\n## PostgreSQL\n`psql` 进入\n\n判断是否安装扩展：\n```sql\n\\dx\n                                     List of installed extensions\n        Name        | Version |   Schema   |                        Description\n--------------------+---------+------------+-----------------------------------------------------------\n file_fdw           | 1.0     | public     | foreign-data wrapper for flat file access\n \n \n```\n安装扩展：\n```sql\ncreate extension file_fdw\n```\n创建服务：\n```sql\nCREATE SERVER nginx_log FOREIGN DATA WRAPPER file_fdw;\n```\n创建外部表：\n```sql\ncreate foreign table app_log (\n ip inet,\n create_at timestamp with time zone,\n request_cost text,\n stream_cost text,\n body_size integer,\n request text,\n status integer\n ) server nginx_log options ( filename '/your/nginx/log/path/file.log', format 'csv');\n```\n\n体验：\n```sql\nselect client_ip,create_at,request_cost,upstream_cost,pg_size_pretty(body_size::bigint) body_length,request from app_log where body_size>1024*1024;\n\n  client_ip  |       create_at        | request_cost | upstream_cost | body_length |                           request\n-------------+------------------------+--------------+---------------+-------------+--------------------------------------------------------------\n 58.19.94.70 | 2019-07-09 11:05:37+08 |  0.984       |  0.113        | 1470 kB     |  GET /v4.3.1/sync/member_pockets?at=-999&sid=205118 HTTP/2.0\n 58.19.94.70 | 2019-07-09 11:05:38+08 |  0.810       |  0.149        | 1470 kB     |  GET /v4.3.1/sync/member_pockets?at=-999&sid=205118 HTTP/2.0\n(2 rows)\n\n```\n","source":"_posts/postgresql-file-fdw-analysis-nginx-log.md","raw":"---\ntitle: 使用postgresql的file-fdw扩展分析nginx日志\ndate: 2019-07-10 11:58:16\ntags: [PostgreSQL, file-fdw, nginx, log]\n---\n\n# 原料\n\n## PostgreSQL 方面\nPostgreSQL的file_fdw使用说明：\n[file_fdw 中文文档](http://www.postgres.cn/docs/11/file-fdw.html)\n\n## nginx 方面\nnginx 部分变量说明：\n- $remote_addr  客户端IP\n- $time_local   读起来不太舒服的时间\n- $time_iso8601 比较舒服的时间\n- $request_time 从accept到发完相应数据，耗费的时间，单位：秒\n- $upstream_response_time   nginx收到请求交给其它应用处理并得到结果的时间，单位：秒\n- $body_bytes_sent  响应包体的尺寸，单位：字节\n- $request  请求描述\n- $status   响应的状态码\n\n**`$request_time`、`$upstream_response_time`的记录值不一定是数字，有时会是`-`**\n\n\n# 操作\n\n## Nginx\nPostgreSQL对处理CSV比较擅长。所以我们要把nginx的日志定制成CSV的样子。\n\n```conf\nlog_format  csv_log '$remote_addr, $time_iso8601, $request_time, $upstream_response_time, $body_bytes_sent, $request, $status';\n```\n在需要的server下应用这个格式，**要确保应用后的日志文件中只有一种格式的日志**。\n\n## PostgreSQL\n`psql` 进入\n\n判断是否安装扩展：\n```sql\n\\dx\n                                     List of installed extensions\n        Name        | Version |   Schema   |                        Description\n--------------------+---------+------------+-----------------------------------------------------------\n file_fdw           | 1.0     | public     | foreign-data wrapper for flat file access\n \n \n```\n安装扩展：\n```sql\ncreate extension file_fdw\n```\n创建服务：\n```sql\nCREATE SERVER nginx_log FOREIGN DATA WRAPPER file_fdw;\n```\n创建外部表：\n```sql\ncreate foreign table app_log (\n ip inet,\n create_at timestamp with time zone,\n request_cost text,\n stream_cost text,\n body_size integer,\n request text,\n status integer\n ) server nginx_log options ( filename '/your/nginx/log/path/file.log', format 'csv');\n```\n\n体验：\n```sql\nselect client_ip,create_at,request_cost,upstream_cost,pg_size_pretty(body_size::bigint) body_length,request from app_log where body_size>1024*1024;\n\n  client_ip  |       create_at        | request_cost | upstream_cost | body_length |                           request\n-------------+------------------------+--------------+---------------+-------------+--------------------------------------------------------------\n 58.19.94.70 | 2019-07-09 11:05:37+08 |  0.984       |  0.113        | 1470 kB     |  GET /v4.3.1/sync/member_pockets?at=-999&sid=205118 HTTP/2.0\n 58.19.94.70 | 2019-07-09 11:05:38+08 |  0.810       |  0.149        | 1470 kB     |  GET /v4.3.1/sync/member_pockets?at=-999&sid=205118 HTTP/2.0\n(2 rows)\n\n```\n","slug":"postgresql-file-fdw-analysis-nginx-log","published":1,"updated":"2021-01-06T09:56:16.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s2001w2aah60nff30q","content":"<h1 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h1><h2 id=\"PostgreSQL-方面\"><a href=\"#PostgreSQL-方面\" class=\"headerlink\" title=\"PostgreSQL 方面\"></a>PostgreSQL 方面</h2><p>PostgreSQL的file_fdw使用说明：<br><a class=\"link\"   href=\"http://www.postgres.cn/docs/11/file-fdw.html\" >file_fdw 中文文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"nginx-方面\"><a href=\"#nginx-方面\" class=\"headerlink\" title=\"nginx 方面\"></a>nginx 方面</h2><p>nginx 部分变量说明：</p>\n<ul>\n<li>$remote_addr  客户端IP</li>\n<li>$time_local   读起来不太舒服的时间</li>\n<li>$time_iso8601 比较舒服的时间</li>\n<li>$request_time 从accept到发完相应数据，耗费的时间，单位：秒</li>\n<li>$upstream_response_time   nginx收到请求交给其它应用处理并得到结果的时间，单位：秒</li>\n<li>$body_bytes_sent  响应包体的尺寸，单位：字节</li>\n<li>$request  请求描述</li>\n<li>$status   响应的状态码</li>\n</ul>\n<p><strong><code>$request_time</code>、<code>$upstream_response_time</code>的记录值不一定是数字，有时会是<code>-</code></strong></p>\n<h1 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h1><h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>PostgreSQL对处理CSV比较擅长。所以我们要把nginx的日志定制成CSV的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  csv_log &#39;$remote_addr, $time_iso8601, $request_time, $upstream_response_time, $body_bytes_sent, $request, $status&#39;;</span><br></pre></td></tr></table></figure>\n<p>在需要的server下应用这个格式，<strong>要确保应用后的日志文件中只有一种格式的日志</strong>。</p>\n<h2 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h2><p><code>psql</code> 进入</p>\n<p>判断是否安装扩展：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\dx</span><br><span class=\"line\">                                     List <span class=\"keyword\">of</span> installed extensions</span><br><span class=\"line\">        Name        <span class=\"operator\">|</span> Version <span class=\"operator\">|</span>   Schema   <span class=\"operator\">|</span>                        Description</span><br><span class=\"line\"><span class=\"comment\">--------------------+---------+------------+-----------------------------------------------------------</span></span><br><span class=\"line\"> file_fdw           <span class=\"operator\">|</span> <span class=\"number\">1.0</span>     <span class=\"operator\">|</span> public     <span class=\"operator\">|</span> <span class=\"keyword\">foreign</span><span class=\"operator\">-</span>data wrapper <span class=\"keyword\">for</span> flat file access</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p>安装扩展：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> extension file_fdw</span><br></pre></td></tr></table></figure>\n<p>创建服务：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SERVER nginx_log <span class=\"keyword\">FOREIGN</span> DATA WRAPPER file_fdw;</span><br></pre></td></tr></table></figure>\n<p>创建外部表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">table</span> app_log (</span><br><span class=\"line\"> ip inet,</span><br><span class=\"line\"> create_at <span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone,</span><br><span class=\"line\"> request_cost text,</span><br><span class=\"line\"> stream_cost text,</span><br><span class=\"line\"> body_size <span class=\"type\">integer</span>,</span><br><span class=\"line\"> request text,</span><br><span class=\"line\"> status <span class=\"type\">integer</span></span><br><span class=\"line\"> ) server nginx_log options ( filename <span class=\"string\">&#x27;/your/nginx/log/path/file.log&#x27;</span>, format <span class=\"string\">&#x27;csv&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>体验：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> client_ip,create_at,request_cost,upstream_cost,pg_size_pretty(body_size::<span class=\"type\">bigint</span>) body_length,request <span class=\"keyword\">from</span> app_log <span class=\"keyword\">where</span> body_size<span class=\"operator\">&gt;</span><span class=\"number\">1024</span><span class=\"operator\">*</span><span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  client_ip  <span class=\"operator\">|</span>       create_at        <span class=\"operator\">|</span> request_cost <span class=\"operator\">|</span> upstream_cost <span class=\"operator\">|</span> body_length <span class=\"operator\">|</span>                           request</span><br><span class=\"line\"><span class=\"comment\">-------------+------------------------+--------------+---------------+-------------+--------------------------------------------------------------</span></span><br><span class=\"line\"> <span class=\"number\">58.19</span><span class=\"number\">.94</span><span class=\"number\">.70</span> <span class=\"operator\">|</span> <span class=\"number\">2019</span><span class=\"number\">-07</span><span class=\"number\">-09</span> <span class=\"number\">11</span>:<span class=\"number\">05</span>:<span class=\"number\">37</span><span class=\"operator\">+</span><span class=\"number\">08</span> <span class=\"operator\">|</span>  <span class=\"number\">0.984</span>       <span class=\"operator\">|</span>  <span class=\"number\">0.113</span>        <span class=\"operator\">|</span> <span class=\"number\">1470</span> kB     <span class=\"operator\">|</span>  <span class=\"keyword\">GET</span> <span class=\"operator\">/</span>v4<span class=\"number\">.3</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sync<span class=\"operator\">/</span>member_pockets?<span class=\"keyword\">at</span><span class=\"operator\">=</span><span class=\"number\">-999</span><span class=\"operator\">&amp;</span>sid<span class=\"operator\">=</span><span class=\"number\">205118</span> HTTP<span class=\"operator\">/</span><span class=\"number\">2.0</span></span><br><span class=\"line\"> <span class=\"number\">58.19</span><span class=\"number\">.94</span><span class=\"number\">.70</span> <span class=\"operator\">|</span> <span class=\"number\">2019</span><span class=\"number\">-07</span><span class=\"number\">-09</span> <span class=\"number\">11</span>:<span class=\"number\">05</span>:<span class=\"number\">38</span><span class=\"operator\">+</span><span class=\"number\">08</span> <span class=\"operator\">|</span>  <span class=\"number\">0.810</span>       <span class=\"operator\">|</span>  <span class=\"number\">0.149</span>        <span class=\"operator\">|</span> <span class=\"number\">1470</span> kB     <span class=\"operator\">|</span>  <span class=\"keyword\">GET</span> <span class=\"operator\">/</span>v4<span class=\"number\">.3</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sync<span class=\"operator\">/</span>member_pockets?<span class=\"keyword\">at</span><span class=\"operator\">=</span><span class=\"number\">-999</span><span class=\"operator\">&amp;</span>sid<span class=\"operator\">=</span><span class=\"number\">205118</span> HTTP<span class=\"operator\">/</span><span class=\"number\">2.0</span></span><br><span class=\"line\">(<span class=\"number\">2</span> <span class=\"keyword\">rows</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h1><h2 id=\"PostgreSQL-方面\"><a href=\"#PostgreSQL-方面\" class=\"headerlink\" title=\"PostgreSQL 方面\"></a>PostgreSQL 方面</h2><p>PostgreSQL的file_fdw使用说明：<br><a class=\"link\"   href=\"http://www.postgres.cn/docs/11/file-fdw.html\" >file_fdw 中文文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"nginx-方面\"><a href=\"#nginx-方面\" class=\"headerlink\" title=\"nginx 方面\"></a>nginx 方面</h2><p>nginx 部分变量说明：</p>\n<ul>\n<li>$remote_addr  客户端IP</li>\n<li>$time_local   读起来不太舒服的时间</li>\n<li>$time_iso8601 比较舒服的时间</li>\n<li>$request_time 从accept到发完相应数据，耗费的时间，单位：秒</li>\n<li>$upstream_response_time   nginx收到请求交给其它应用处理并得到结果的时间，单位：秒</li>\n<li>$body_bytes_sent  响应包体的尺寸，单位：字节</li>\n<li>$request  请求描述</li>\n<li>$status   响应的状态码</li>\n</ul>\n<p><strong><code>$request_time</code>、<code>$upstream_response_time</code>的记录值不一定是数字，有时会是<code>-</code></strong></p>\n<h1 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h1><h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>PostgreSQL对处理CSV比较擅长。所以我们要把nginx的日志定制成CSV的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  csv_log &#39;$remote_addr, $time_iso8601, $request_time, $upstream_response_time, $body_bytes_sent, $request, $status&#39;;</span><br></pre></td></tr></table></figure>\n<p>在需要的server下应用这个格式，<strong>要确保应用后的日志文件中只有一种格式的日志</strong>。</p>\n<h2 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h2><p><code>psql</code> 进入</p>\n<p>判断是否安装扩展：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\dx</span><br><span class=\"line\">                                     List <span class=\"keyword\">of</span> installed extensions</span><br><span class=\"line\">        Name        <span class=\"operator\">|</span> Version <span class=\"operator\">|</span>   Schema   <span class=\"operator\">|</span>                        Description</span><br><span class=\"line\"><span class=\"comment\">--------------------+---------+------------+-----------------------------------------------------------</span></span><br><span class=\"line\"> file_fdw           <span class=\"operator\">|</span> <span class=\"number\">1.0</span>     <span class=\"operator\">|</span> public     <span class=\"operator\">|</span> <span class=\"keyword\">foreign</span><span class=\"operator\">-</span>data wrapper <span class=\"keyword\">for</span> flat file access</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p>安装扩展：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> extension file_fdw</span><br></pre></td></tr></table></figure>\n<p>创建服务：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SERVER nginx_log <span class=\"keyword\">FOREIGN</span> DATA WRAPPER file_fdw;</span><br></pre></td></tr></table></figure>\n<p>创建外部表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">table</span> app_log (</span><br><span class=\"line\"> ip inet,</span><br><span class=\"line\"> create_at <span class=\"type\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"type\">time</span> zone,</span><br><span class=\"line\"> request_cost text,</span><br><span class=\"line\"> stream_cost text,</span><br><span class=\"line\"> body_size <span class=\"type\">integer</span>,</span><br><span class=\"line\"> request text,</span><br><span class=\"line\"> status <span class=\"type\">integer</span></span><br><span class=\"line\"> ) server nginx_log options ( filename <span class=\"string\">&#x27;/your/nginx/log/path/file.log&#x27;</span>, format <span class=\"string\">&#x27;csv&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>体验：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> client_ip,create_at,request_cost,upstream_cost,pg_size_pretty(body_size::<span class=\"type\">bigint</span>) body_length,request <span class=\"keyword\">from</span> app_log <span class=\"keyword\">where</span> body_size<span class=\"operator\">&gt;</span><span class=\"number\">1024</span><span class=\"operator\">*</span><span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  client_ip  <span class=\"operator\">|</span>       create_at        <span class=\"operator\">|</span> request_cost <span class=\"operator\">|</span> upstream_cost <span class=\"operator\">|</span> body_length <span class=\"operator\">|</span>                           request</span><br><span class=\"line\"><span class=\"comment\">-------------+------------------------+--------------+---------------+-------------+--------------------------------------------------------------</span></span><br><span class=\"line\"> <span class=\"number\">58.19</span><span class=\"number\">.94</span><span class=\"number\">.70</span> <span class=\"operator\">|</span> <span class=\"number\">2019</span><span class=\"number\">-07</span><span class=\"number\">-09</span> <span class=\"number\">11</span>:<span class=\"number\">05</span>:<span class=\"number\">37</span><span class=\"operator\">+</span><span class=\"number\">08</span> <span class=\"operator\">|</span>  <span class=\"number\">0.984</span>       <span class=\"operator\">|</span>  <span class=\"number\">0.113</span>        <span class=\"operator\">|</span> <span class=\"number\">1470</span> kB     <span class=\"operator\">|</span>  <span class=\"keyword\">GET</span> <span class=\"operator\">/</span>v4<span class=\"number\">.3</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sync<span class=\"operator\">/</span>member_pockets?<span class=\"keyword\">at</span><span class=\"operator\">=</span><span class=\"number\">-999</span><span class=\"operator\">&amp;</span>sid<span class=\"operator\">=</span><span class=\"number\">205118</span> HTTP<span class=\"operator\">/</span><span class=\"number\">2.0</span></span><br><span class=\"line\"> <span class=\"number\">58.19</span><span class=\"number\">.94</span><span class=\"number\">.70</span> <span class=\"operator\">|</span> <span class=\"number\">2019</span><span class=\"number\">-07</span><span class=\"number\">-09</span> <span class=\"number\">11</span>:<span class=\"number\">05</span>:<span class=\"number\">38</span><span class=\"operator\">+</span><span class=\"number\">08</span> <span class=\"operator\">|</span>  <span class=\"number\">0.810</span>       <span class=\"operator\">|</span>  <span class=\"number\">0.149</span>        <span class=\"operator\">|</span> <span class=\"number\">1470</span> kB     <span class=\"operator\">|</span>  <span class=\"keyword\">GET</span> <span class=\"operator\">/</span>v4<span class=\"number\">.3</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sync<span class=\"operator\">/</span>member_pockets?<span class=\"keyword\">at</span><span class=\"operator\">=</span><span class=\"number\">-999</span><span class=\"operator\">&amp;</span>sid<span class=\"operator\">=</span><span class=\"number\">205118</span> HTTP<span class=\"operator\">/</span><span class=\"number\">2.0</span></span><br><span class=\"line\">(<span class=\"number\">2</span> <span class=\"keyword\">rows</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"FreeBSD 上初始化 PostgreSQL 96","date":"2017-07-12T08:32:11.000Z","_content":"\n## 疼点\n* `postgres` 这个用户名，打起来麻烦，不及`pgsql`方便。\n* `initdb` 出来的库默认是英文的\n\n## 设置\n\n```bash\nee /etc/csh.cshrc\n\nalias ll\tls -lAF\nalias ls\tls -FG\n\n\nsetenv LANG         zh_CN.UTF-8\nsetenv LC_CTYPE     zh_CN.UTF-8\nsetenv LC_ALL       zh_CN.UTF-8\n```\n\n`adduser` pgsql\n\n```bash\nsu pgsql\ninitdb data96 -E utf8 --locale=zh_CN.UTF-8\n```\n\n注：`pg_upgrade -d main/ -D /var/db/postgres/data96/ -b /var/server/pgsql94/bin/ -B /usr/local/bin/ -U pgsql`\n\n这是一个成功率低、操作复杂、过程繁琐、环境要求高 的事情。\n\n如果升级数据库，还是`pg_dump` `pg_restore`来得方便。\n\n对于复杂关系的库，`pg_upgrade`也会出现主键丢失之类的奇怪事情。","source":"_posts/postgresql-init.md","raw":"---\ntitle: FreeBSD 上初始化 PostgreSQL 96\ndate: 2017-07-12 16:32:11\ntags: [FreeBSD, PostgreSQL, initdb]\n---\n\n## 疼点\n* `postgres` 这个用户名，打起来麻烦，不及`pgsql`方便。\n* `initdb` 出来的库默认是英文的\n\n## 设置\n\n```bash\nee /etc/csh.cshrc\n\nalias ll\tls -lAF\nalias ls\tls -FG\n\n\nsetenv LANG         zh_CN.UTF-8\nsetenv LC_CTYPE     zh_CN.UTF-8\nsetenv LC_ALL       zh_CN.UTF-8\n```\n\n`adduser` pgsql\n\n```bash\nsu pgsql\ninitdb data96 -E utf8 --locale=zh_CN.UTF-8\n```\n\n注：`pg_upgrade -d main/ -D /var/db/postgres/data96/ -b /var/server/pgsql94/bin/ -B /usr/local/bin/ -U pgsql`\n\n这是一个成功率低、操作复杂、过程繁琐、环境要求高 的事情。\n\n如果升级数据库，还是`pg_dump` `pg_restore`来得方便。\n\n对于复杂关系的库，`pg_upgrade`也会出现主键丢失之类的奇怪事情。","slug":"postgresql-init","published":1,"updated":"2021-01-06T09:56:16.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s2001x2aah85vn9x4k","content":"<h2 id=\"疼点\"><a href=\"#疼点\" class=\"headerlink\" title=\"疼点\"></a>疼点</h2><ul>\n<li><code>postgres</code> 这个用户名，打起来麻烦，不及<code>pgsql</code>方便。</li>\n<li><code>initdb</code> 出来的库默认是英文的</li>\n</ul>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ee /etc/csh.cshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll\tls -lAF</span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls\tls -FG</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">setenv LANG         zh_CN.UTF-8</span><br><span class=\"line\">setenv LC_CTYPE     zh_CN.UTF-8</span><br><span class=\"line\">setenv LC_ALL       zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n<p><code>adduser</code> pgsql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su pgsql</span><br><span class=\"line\">initdb data96 -E utf8 --locale=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n<p>注：<code>pg_upgrade -d main/ -D /var/db/postgres/data96/ -b /var/server/pgsql94/bin/ -B /usr/local/bin/ -U pgsql</code></p>\n<p>这是一个成功率低、操作复杂、过程繁琐、环境要求高 的事情。</p>\n<p>如果升级数据库，还是<code>pg_dump</code> <code>pg_restore</code>来得方便。</p>\n<p>对于复杂关系的库，<code>pg_upgrade</code>也会出现主键丢失之类的奇怪事情。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"疼点\"><a href=\"#疼点\" class=\"headerlink\" title=\"疼点\"></a>疼点</h2><ul>\n<li><code>postgres</code> 这个用户名，打起来麻烦，不及<code>pgsql</code>方便。</li>\n<li><code>initdb</code> 出来的库默认是英文的</li>\n</ul>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ee /etc/csh.cshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll\tls -lAF</span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls\tls -FG</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">setenv LANG         zh_CN.UTF-8</span><br><span class=\"line\">setenv LC_CTYPE     zh_CN.UTF-8</span><br><span class=\"line\">setenv LC_ALL       zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n<p><code>adduser</code> pgsql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su pgsql</span><br><span class=\"line\">initdb data96 -E utf8 --locale=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n<p>注：<code>pg_upgrade -d main/ -D /var/db/postgres/data96/ -b /var/server/pgsql94/bin/ -B /usr/local/bin/ -U pgsql</code></p>\n<p>这是一个成功率低、操作复杂、过程繁琐、环境要求高 的事情。</p>\n<p>如果升级数据库，还是<code>pg_dump</code> <code>pg_restore</code>来得方便。</p>\n<p>对于复杂关系的库，<code>pg_upgrade</code>也会出现主键丢失之类的奇怪事情。</p>\n"},{"title":"PostgreSQL SSL 加密传输配置","date":"2019-10-26T10:59:44.000Z","_content":"\n# 签名证书\n\n## 快速测试证书\n```\nopenssl req -new -x509 -days 365 -nodes -text -out server.crt \\\n  -keyout server.key -subj \"/CN=dbhost.yourdomain.com\"\n```\n然后\n```\nchmod og-rwx server.key\n```\n\n## 生产环境证书\n- 创建根密钥\n```\nopenssl req -new -nodes -text -out root.csr \\\n  -keyout root.key -subj \"/CN=root.yourdomain.com\"\nchmod og-rwx root.key\n```\n- 创建根证书\n```\nopenssl x509 -req -in root.csr -text -days 3650 \\\n  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \\\n  -signkey root.key -out root.crt\n```\n> 这里的`-extensions v3_ca`中的`v3_ca` 是在 `/etc/ssl/openssl.cnf`文件中的一个配置。配置要求：\n> ```\n> [ v3_ca ]\n> basicConstraints = critical,CA:TRUE\n> subjectKeyIdentifier = hash\n> authorityKeyIdentifier = keyid:always,issuer:always\n> ```\n\n- 创建服务器密钥并签名\n```\nopenssl req -new -nodes -text -out server.csr \\\n  -keyout server.key -subj \"/CN=dbhost.yourdomain.com\"\nchmod og-rwx server.key\n\nopenssl x509 -req -in server.csr -text -days 365 \\\n  -CA root.crt -CAkey root.key -CAcreateserial \\\n  -out server.crt\n```\n\n- 创建客户端密钥并签名\n```\nopenssl req -new -nodes -text -out client.csr \\\n  -keyout client.key -subj \"/CN=postgres\"\nchmod og-rwx client.key\n\nopenssl x509 -req -in client.csr -text -days 365 \\\n  -CA root.crt -CAkey root.key -CAcreateserial \\\n  -out client.crt\n```\n\n- 使用 `JDBC` 连接时，key需要转换为der\n```\nopenssl pkcs8 -topk8 -inform PEM -in client.key -outform DER -nocrypt -out client.key.der\n```\n","source":"_posts/postgresql-ssl.md","raw":"---\ntitle: PostgreSQL SSL 加密传输配置\ndate: 2019-10-26 18:59:44\ntags: [PostgreSQL, SSL]\n---\n\n# 签名证书\n\n## 快速测试证书\n```\nopenssl req -new -x509 -days 365 -nodes -text -out server.crt \\\n  -keyout server.key -subj \"/CN=dbhost.yourdomain.com\"\n```\n然后\n```\nchmod og-rwx server.key\n```\n\n## 生产环境证书\n- 创建根密钥\n```\nopenssl req -new -nodes -text -out root.csr \\\n  -keyout root.key -subj \"/CN=root.yourdomain.com\"\nchmod og-rwx root.key\n```\n- 创建根证书\n```\nopenssl x509 -req -in root.csr -text -days 3650 \\\n  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \\\n  -signkey root.key -out root.crt\n```\n> 这里的`-extensions v3_ca`中的`v3_ca` 是在 `/etc/ssl/openssl.cnf`文件中的一个配置。配置要求：\n> ```\n> [ v3_ca ]\n> basicConstraints = critical,CA:TRUE\n> subjectKeyIdentifier = hash\n> authorityKeyIdentifier = keyid:always,issuer:always\n> ```\n\n- 创建服务器密钥并签名\n```\nopenssl req -new -nodes -text -out server.csr \\\n  -keyout server.key -subj \"/CN=dbhost.yourdomain.com\"\nchmod og-rwx server.key\n\nopenssl x509 -req -in server.csr -text -days 365 \\\n  -CA root.crt -CAkey root.key -CAcreateserial \\\n  -out server.crt\n```\n\n- 创建客户端密钥并签名\n```\nopenssl req -new -nodes -text -out client.csr \\\n  -keyout client.key -subj \"/CN=postgres\"\nchmod og-rwx client.key\n\nopenssl x509 -req -in client.csr -text -days 365 \\\n  -CA root.crt -CAkey root.key -CAcreateserial \\\n  -out client.crt\n```\n\n- 使用 `JDBC` 连接时，key需要转换为der\n```\nopenssl pkcs8 -topk8 -inform PEM -in client.key -outform DER -nocrypt -out client.key.der\n```\n","slug":"postgresql-ssl","published":1,"updated":"2021-01-06T09:56:16.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s4001z2aah4ryda13s","content":"<h1 id=\"签名证书\"><a href=\"#签名证书\" class=\"headerlink\" title=\"签名证书\"></a>签名证书</h1><h2 id=\"快速测试证书\"><a href=\"#快速测试证书\" class=\"headerlink\" title=\"快速测试证书\"></a>快速测试证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 365 -nodes -text -out server.crt \\</span><br><span class=\"line\">  -keyout server.key -subj &quot;&#x2F;CN&#x3D;dbhost.yourdomain.com&quot;</span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod og-rwx server.key</span><br></pre></td></tr></table></figure>\n<h2 id=\"生产环境证书\"><a href=\"#生产环境证书\" class=\"headerlink\" title=\"生产环境证书\"></a>生产环境证书</h2><ul>\n<li>创建根密钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -nodes -text -out root.csr \\</span><br><span class=\"line\">  -keyout root.key -subj &quot;&#x2F;CN&#x3D;root.yourdomain.com&quot;</span><br><span class=\"line\">chmod og-rwx root.key</span><br></pre></td></tr></table></figure></li>\n<li>创建根证书<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -in root.csr -text -days 3650 \\</span><br><span class=\"line\">  -extfile &#x2F;etc&#x2F;ssl&#x2F;openssl.cnf -extensions v3_ca \\</span><br><span class=\"line\">  -signkey root.key -out root.crt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的<code>-extensions v3_ca</code>中的<code>v3_ca</code> 是在 <code>/etc/ssl/openssl.cnf</code>文件中的一个配置。配置要求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ v3_ca ]</span><br><span class=\"line\">basicConstraints &#x3D; critical,CA:TRUE</span><br><span class=\"line\">subjectKeyIdentifier &#x3D; hash</span><br><span class=\"line\">authorityKeyIdentifier &#x3D; keyid:always,issuer:always</span><br></pre></td></tr></table></figure></blockquote>\n</li>\n<li>创建服务器密钥并签名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -nodes -text -out server.csr \\</span><br><span class=\"line\">  -keyout server.key -subj &quot;&#x2F;CN&#x3D;dbhost.yourdomain.com&quot;</span><br><span class=\"line\">chmod og-rwx server.key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -in server.csr -text -days 365 \\</span><br><span class=\"line\">  -CA root.crt -CAkey root.key -CAcreateserial \\</span><br><span class=\"line\">  -out server.crt</span><br></pre></td></tr></table></figure></li>\n<li>创建客户端密钥并签名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -nodes -text -out client.csr \\</span><br><span class=\"line\">  -keyout client.key -subj &quot;&#x2F;CN&#x3D;postgres&quot;</span><br><span class=\"line\">chmod og-rwx client.key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -in client.csr -text -days 365 \\</span><br><span class=\"line\">  -CA root.crt -CAkey root.key -CAcreateserial \\</span><br><span class=\"line\">  -out client.crt</span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>JDBC</code> 连接时，key需要转换为der<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs8 -topk8 -inform PEM -in client.key -outform DER -nocrypt -out client.key.der</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"签名证书\"><a href=\"#签名证书\" class=\"headerlink\" title=\"签名证书\"></a>签名证书</h1><h2 id=\"快速测试证书\"><a href=\"#快速测试证书\" class=\"headerlink\" title=\"快速测试证书\"></a>快速测试证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 365 -nodes -text -out server.crt \\</span><br><span class=\"line\">  -keyout server.key -subj &quot;&#x2F;CN&#x3D;dbhost.yourdomain.com&quot;</span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod og-rwx server.key</span><br></pre></td></tr></table></figure>\n<h2 id=\"生产环境证书\"><a href=\"#生产环境证书\" class=\"headerlink\" title=\"生产环境证书\"></a>生产环境证书</h2><ul>\n<li>创建根密钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -nodes -text -out root.csr \\</span><br><span class=\"line\">  -keyout root.key -subj &quot;&#x2F;CN&#x3D;root.yourdomain.com&quot;</span><br><span class=\"line\">chmod og-rwx root.key</span><br></pre></td></tr></table></figure></li>\n<li>创建根证书<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -in root.csr -text -days 3650 \\</span><br><span class=\"line\">  -extfile &#x2F;etc&#x2F;ssl&#x2F;openssl.cnf -extensions v3_ca \\</span><br><span class=\"line\">  -signkey root.key -out root.crt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的<code>-extensions v3_ca</code>中的<code>v3_ca</code> 是在 <code>/etc/ssl/openssl.cnf</code>文件中的一个配置。配置要求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ v3_ca ]</span><br><span class=\"line\">basicConstraints &#x3D; critical,CA:TRUE</span><br><span class=\"line\">subjectKeyIdentifier &#x3D; hash</span><br><span class=\"line\">authorityKeyIdentifier &#x3D; keyid:always,issuer:always</span><br></pre></td></tr></table></figure></blockquote>\n</li>\n<li>创建服务器密钥并签名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -nodes -text -out server.csr \\</span><br><span class=\"line\">  -keyout server.key -subj &quot;&#x2F;CN&#x3D;dbhost.yourdomain.com&quot;</span><br><span class=\"line\">chmod og-rwx server.key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -in server.csr -text -days 365 \\</span><br><span class=\"line\">  -CA root.crt -CAkey root.key -CAcreateserial \\</span><br><span class=\"line\">  -out server.crt</span><br></pre></td></tr></table></figure></li>\n<li>创建客户端密钥并签名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -nodes -text -out client.csr \\</span><br><span class=\"line\">  -keyout client.key -subj &quot;&#x2F;CN&#x3D;postgres&quot;</span><br><span class=\"line\">chmod og-rwx client.key</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -in client.csr -text -days 365 \\</span><br><span class=\"line\">  -CA root.crt -CAkey root.key -CAcreateserial \\</span><br><span class=\"line\">  -out client.crt</span><br></pre></td></tr></table></figure></li>\n<li>使用 <code>JDBC</code> 连接时，key需要转换为der<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs8 -topk8 -inform PEM -in client.key -outform DER -nocrypt -out client.key.der</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"一张图搞定各种SQL JOINS","date":"2017-07-22T03:18:11.000Z","_content":"\n\n![](https://user-images.githubusercontent.com/1764005/28487907-12e08682-6ecf-11e7-9a18-1f229476f0ae.jpg)","source":"_posts/sql-join.md","raw":"---\ntitle: 一张图搞定各种SQL JOINS\ndate: 2017-07-22 11:18:11\ntags: [PostgreSQL, SQL, JOIN]\n---\n\n\n![](https://user-images.githubusercontent.com/1764005/28487907-12e08682-6ecf-11e7-9a18-1f229476f0ae.jpg)","slug":"sql-join","published":1,"updated":"2021-01-06T09:56:16.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s400212aah5in50q7z","content":"<p><img src=\"https://user-images.githubusercontent.com/1764005/28487907-12e08682-6ecf-11e7-9a18-1f229476f0ae.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://user-images.githubusercontent.com/1764005/28487907-12e08682-6ecf-11e7-9a18-1f229476f0ae.jpg\"></p>\n"},{"title":"swoole 编译配置","date":"2017-06-05T05:57:12.000Z","_content":"\n\n./configure --enable-sockets --enable-openssl --enable-thread --enable-swoole --enable-ringbuffer --with-swoole --enable-picohttpparser --with-openssl-dir=/usr/local --with-jemalloc-dir=/usr/local\n\n\nhttps://github.com/jemalloc/jemalloc\n\n./configure --enable-autogen  --with-jemalloc-prefix=je_\n\nmake -j\n\nsudo make install_bin install_include install_lib\n\n\n\nhttps://github.com/h2o/picohttpparser\n\n","source":"_posts/swoole-configure.md","raw":"---\ntitle: swoole 编译配置\ndate: 2017-06-05 13:57:12\ntags: [PHP, Swoole]\n---\n\n\n./configure --enable-sockets --enable-openssl --enable-thread --enable-swoole --enable-ringbuffer --with-swoole --enable-picohttpparser --with-openssl-dir=/usr/local --with-jemalloc-dir=/usr/local\n\n\nhttps://github.com/jemalloc/jemalloc\n\n./configure --enable-autogen  --with-jemalloc-prefix=je_\n\nmake -j\n\nsudo make install_bin install_include install_lib\n\n\n\nhttps://github.com/h2o/picohttpparser\n\n","slug":"swoole-configure","published":1,"updated":"2021-01-06T09:56:16.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s500242aah01hrezxf","content":"<p>./configure –enable-sockets –enable-openssl –enable-thread –enable-swoole –enable-ringbuffer –with-swoole –enable-picohttpparser –with-openssl-dir=/usr/local –with-jemalloc-dir=/usr/local</p>\n<p><a class=\"link\"   href=\"https://github.com/jemalloc/jemalloc\" >https://github.com/jemalloc/jemalloc<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>./configure –enable-autogen  –with-jemalloc-prefix=je_</p>\n<p>make -j</p>\n<p>sudo make install_bin install_include install_lib</p>\n<p><a class=\"link\"   href=\"https://github.com/h2o/picohttpparser\" >https://github.com/h2o/picohttpparser<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>./configure –enable-sockets –enable-openssl –enable-thread –enable-swoole –enable-ringbuffer –with-swoole –enable-picohttpparser –with-openssl-dir=/usr/local –with-jemalloc-dir=/usr/local</p>\n<p><a class=\"link\"   href=\"https://github.com/jemalloc/jemalloc\" >https://github.com/jemalloc/jemalloc<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>./configure –enable-autogen  –with-jemalloc-prefix=je_</p>\n<p>make -j</p>\n<p>sudo make install_bin install_include install_lib</p>\n<p><a class=\"link\"   href=\"https://github.com/h2o/picohttpparser\" >https://github.com/h2o/picohttpparser<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"tcpdump 使用技巧","date":"2020-02-05T10:35:29.000Z","_content":"一般情况下，非HTTP协议的网络分析，在服务器端用`tcpdump`比较多，在客户端用wireshark比较多，两个抓包软件的语法是一样的。\n\n## 一、基本语法\n\n### 1.1、过滤主机\n\n- 抓取所有经过eth1，目的或源地址是192.168.1.1的网络数据\n\n```bash\ntcpdump -i eth1 host 192.168.1.1\n```\n\n- 指定源地址\n\n```bash\ntcpdump -i eth1 src host 192.168.1.1\n```\n\n- 指定目的地址\n\n```bash\ntcpdump -i eth1 dst host 192.168.1.1\n```\n\n### 1.2、过滤端口\n\n- 抓取所有经过eth1，目的或源端口是25的网络数据\n\n```bash\ntcpdump -i eth1 port 25\n```\n\n- 指定源端口\n\n```bash\ntcpdump -i eth1 src port 25\n```\n\n- 指定目的端口\n\n```bash\ntcpdump -i eth1 dst port 25\n```\n\n### 1.3、网络过滤\n\n```bash\ntcpdump -i eth1 net 192.168\ntcpdump -i eth1 src net 192.168\ntcpdump -i eth1 dst net 192.168\n```\n\n### 1.4、协议过滤\n\n```bash\ntcpdump -i eth1 arp\ntcpdump -i eth1 ip\ntcpdump -i eth1 tcp\ntcpdump -i eth1 udp\ntcpdump -i eth1 icmp\n```\n\n### 1.5、常用表达式\n\n    非 : ! or \"not\" (去掉双引号)  \n    且 : && or \"and\"  \n    或 : || or \"or\"  \n\n- 抓取所有经过eth1，目的地址是192.168.1.254或192.168.1.200端口是80的TCP数据\n\n```bash\ntcpdump -i eth1 '((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))'\n```\n\n- 抓取所有经过eth1，目标MAC地址是00:01:02:03:04:05的ICMP数据\n\n```bash\ntcpdump -i eth1 '((icmp) and ((ether dst host 00:01:02:03:04:05)))'\n```\n\n- 抓取所有经过eth1，目的网络是192.168，但目的主机不是192.168.1.200的TCP数据\n\n```bash\ntcpdump -i eth1 '((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))'\n```\n\n## 二、高级包头过滤\n\n首先了解如何从包头过滤信息\n\n```\nproto[x:y]          : 过滤从x字节开始的y字节数。比如ip[2:2]过滤出3、4字节（第一字节从0开始排）\nproto[x:y] & z = 0  : proto[x:y]和z的与操作为0\nproto[x:y] & z !=0  : proto[x:y]和z的与操作不为0\nproto[x:y] & z = z  : proto[x:y]和z的与操作为z\nproto[x:y] = z      : proto[x:y]等于z\n```\n\n操作符 : >, <, >=, <=, =, !=\n\n### 2.1、IP头\n\n```\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |Version|  IHL  |Type of Service|          Total Length         |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |         Identification        |Flags|      Fragment Offset    |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |  Time to Live |    Protocol   |         Header Checksum       |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                       Source Address                          |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Destination Address                        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Options                    |    Padding    | <-- optional\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                            DATA ...                           |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n本文只针对IPv4。\n\n### 2.2、Flags\n\n| TCP Flag | tcpdump Flag | 含义  |\n| :---- | :---- | :---- |\n| SYN | S | Syn数据包，会话建立请求。|\n| ACK | A | Ack数据包，确认发送端的数据。|\n| FIN | F | 结束标记，终止指示。|\n| RESET | R | 重置，指示立即终止连接。|\n| PUSH | P | 推送，立即将缓存中的数据发完。|\n| URGENT | U | 紧急，优先于其他数据。|\n| NONE | . | 占位符，通常用于ACK。|\n\n\n### 2.3、IP选项设置了吗？\n\n“一般”的IP头是20字节，但IP头有选项设置，不能直接从偏移21字节处读取数据。IP头有个长度字段可以知道头长度是否大于20字节。\n\n```\n +-+-+-+-+-+-+-+-+\n |Version|  IHL  |\n +-+-+-+-+-+-+-+-+\n```\n\n通常第一个字节的二进制值是：01000101，分成两个部分：\n\n0100 = 4 表示IP版本\n0101 = 5 表示IP头32 bit的块数，5 x 32 bits = 160 bits or 20 bytes\n\n如果第一字节第二部分的值大于5，那么表示头有IP选项。\n\n下面介绍两种过滤方法（第一种方法比较操蛋，可忽略）：\n\na. 比较第一字节的值是否大于01000101，这可以判断IPv4带IP选项的数据和IPv6的数据。\n\n01000101十进制等于69，计算方法如下（小提示：用计算器更方便）\n\n```\n0 : 0  \\\n1 : 2^6 = 64 \\ 第一部分 (IP版本)\n0 : 0   /\n0 : 0  /\n-\n0 : 0  \\\n1 : 2^2 = 4  \\ 第二部分 (头长度)\n0 : 0   /\n1 : 2^0 = 1 /\n```\n\n64 + 4 + 1 = 69\n\n如果设置了IP选项，那么第一自己是01000110（十进制70），过滤规则：\n```bash\ntcpdump -i eth1 'ip[0] > 69'\n```\n\nIPv6的数据也会匹配，看看第二种方法。\n\nb. 位操作\n\n0100 0101 : 第一字节的二进制  \n0000 1111 : 与操作  \n<=========  \n0000 0101 : 结果  \n\n正确的过滤方法\n\n```bash\ntcpdump -i eth1 'ip[0] & 15 > 5'\n```\n\n或者\n```bash\ntcpdump -i eth1 'ip[0] & 0x0f > 5'\n```\n\n### 2.4、分片标记\n\n当发送端的MTU大于到目的路径链路上的MTU时就会被分片，这段话有点拗口，权威的请参考《TCP/IP详解》。唉，32借我的书没还，只能凑合写，大家记得看书啊。\n\n分片信息在IP头的第七和第八字节：\n\n```\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |Flags|      Fragment Offset    |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\nBit 0:  保留，必须是0  \nBit 1:  (DF) 0 = 可能分片, 1 = 不分片  \nBit 2:  (MF) 0 = 最后的分片, 1 = 还有分片  \n\nFragment Offset字段只有在分片的时候才使用。\n\n要抓带DF位标记的不分片的包，第七字节的值应该是：\n\n01000000 = 64\n\n```bash\ntcpdump -i eth1 'ip[6] = 64'\n```\n\n### 2.5、抓分片包\n\n- 匹配MF，分片包\n\n```bash\ntcpdump -i eth1 'ip[6] = 32'\n```\n\n最后分片包的开始3位是0，但是有Fragment Offset字段。\n\n- 匹配分片和最后分片\n\n```bash\ntcpdump -i eth1 '((ip[6:2] > 0) and (not ip[6] = 64))'\n```\n\n测试分片可以用下面的命令：\n\n```bash\nping -M want -s 3000 192.168.1.1\n```\n\n### 2.6、匹配小TTL\n\nTTL字段在第九字节，并且正好是完整的一个字节，TTL最大值是255，二进制为11111111。\n\n可以用下面的命令验证一下：\n\n```bash\n$ ping -M want -s 3000 -t 256 192.168.1.200\nping: ttl 256 out of range\n```\n\n```\n +-+-+-+-+-+-+-+-+\n |  Time to Live |\n +-+-+-+-+-+-+-+-+\n```\n\n- 在网关可以用下面的命令看看网络中谁在使用traceroute\n\n```bash\ntcpdump -i eth1 'ip[8] < 5'\n```\n\n### 2.7、抓大于X字节的包\n\n- 大于600字节\n\n```bash\ntcpdump -i eth1 'ip[2:2] > 600'\n```\n\n### 2.8、更多的IP过滤\n\n首先还是需要知道TCP基本结构，再次推荐《TCP/IP详解》，卷一就够看的了，避免走火入魔。\n\n- TCP头\n\n```\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |          Source Port          |       Destination Port        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                        Sequence Number                        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Acknowledgment Number                      |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |  Data |       |C|E|U|A|P|R|S|F|                               |\n | Offset|  Res. |W|C|R|C|S|S|Y|I|            Window             |\n |       |       |R|E|G|K|H|T|N|N|                               |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |           Checksum            |         Urgent Pointer        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Options                    |    Padding    |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                             data                              |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n- 抓取源端口大于1024的TCP数据包\n\n```bash\ntcpdump -i eth1 'tcp[0:2] > 1024'\n```\n\n- 匹配TCP数据包的特殊标记\n\nTCP标记定义在TCP头的第十四个字节\n\n```\n +-+-+-+-+-+-+-+-+\n |C|E|U|A|P|R|S|F|\n |W|C|R|C|S|S|Y|I|\n |R|E|G|K|H|T|N|N|\n +-+-+-+-+-+-+-+-+\n```\n\n重复一下TCP三次握手，两个主机是如何勾搭的：\n\n1. 源发送SYN\n2. 目标回答SYN, ACK\n3. 源发送ACK\n\n没女朋友的童鞋要学习一下：  \n1. MM，你的手有空吗？-_-  \n2. 有空，你呢？\\~_~  \n3. 我也有空 \\*_*  \n\n失败的loser是酱紫的：  \n1. MM，这是你掉的板砖吗？(SYN) ￣▽￣  \n2. 不是，找拍啊？(RST-ACK) ˋ﹏ˊ  \n\n- 只抓SYN包，第十四字节是二进制的00000010，也就是十进制的2\n\n```bash\ntcpdump -i eth1 'tcp[13] = 2'\n```\n\n- 抓SYN, ACK （00010010 or 18）\n\n```bash\ntcpdump -i eth1 'tcp[13] = 18'\n```\n\n- 抓SYN或者SYN-ACK\n\n```bash\ntcpdump -i eth1 'tcp[13] & 2 = 2'\n```\n\n用到了位操作，就是不管ACK位是啥。\n\n- 抓PSH-ACK\n\n```bash\ntcpdump -i eth1 'tcp[13] = 24'\n```\n\n- 抓所有包含FIN标记的包（FIN通常和ACK一起，表示幽会完了，回见）\n\n```bash\ntcpdump -i eth1 'tcp[13] & 1 = 1'\n```\n\n- 抓RST（勾搭没成功，伟大的greatwall对她认为有敏感信息的连接发RST包，典型的棒打鸳鸯）\n\n```bash\ntcpdump -i eth1 'tcp[13] & 4 = 4'\n```\n\n下图详细描述了TCP各种状态的标记，方便分析。\n\n![tcp_state_machine.jpg](https://raw.githubusercontent.com/linuxwiki/SourceWiki/master/images/tcp_state_machine.jpg)\n\n\n### 2.9、大叔注\n\ntcpdump考虑了一些数字恐惧症者的需求，提供了部分常用的字段偏移名字：\n\nicmptype  (ICMP类型字段)  \nicmpcode  (ICMP符号字段)  \ntcpflags  (TCP标记字段)  \n\nICMP类型值有：\n\nicmp-echoreply, icmp-unreach, icmp-sourcequench, icmp-redirect, icmp-echo, icmp-routeradvert, icmp-routersolicit, icmp-timxceed, icmp-paramprob, icmp-tstamp, icmp-tstampreply, icmp-ireq, icmp-ireqreply, icmp-maskreq, icmp-maskreply\n\nTCP标记值：\n\ntcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-push, tcp-ack, tcp-urg\n\n这样上面按照TCP标记位抓包的就可以写直观的表达式了：\n\n- 只抓SYN包\n\n```bash\ntcpdump -i eth1 'tcp[tcpflags] = tcp-syn'\n```\n\n- 抓SYN, ACK\n\n```bash\ntcpdump -i eth1 'tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack != 0'\n```\n\n### 2.10、抓SMTP数据\n\n```bash\ntcpdump -i eth1 '((port 25) and (tcp[(tcp[12]>>2):4] = 0x4d41494c))'\n```\n\n抓取数据区开始为\"MAIL\"的包，\"MAIL\"的十六进制为0x4d41494c。\n\n### 2.11、抓HTTP GET数据\n\n```bash\ntcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x47455420'\n```\n\n\"GET \"的十六进制是47455420\n\n### 2.12、抓SSH返回\n\n```bash\ntcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x5353482D'\n```\n\n\"SSH-\"的十六进制是0x5353482D\n\n```bash\ntcpdump -i eth1 '(tcp[(tcp[12]>>2):4] = 0x5353482D) and (tcp[((tcp[12]>>2)+4):2] = 0x312E)'\n```\n\n抓老版本的SSH返回信息，如\"SSH-1.99..\"\n\n## 三、大叔注\n\n如果是为了查看数据内容，建议用`tcpdump -s 0 -w filename`把数据包都保存下来，然后用wireshark的Follow TCP Stream/Follow UDP Stream来查看整个会话的内容。\n\n`-s 0`是抓取完整数据包，否则默认只抓68字节。\n\n另外，用tcpflow也可以方便的获取TCP会话内容，支持tcpdump的各种表达式。\n\n### 3.1、UDP头\n```\n  0      7 8     15 16    23 24    31\n +--------+--------+--------+--------+\n |     Source      |   Destination   |\n |      Port       |      Port       |\n +--------+--------+--------+--------+\n |                 |                 |\n |     Length      |    Checksum     |\n +--------+--------+--------+--------+\n |                                   |\n |              DATA ...             |\n +-----------------------------------+\n```\n\n- 抓DNS请求数据\n\n```bash\ntcpdump -i eth1 udp dst port 53\n```\n\n### 3.2、其他\n\n`-c`参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用`-c`参数指定抓多少个包。\n\n```bash\ntime tcpdump -nn -i eth0 'tcp[tcpflags] = tcp-syn' -c 10000 > /dev/null\n```\n\n上面的命令计算抓10000个SYN包花费多少时间，可以判断访问量大概是多少。\n\n## 四、参考资料\n\n> [tcpdump advanced filters](http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt)\n","source":"_posts/tcpdump.md","raw":"---\ntitle: tcpdump 使用技巧\ndate: 2020-02-05 18:35:29\ntags: [net]\n---\n一般情况下，非HTTP协议的网络分析，在服务器端用`tcpdump`比较多，在客户端用wireshark比较多，两个抓包软件的语法是一样的。\n\n## 一、基本语法\n\n### 1.1、过滤主机\n\n- 抓取所有经过eth1，目的或源地址是192.168.1.1的网络数据\n\n```bash\ntcpdump -i eth1 host 192.168.1.1\n```\n\n- 指定源地址\n\n```bash\ntcpdump -i eth1 src host 192.168.1.1\n```\n\n- 指定目的地址\n\n```bash\ntcpdump -i eth1 dst host 192.168.1.1\n```\n\n### 1.2、过滤端口\n\n- 抓取所有经过eth1，目的或源端口是25的网络数据\n\n```bash\ntcpdump -i eth1 port 25\n```\n\n- 指定源端口\n\n```bash\ntcpdump -i eth1 src port 25\n```\n\n- 指定目的端口\n\n```bash\ntcpdump -i eth1 dst port 25\n```\n\n### 1.3、网络过滤\n\n```bash\ntcpdump -i eth1 net 192.168\ntcpdump -i eth1 src net 192.168\ntcpdump -i eth1 dst net 192.168\n```\n\n### 1.4、协议过滤\n\n```bash\ntcpdump -i eth1 arp\ntcpdump -i eth1 ip\ntcpdump -i eth1 tcp\ntcpdump -i eth1 udp\ntcpdump -i eth1 icmp\n```\n\n### 1.5、常用表达式\n\n    非 : ! or \"not\" (去掉双引号)  \n    且 : && or \"and\"  \n    或 : || or \"or\"  \n\n- 抓取所有经过eth1，目的地址是192.168.1.254或192.168.1.200端口是80的TCP数据\n\n```bash\ntcpdump -i eth1 '((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))'\n```\n\n- 抓取所有经过eth1，目标MAC地址是00:01:02:03:04:05的ICMP数据\n\n```bash\ntcpdump -i eth1 '((icmp) and ((ether dst host 00:01:02:03:04:05)))'\n```\n\n- 抓取所有经过eth1，目的网络是192.168，但目的主机不是192.168.1.200的TCP数据\n\n```bash\ntcpdump -i eth1 '((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))'\n```\n\n## 二、高级包头过滤\n\n首先了解如何从包头过滤信息\n\n```\nproto[x:y]          : 过滤从x字节开始的y字节数。比如ip[2:2]过滤出3、4字节（第一字节从0开始排）\nproto[x:y] & z = 0  : proto[x:y]和z的与操作为0\nproto[x:y] & z !=0  : proto[x:y]和z的与操作不为0\nproto[x:y] & z = z  : proto[x:y]和z的与操作为z\nproto[x:y] = z      : proto[x:y]等于z\n```\n\n操作符 : >, <, >=, <=, =, !=\n\n### 2.1、IP头\n\n```\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |Version|  IHL  |Type of Service|          Total Length         |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |         Identification        |Flags|      Fragment Offset    |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |  Time to Live |    Protocol   |         Header Checksum       |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                       Source Address                          |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Destination Address                        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Options                    |    Padding    | <-- optional\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                            DATA ...                           |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n本文只针对IPv4。\n\n### 2.2、Flags\n\n| TCP Flag | tcpdump Flag | 含义  |\n| :---- | :---- | :---- |\n| SYN | S | Syn数据包，会话建立请求。|\n| ACK | A | Ack数据包，确认发送端的数据。|\n| FIN | F | 结束标记，终止指示。|\n| RESET | R | 重置，指示立即终止连接。|\n| PUSH | P | 推送，立即将缓存中的数据发完。|\n| URGENT | U | 紧急，优先于其他数据。|\n| NONE | . | 占位符，通常用于ACK。|\n\n\n### 2.3、IP选项设置了吗？\n\n“一般”的IP头是20字节，但IP头有选项设置，不能直接从偏移21字节处读取数据。IP头有个长度字段可以知道头长度是否大于20字节。\n\n```\n +-+-+-+-+-+-+-+-+\n |Version|  IHL  |\n +-+-+-+-+-+-+-+-+\n```\n\n通常第一个字节的二进制值是：01000101，分成两个部分：\n\n0100 = 4 表示IP版本\n0101 = 5 表示IP头32 bit的块数，5 x 32 bits = 160 bits or 20 bytes\n\n如果第一字节第二部分的值大于5，那么表示头有IP选项。\n\n下面介绍两种过滤方法（第一种方法比较操蛋，可忽略）：\n\na. 比较第一字节的值是否大于01000101，这可以判断IPv4带IP选项的数据和IPv6的数据。\n\n01000101十进制等于69，计算方法如下（小提示：用计算器更方便）\n\n```\n0 : 0  \\\n1 : 2^6 = 64 \\ 第一部分 (IP版本)\n0 : 0   /\n0 : 0  /\n-\n0 : 0  \\\n1 : 2^2 = 4  \\ 第二部分 (头长度)\n0 : 0   /\n1 : 2^0 = 1 /\n```\n\n64 + 4 + 1 = 69\n\n如果设置了IP选项，那么第一自己是01000110（十进制70），过滤规则：\n```bash\ntcpdump -i eth1 'ip[0] > 69'\n```\n\nIPv6的数据也会匹配，看看第二种方法。\n\nb. 位操作\n\n0100 0101 : 第一字节的二进制  \n0000 1111 : 与操作  \n<=========  \n0000 0101 : 结果  \n\n正确的过滤方法\n\n```bash\ntcpdump -i eth1 'ip[0] & 15 > 5'\n```\n\n或者\n```bash\ntcpdump -i eth1 'ip[0] & 0x0f > 5'\n```\n\n### 2.4、分片标记\n\n当发送端的MTU大于到目的路径链路上的MTU时就会被分片，这段话有点拗口，权威的请参考《TCP/IP详解》。唉，32借我的书没还，只能凑合写，大家记得看书啊。\n\n分片信息在IP头的第七和第八字节：\n\n```\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |Flags|      Fragment Offset    |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\nBit 0:  保留，必须是0  \nBit 1:  (DF) 0 = 可能分片, 1 = 不分片  \nBit 2:  (MF) 0 = 最后的分片, 1 = 还有分片  \n\nFragment Offset字段只有在分片的时候才使用。\n\n要抓带DF位标记的不分片的包，第七字节的值应该是：\n\n01000000 = 64\n\n```bash\ntcpdump -i eth1 'ip[6] = 64'\n```\n\n### 2.5、抓分片包\n\n- 匹配MF，分片包\n\n```bash\ntcpdump -i eth1 'ip[6] = 32'\n```\n\n最后分片包的开始3位是0，但是有Fragment Offset字段。\n\n- 匹配分片和最后分片\n\n```bash\ntcpdump -i eth1 '((ip[6:2] > 0) and (not ip[6] = 64))'\n```\n\n测试分片可以用下面的命令：\n\n```bash\nping -M want -s 3000 192.168.1.1\n```\n\n### 2.6、匹配小TTL\n\nTTL字段在第九字节，并且正好是完整的一个字节，TTL最大值是255，二进制为11111111。\n\n可以用下面的命令验证一下：\n\n```bash\n$ ping -M want -s 3000 -t 256 192.168.1.200\nping: ttl 256 out of range\n```\n\n```\n +-+-+-+-+-+-+-+-+\n |  Time to Live |\n +-+-+-+-+-+-+-+-+\n```\n\n- 在网关可以用下面的命令看看网络中谁在使用traceroute\n\n```bash\ntcpdump -i eth1 'ip[8] < 5'\n```\n\n### 2.7、抓大于X字节的包\n\n- 大于600字节\n\n```bash\ntcpdump -i eth1 'ip[2:2] > 600'\n```\n\n### 2.8、更多的IP过滤\n\n首先还是需要知道TCP基本结构，再次推荐《TCP/IP详解》，卷一就够看的了，避免走火入魔。\n\n- TCP头\n\n```\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |          Source Port          |       Destination Port        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                        Sequence Number                        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Acknowledgment Number                      |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |  Data |       |C|E|U|A|P|R|S|F|                               |\n | Offset|  Res. |W|C|R|C|S|S|Y|I|            Window             |\n |       |       |R|E|G|K|H|T|N|N|                               |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |           Checksum            |         Urgent Pointer        |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                    Options                    |    Padding    |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                             data                              |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n- 抓取源端口大于1024的TCP数据包\n\n```bash\ntcpdump -i eth1 'tcp[0:2] > 1024'\n```\n\n- 匹配TCP数据包的特殊标记\n\nTCP标记定义在TCP头的第十四个字节\n\n```\n +-+-+-+-+-+-+-+-+\n |C|E|U|A|P|R|S|F|\n |W|C|R|C|S|S|Y|I|\n |R|E|G|K|H|T|N|N|\n +-+-+-+-+-+-+-+-+\n```\n\n重复一下TCP三次握手，两个主机是如何勾搭的：\n\n1. 源发送SYN\n2. 目标回答SYN, ACK\n3. 源发送ACK\n\n没女朋友的童鞋要学习一下：  \n1. MM，你的手有空吗？-_-  \n2. 有空，你呢？\\~_~  \n3. 我也有空 \\*_*  \n\n失败的loser是酱紫的：  \n1. MM，这是你掉的板砖吗？(SYN) ￣▽￣  \n2. 不是，找拍啊？(RST-ACK) ˋ﹏ˊ  \n\n- 只抓SYN包，第十四字节是二进制的00000010，也就是十进制的2\n\n```bash\ntcpdump -i eth1 'tcp[13] = 2'\n```\n\n- 抓SYN, ACK （00010010 or 18）\n\n```bash\ntcpdump -i eth1 'tcp[13] = 18'\n```\n\n- 抓SYN或者SYN-ACK\n\n```bash\ntcpdump -i eth1 'tcp[13] & 2 = 2'\n```\n\n用到了位操作，就是不管ACK位是啥。\n\n- 抓PSH-ACK\n\n```bash\ntcpdump -i eth1 'tcp[13] = 24'\n```\n\n- 抓所有包含FIN标记的包（FIN通常和ACK一起，表示幽会完了，回见）\n\n```bash\ntcpdump -i eth1 'tcp[13] & 1 = 1'\n```\n\n- 抓RST（勾搭没成功，伟大的greatwall对她认为有敏感信息的连接发RST包，典型的棒打鸳鸯）\n\n```bash\ntcpdump -i eth1 'tcp[13] & 4 = 4'\n```\n\n下图详细描述了TCP各种状态的标记，方便分析。\n\n![tcp_state_machine.jpg](https://raw.githubusercontent.com/linuxwiki/SourceWiki/master/images/tcp_state_machine.jpg)\n\n\n### 2.9、大叔注\n\ntcpdump考虑了一些数字恐惧症者的需求，提供了部分常用的字段偏移名字：\n\nicmptype  (ICMP类型字段)  \nicmpcode  (ICMP符号字段)  \ntcpflags  (TCP标记字段)  \n\nICMP类型值有：\n\nicmp-echoreply, icmp-unreach, icmp-sourcequench, icmp-redirect, icmp-echo, icmp-routeradvert, icmp-routersolicit, icmp-timxceed, icmp-paramprob, icmp-tstamp, icmp-tstampreply, icmp-ireq, icmp-ireqreply, icmp-maskreq, icmp-maskreply\n\nTCP标记值：\n\ntcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-push, tcp-ack, tcp-urg\n\n这样上面按照TCP标记位抓包的就可以写直观的表达式了：\n\n- 只抓SYN包\n\n```bash\ntcpdump -i eth1 'tcp[tcpflags] = tcp-syn'\n```\n\n- 抓SYN, ACK\n\n```bash\ntcpdump -i eth1 'tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack != 0'\n```\n\n### 2.10、抓SMTP数据\n\n```bash\ntcpdump -i eth1 '((port 25) and (tcp[(tcp[12]>>2):4] = 0x4d41494c))'\n```\n\n抓取数据区开始为\"MAIL\"的包，\"MAIL\"的十六进制为0x4d41494c。\n\n### 2.11、抓HTTP GET数据\n\n```bash\ntcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x47455420'\n```\n\n\"GET \"的十六进制是47455420\n\n### 2.12、抓SSH返回\n\n```bash\ntcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x5353482D'\n```\n\n\"SSH-\"的十六进制是0x5353482D\n\n```bash\ntcpdump -i eth1 '(tcp[(tcp[12]>>2):4] = 0x5353482D) and (tcp[((tcp[12]>>2)+4):2] = 0x312E)'\n```\n\n抓老版本的SSH返回信息，如\"SSH-1.99..\"\n\n## 三、大叔注\n\n如果是为了查看数据内容，建议用`tcpdump -s 0 -w filename`把数据包都保存下来，然后用wireshark的Follow TCP Stream/Follow UDP Stream来查看整个会话的内容。\n\n`-s 0`是抓取完整数据包，否则默认只抓68字节。\n\n另外，用tcpflow也可以方便的获取TCP会话内容，支持tcpdump的各种表达式。\n\n### 3.1、UDP头\n```\n  0      7 8     15 16    23 24    31\n +--------+--------+--------+--------+\n |     Source      |   Destination   |\n |      Port       |      Port       |\n +--------+--------+--------+--------+\n |                 |                 |\n |     Length      |    Checksum     |\n +--------+--------+--------+--------+\n |                                   |\n |              DATA ...             |\n +-----------------------------------+\n```\n\n- 抓DNS请求数据\n\n```bash\ntcpdump -i eth1 udp dst port 53\n```\n\n### 3.2、其他\n\n`-c`参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用`-c`参数指定抓多少个包。\n\n```bash\ntime tcpdump -nn -i eth0 'tcp[tcpflags] = tcp-syn' -c 10000 > /dev/null\n```\n\n上面的命令计算抓10000个SYN包花费多少时间，可以判断访问量大概是多少。\n\n## 四、参考资料\n\n> [tcpdump advanced filters](http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt)\n","slug":"tcpdump","published":1,"updated":"2021-01-06T09:56:16.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s600262aahh86zdnxz","content":"<p>一般情况下，非HTTP协议的网络分析，在服务器端用<code>tcpdump</code>比较多，在客户端用wireshark比较多，两个抓包软件的语法是一样的。</p>\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><h3 id=\"1-1、过滤主机\"><a href=\"#1-1、过滤主机\" class=\"headerlink\" title=\"1.1、过滤主机\"></a>1.1、过滤主机</h3><ul>\n<li>抓取所有经过eth1，目的或源地址是192.168.1.1的网络数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 host 192.168.1.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定源地址</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 src host 192.168.1.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定目的地址</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 dst host 192.168.1.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2、过滤端口\"><a href=\"#1-2、过滤端口\" class=\"headerlink\" title=\"1.2、过滤端口\"></a>1.2、过滤端口</h3><ul>\n<li>抓取所有经过eth1，目的或源端口是25的网络数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 port 25</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定源端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 src port 25</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定目的端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 dst port 25</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3、网络过滤\"><a href=\"#1-3、网络过滤\" class=\"headerlink\" title=\"1.3、网络过滤\"></a>1.3、网络过滤</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 net 192.168</span><br><span class=\"line\">tcpdump -i eth1 src net 192.168</span><br><span class=\"line\">tcpdump -i eth1 dst net 192.168</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4、协议过滤\"><a href=\"#1-4、协议过滤\" class=\"headerlink\" title=\"1.4、协议过滤\"></a>1.4、协议过滤</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 arp</span><br><span class=\"line\">tcpdump -i eth1 ip</span><br><span class=\"line\">tcpdump -i eth1 tcp</span><br><span class=\"line\">tcpdump -i eth1 udp</span><br><span class=\"line\">tcpdump -i eth1 icmp</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5、常用表达式\"><a href=\"#1-5、常用表达式\" class=\"headerlink\" title=\"1.5、常用表达式\"></a>1.5、常用表达式</h3><pre><code>非 : ! or &quot;not&quot; (去掉双引号)  \n且 : &amp;&amp; or &quot;and&quot;  \n或 : || or &quot;or&quot;  </code></pre>\n<ul>\n<li>抓取所有经过eth1，目的地址是192.168.1.254或192.168.1.200端口是80的TCP数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓取所有经过eth1，目标MAC地址是00:01:02:03:04:05的ICMP数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((icmp) and ((ether dst host 00:01:02:03:04:05)))&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓取所有经过eth1，目的网络是192.168，但目的主机不是192.168.1.200的TCP数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、高级包头过滤\"><a href=\"#二、高级包头过滤\" class=\"headerlink\" title=\"二、高级包头过滤\"></a>二、高级包头过滤</h2><p>首先了解如何从包头过滤信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proto[x:y]          : 过滤从x字节开始的y字节数。比如ip[2:2]过滤出3、4字节（第一字节从0开始排）</span><br><span class=\"line\">proto[x:y] &amp; z &#x3D; 0  : proto[x:y]和z的与操作为0</span><br><span class=\"line\">proto[x:y] &amp; z !&#x3D;0  : proto[x:y]和z的与操作不为0</span><br><span class=\"line\">proto[x:y] &amp; z &#x3D; z  : proto[x:y]和z的与操作为z</span><br><span class=\"line\">proto[x:y] &#x3D; z      : proto[x:y]等于z</span><br></pre></td></tr></table></figure>\n<p>操作符 : &gt;, &lt;, &gt;=, &lt;=, =, !=</p>\n<h3 id=\"2-1、IP头\"><a href=\"#2-1、IP头\" class=\"headerlink\" title=\"2.1、IP头\"></a>2.1、IP头</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version|  IHL  |Type of Service|          Total Length         |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Identification        |Flags|      Fragment Offset    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Time to Live |    Protocol   |         Header Checksum       |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                       Source Address                          |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Destination Address                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Options                    |    Padding    | &lt;-- optional</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                            DATA ...                           |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>本文只针对IPv4。</p>\n<h3 id=\"2-2、Flags\"><a href=\"#2-2、Flags\" class=\"headerlink\" title=\"2.2、Flags\"></a>2.2、Flags</h3><table>\n<thead>\n<tr>\n<th align=\"left\">TCP Flag</th>\n<th align=\"left\">tcpdump Flag</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">SYN</td>\n<td align=\"left\">S</td>\n<td align=\"left\">Syn数据包，会话建立请求。</td>\n</tr>\n<tr>\n<td align=\"left\">ACK</td>\n<td align=\"left\">A</td>\n<td align=\"left\">Ack数据包，确认发送端的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">FIN</td>\n<td align=\"left\">F</td>\n<td align=\"left\">结束标记，终止指示。</td>\n</tr>\n<tr>\n<td align=\"left\">RESET</td>\n<td align=\"left\">R</td>\n<td align=\"left\">重置，指示立即终止连接。</td>\n</tr>\n<tr>\n<td align=\"left\">PUSH</td>\n<td align=\"left\">P</td>\n<td align=\"left\">推送，立即将缓存中的数据发完。</td>\n</tr>\n<tr>\n<td align=\"left\">URGENT</td>\n<td align=\"left\">U</td>\n<td align=\"left\">紧急，优先于其他数据。</td>\n</tr>\n<tr>\n<td align=\"left\">NONE</td>\n<td align=\"left\">.</td>\n<td align=\"left\">占位符，通常用于ACK。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3、IP选项设置了吗？\"><a href=\"#2-3、IP选项设置了吗？\" class=\"headerlink\" title=\"2.3、IP选项设置了吗？\"></a>2.3、IP选项设置了吗？</h3><p>“一般”的IP头是20字节，但IP头有选项设置，不能直接从偏移21字节处读取数据。IP头有个长度字段可以知道头长度是否大于20字节。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version|  IHL  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>通常第一个字节的二进制值是：01000101，分成两个部分：</p>\n<p>0100 = 4 表示IP版本<br>0101 = 5 表示IP头32 bit的块数，5 x 32 bits = 160 bits or 20 bytes</p>\n<p>如果第一字节第二部分的值大于5，那么表示头有IP选项。</p>\n<p>下面介绍两种过滤方法（第一种方法比较操蛋，可忽略）：</p>\n<p>a. 比较第一字节的值是否大于01000101，这可以判断IPv4带IP选项的数据和IPv6的数据。</p>\n<p>01000101十进制等于69，计算方法如下（小提示：用计算器更方便）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 : 0  \\</span><br><span class=\"line\">1 : 2^6 &#x3D; 64 \\ 第一部分 (IP版本)</span><br><span class=\"line\">0 : 0   &#x2F;</span><br><span class=\"line\">0 : 0  &#x2F;</span><br><span class=\"line\">-</span><br><span class=\"line\">0 : 0  \\</span><br><span class=\"line\">1 : 2^2 &#x3D; 4  \\ 第二部分 (头长度)</span><br><span class=\"line\">0 : 0   &#x2F;</span><br><span class=\"line\">1 : 2^0 &#x3D; 1 &#x2F;</span><br></pre></td></tr></table></figure>\n<p>64 + 4 + 1 = 69</p>\n<p>如果设置了IP选项，那么第一自己是01000110（十进制70），过滤规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[0] &gt; 69&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>IPv6的数据也会匹配，看看第二种方法。</p>\n<p>b. 位操作</p>\n<p>0100 0101 : 第一字节的二进制<br>0000 1111 : 与操作<br>&lt;=========<br>0000 0101 : 结果  </p>\n<p>正确的过滤方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[0] &amp; 15 &gt; 5&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[0] &amp; 0x0f &gt; 5&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4、分片标记\"><a href=\"#2-4、分片标记\" class=\"headerlink\" title=\"2.4、分片标记\"></a>2.4、分片标记</h3><p>当发送端的MTU大于到目的路径链路上的MTU时就会被分片，这段话有点拗口，权威的请参考《TCP/IP详解》。唉，32借我的书没还，只能凑合写，大家记得看书啊。</p>\n<p>分片信息在IP头的第七和第八字节：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Flags|      Fragment Offset    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Bit 0:  保留，必须是0<br>Bit 1:  (DF) 0 = 可能分片, 1 = 不分片<br>Bit 2:  (MF) 0 = 最后的分片, 1 = 还有分片  </p>\n<p>Fragment Offset字段只有在分片的时候才使用。</p>\n<p>要抓带DF位标记的不分片的包，第七字节的值应该是：</p>\n<p>01000000 = 64</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[6] = 64&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5、抓分片包\"><a href=\"#2-5、抓分片包\" class=\"headerlink\" title=\"2.5、抓分片包\"></a>2.5、抓分片包</h3><ul>\n<li>匹配MF，分片包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[6] = 32&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>最后分片包的开始3位是0，但是有Fragment Offset字段。</p>\n<ul>\n<li>匹配分片和最后分片</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((ip[6:2] &gt; 0) and (not ip[6] = 64))&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>测试分片可以用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping -M want -s 3000 192.168.1.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-6、匹配小TTL\"><a href=\"#2-6、匹配小TTL\" class=\"headerlink\" title=\"2.6、匹配小TTL\"></a>2.6、匹配小TTL</h3><p>TTL字段在第九字节，并且正好是完整的一个字节，TTL最大值是255，二进制为11111111。</p>\n<p>可以用下面的命令验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ping -M want -s 3000 -t 256 192.168.1.200</span><br><span class=\"line\">ping: ttl 256 out of range</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Time to Live |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在网关可以用下面的命令看看网络中谁在使用traceroute</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[8] &lt; 5&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-7、抓大于X字节的包\"><a href=\"#2-7、抓大于X字节的包\" class=\"headerlink\" title=\"2.7、抓大于X字节的包\"></a>2.7、抓大于X字节的包</h3><ul>\n<li>大于600字节</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[2:2] &gt; 600&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-8、更多的IP过滤\"><a href=\"#2-8、更多的IP过滤\" class=\"headerlink\" title=\"2.8、更多的IP过滤\"></a>2.8、更多的IP过滤</h3><p>首先还是需要知道TCP基本结构，再次推荐《TCP/IP详解》，卷一就够看的了，避免走火入魔。</p>\n<ul>\n<li>TCP头</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|          Source Port          |       Destination Port        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                        Sequence Number                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Acknowledgment Number                      |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Data |       |C|E|U|A|P|R|S|F|                               |</span><br><span class=\"line\">| Offset|  Res. |W|C|R|C|S|S|Y|I|            Window             |</span><br><span class=\"line\">|       |       |R|E|G|K|H|T|N|N|                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|           Checksum            |         Urgent Pointer        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Options                    |    Padding    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                             data                              |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓取源端口大于1024的TCP数据包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[0:2] &gt; 1024&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配TCP数据包的特殊标记</li>\n</ul>\n<p>TCP标记定义在TCP头的第十四个字节</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|C|E|U|A|P|R|S|F|</span><br><span class=\"line\">|W|C|R|C|S|S|Y|I|</span><br><span class=\"line\">|R|E|G|K|H|T|N|N|</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>重复一下TCP三次握手，两个主机是如何勾搭的：</p>\n<ol>\n<li>源发送SYN</li>\n<li>目标回答SYN, ACK</li>\n<li>源发送ACK</li>\n</ol>\n<p>没女朋友的童鞋要学习一下：  </p>\n<ol>\n<li>MM，你的手有空吗？-_-  </li>\n<li>有空，你呢？~_~  </li>\n<li>我也有空 *_*  </li>\n</ol>\n<p>失败的loser是酱紫的：  </p>\n<ol>\n<li>MM，这是你掉的板砖吗？(SYN) ￣▽￣  </li>\n<li>不是，找拍啊？(RST-ACK) ˋ﹏ˊ  </li>\n</ol>\n<ul>\n<li>只抓SYN包，第十四字节是二进制的00000010，也就是十进制的2</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] = 2&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓SYN, ACK （00010010 or 18）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] = 18&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓SYN或者SYN-ACK</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] &amp; 2 = 2&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>用到了位操作，就是不管ACK位是啥。</p>\n<ul>\n<li>抓PSH-ACK</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] = 24&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓所有包含FIN标记的包（FIN通常和ACK一起，表示幽会完了，回见）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] &amp; 1 = 1&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓RST（勾搭没成功，伟大的greatwall对她认为有敏感信息的连接发RST包，典型的棒打鸳鸯）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] &amp; 4 = 4&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>下图详细描述了TCP各种状态的标记，方便分析。</p>\n<p><img src=\"https://raw.githubusercontent.com/linuxwiki/SourceWiki/master/images/tcp_state_machine.jpg\" alt=\"tcp_state_machine.jpg\"></p>\n<h3 id=\"2-9、大叔注\"><a href=\"#2-9、大叔注\" class=\"headerlink\" title=\"2.9、大叔注\"></a>2.9、大叔注</h3><p>tcpdump考虑了一些数字恐惧症者的需求，提供了部分常用的字段偏移名字：</p>\n<p>icmptype  (ICMP类型字段)<br>icmpcode  (ICMP符号字段)<br>tcpflags  (TCP标记字段)  </p>\n<p>ICMP类型值有：</p>\n<p>icmp-echoreply, icmp-unreach, icmp-sourcequench, icmp-redirect, icmp-echo, icmp-routeradvert, icmp-routersolicit, icmp-timxceed, icmp-paramprob, icmp-tstamp, icmp-tstampreply, icmp-ireq, icmp-ireqreply, icmp-maskreq, icmp-maskreply</p>\n<p>TCP标记值：</p>\n<p>tcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-push, tcp-ack, tcp-urg</p>\n<p>这样上面按照TCP标记位抓包的就可以写直观的表达式了：</p>\n<ul>\n<li>只抓SYN包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[tcpflags] = tcp-syn&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓SYN, ACK</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-10、抓SMTP数据\"><a href=\"#2-10、抓SMTP数据\" class=\"headerlink\" title=\"2.10、抓SMTP数据\"></a>2.10、抓SMTP数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((port 25) and (tcp[(tcp[12]&gt;&gt;2):4] = 0x4d41494c))&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>抓取数据区开始为”MAIL”的包，”MAIL”的十六进制为0x4d41494c。</p>\n<h3 id=\"2-11、抓HTTP-GET数据\"><a href=\"#2-11、抓HTTP-GET数据\" class=\"headerlink\" title=\"2.11、抓HTTP GET数据\"></a>2.11、抓HTTP GET数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x47455420&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>“GET “的十六进制是47455420</p>\n<h3 id=\"2-12、抓SSH返回\"><a href=\"#2-12、抓SSH返回\" class=\"headerlink\" title=\"2.12、抓SSH返回\"></a>2.12、抓SSH返回</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>“SSH-“的十六进制是0x5353482D</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;(tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D) and (tcp[((tcp[12]&gt;&gt;2)+4):2] = 0x312E)&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>抓老版本的SSH返回信息，如”SSH-1.99..”</p>\n<h2 id=\"三、大叔注\"><a href=\"#三、大叔注\" class=\"headerlink\" title=\"三、大叔注\"></a>三、大叔注</h2><p>如果是为了查看数据内容，建议用<code>tcpdump -s 0 -w filename</code>把数据包都保存下来，然后用wireshark的Follow TCP Stream/Follow UDP Stream来查看整个会话的内容。</p>\n<p><code>-s 0</code>是抓取完整数据包，否则默认只抓68字节。</p>\n<p>另外，用tcpflow也可以方便的获取TCP会话内容，支持tcpdump的各种表达式。</p>\n<h3 id=\"3-1、UDP头\"><a href=\"#3-1、UDP头\" class=\"headerlink\" title=\"3.1、UDP头\"></a>3.1、UDP头</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0      7 8     15 16    23 24    31</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|     Source      |   Destination   |</span><br><span class=\"line\">|      Port       |      Port       |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|                 |                 |</span><br><span class=\"line\">|     Length      |    Checksum     |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">|              DATA ...             |</span><br><span class=\"line\">+-----------------------------------+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓DNS请求数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 udp dst port 53</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2、其他\"><a href=\"#3-2、其他\" class=\"headerlink\" title=\"3.2、其他\"></a>3.2、其他</h3><p><code>-c</code>参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用<code>-c</code>参数指定抓多少个包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time tcpdump -nn -i eth0 <span class=\"string\">&#x27;tcp[tcpflags] = tcp-syn&#x27;</span> -c 10000 &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<p>上面的命令计算抓10000个SYN包花费多少时间，可以判断访问量大概是多少。</p>\n<h2 id=\"四、参考资料\"><a href=\"#四、参考资料\" class=\"headerlink\" title=\"四、参考资料\"></a>四、参考资料</h2><blockquote>\n<p><a class=\"link\"   href=\"http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt\" >tcpdump advanced filters<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>一般情况下，非HTTP协议的网络分析，在服务器端用<code>tcpdump</code>比较多，在客户端用wireshark比较多，两个抓包软件的语法是一样的。</p>\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><h3 id=\"1-1、过滤主机\"><a href=\"#1-1、过滤主机\" class=\"headerlink\" title=\"1.1、过滤主机\"></a>1.1、过滤主机</h3><ul>\n<li>抓取所有经过eth1，目的或源地址是192.168.1.1的网络数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 host 192.168.1.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定源地址</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 src host 192.168.1.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定目的地址</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 dst host 192.168.1.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2、过滤端口\"><a href=\"#1-2、过滤端口\" class=\"headerlink\" title=\"1.2、过滤端口\"></a>1.2、过滤端口</h3><ul>\n<li>抓取所有经过eth1，目的或源端口是25的网络数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 port 25</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定源端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 src port 25</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定目的端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 dst port 25</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3、网络过滤\"><a href=\"#1-3、网络过滤\" class=\"headerlink\" title=\"1.3、网络过滤\"></a>1.3、网络过滤</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 net 192.168</span><br><span class=\"line\">tcpdump -i eth1 src net 192.168</span><br><span class=\"line\">tcpdump -i eth1 dst net 192.168</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4、协议过滤\"><a href=\"#1-4、协议过滤\" class=\"headerlink\" title=\"1.4、协议过滤\"></a>1.4、协议过滤</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 arp</span><br><span class=\"line\">tcpdump -i eth1 ip</span><br><span class=\"line\">tcpdump -i eth1 tcp</span><br><span class=\"line\">tcpdump -i eth1 udp</span><br><span class=\"line\">tcpdump -i eth1 icmp</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5、常用表达式\"><a href=\"#1-5、常用表达式\" class=\"headerlink\" title=\"1.5、常用表达式\"></a>1.5、常用表达式</h3><pre><code>非 : ! or &quot;not&quot; (去掉双引号)  \n且 : &amp;&amp; or &quot;and&quot;  \n或 : || or &quot;or&quot;  </code></pre>\n<ul>\n<li>抓取所有经过eth1，目的地址是192.168.1.254或192.168.1.200端口是80的TCP数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓取所有经过eth1，目标MAC地址是00:01:02:03:04:05的ICMP数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((icmp) and ((ether dst host 00:01:02:03:04:05)))&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓取所有经过eth1，目的网络是192.168，但目的主机不是192.168.1.200的TCP数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、高级包头过滤\"><a href=\"#二、高级包头过滤\" class=\"headerlink\" title=\"二、高级包头过滤\"></a>二、高级包头过滤</h2><p>首先了解如何从包头过滤信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proto[x:y]          : 过滤从x字节开始的y字节数。比如ip[2:2]过滤出3、4字节（第一字节从0开始排）</span><br><span class=\"line\">proto[x:y] &amp; z &#x3D; 0  : proto[x:y]和z的与操作为0</span><br><span class=\"line\">proto[x:y] &amp; z !&#x3D;0  : proto[x:y]和z的与操作不为0</span><br><span class=\"line\">proto[x:y] &amp; z &#x3D; z  : proto[x:y]和z的与操作为z</span><br><span class=\"line\">proto[x:y] &#x3D; z      : proto[x:y]等于z</span><br></pre></td></tr></table></figure>\n<p>操作符 : &gt;, &lt;, &gt;=, &lt;=, =, !=</p>\n<h3 id=\"2-1、IP头\"><a href=\"#2-1、IP头\" class=\"headerlink\" title=\"2.1、IP头\"></a>2.1、IP头</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version|  IHL  |Type of Service|          Total Length         |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Identification        |Flags|      Fragment Offset    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Time to Live |    Protocol   |         Header Checksum       |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                       Source Address                          |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Destination Address                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Options                    |    Padding    | &lt;-- optional</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                            DATA ...                           |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>本文只针对IPv4。</p>\n<h3 id=\"2-2、Flags\"><a href=\"#2-2、Flags\" class=\"headerlink\" title=\"2.2、Flags\"></a>2.2、Flags</h3><table>\n<thead>\n<tr>\n<th align=\"left\">TCP Flag</th>\n<th align=\"left\">tcpdump Flag</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">SYN</td>\n<td align=\"left\">S</td>\n<td align=\"left\">Syn数据包，会话建立请求。</td>\n</tr>\n<tr>\n<td align=\"left\">ACK</td>\n<td align=\"left\">A</td>\n<td align=\"left\">Ack数据包，确认发送端的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">FIN</td>\n<td align=\"left\">F</td>\n<td align=\"left\">结束标记，终止指示。</td>\n</tr>\n<tr>\n<td align=\"left\">RESET</td>\n<td align=\"left\">R</td>\n<td align=\"left\">重置，指示立即终止连接。</td>\n</tr>\n<tr>\n<td align=\"left\">PUSH</td>\n<td align=\"left\">P</td>\n<td align=\"left\">推送，立即将缓存中的数据发完。</td>\n</tr>\n<tr>\n<td align=\"left\">URGENT</td>\n<td align=\"left\">U</td>\n<td align=\"left\">紧急，优先于其他数据。</td>\n</tr>\n<tr>\n<td align=\"left\">NONE</td>\n<td align=\"left\">.</td>\n<td align=\"left\">占位符，通常用于ACK。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3、IP选项设置了吗？\"><a href=\"#2-3、IP选项设置了吗？\" class=\"headerlink\" title=\"2.3、IP选项设置了吗？\"></a>2.3、IP选项设置了吗？</h3><p>“一般”的IP头是20字节，但IP头有选项设置，不能直接从偏移21字节处读取数据。IP头有个长度字段可以知道头长度是否大于20字节。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version|  IHL  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>通常第一个字节的二进制值是：01000101，分成两个部分：</p>\n<p>0100 = 4 表示IP版本<br>0101 = 5 表示IP头32 bit的块数，5 x 32 bits = 160 bits or 20 bytes</p>\n<p>如果第一字节第二部分的值大于5，那么表示头有IP选项。</p>\n<p>下面介绍两种过滤方法（第一种方法比较操蛋，可忽略）：</p>\n<p>a. 比较第一字节的值是否大于01000101，这可以判断IPv4带IP选项的数据和IPv6的数据。</p>\n<p>01000101十进制等于69，计算方法如下（小提示：用计算器更方便）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 : 0  \\</span><br><span class=\"line\">1 : 2^6 &#x3D; 64 \\ 第一部分 (IP版本)</span><br><span class=\"line\">0 : 0   &#x2F;</span><br><span class=\"line\">0 : 0  &#x2F;</span><br><span class=\"line\">-</span><br><span class=\"line\">0 : 0  \\</span><br><span class=\"line\">1 : 2^2 &#x3D; 4  \\ 第二部分 (头长度)</span><br><span class=\"line\">0 : 0   &#x2F;</span><br><span class=\"line\">1 : 2^0 &#x3D; 1 &#x2F;</span><br></pre></td></tr></table></figure>\n<p>64 + 4 + 1 = 69</p>\n<p>如果设置了IP选项，那么第一自己是01000110（十进制70），过滤规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[0] &gt; 69&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>IPv6的数据也会匹配，看看第二种方法。</p>\n<p>b. 位操作</p>\n<p>0100 0101 : 第一字节的二进制<br>0000 1111 : 与操作<br>&lt;=========<br>0000 0101 : 结果  </p>\n<p>正确的过滤方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[0] &amp; 15 &gt; 5&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[0] &amp; 0x0f &gt; 5&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4、分片标记\"><a href=\"#2-4、分片标记\" class=\"headerlink\" title=\"2.4、分片标记\"></a>2.4、分片标记</h3><p>当发送端的MTU大于到目的路径链路上的MTU时就会被分片，这段话有点拗口，权威的请参考《TCP/IP详解》。唉，32借我的书没还，只能凑合写，大家记得看书啊。</p>\n<p>分片信息在IP头的第七和第八字节：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Flags|      Fragment Offset    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Bit 0:  保留，必须是0<br>Bit 1:  (DF) 0 = 可能分片, 1 = 不分片<br>Bit 2:  (MF) 0 = 最后的分片, 1 = 还有分片  </p>\n<p>Fragment Offset字段只有在分片的时候才使用。</p>\n<p>要抓带DF位标记的不分片的包，第七字节的值应该是：</p>\n<p>01000000 = 64</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[6] = 64&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5、抓分片包\"><a href=\"#2-5、抓分片包\" class=\"headerlink\" title=\"2.5、抓分片包\"></a>2.5、抓分片包</h3><ul>\n<li>匹配MF，分片包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[6] = 32&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>最后分片包的开始3位是0，但是有Fragment Offset字段。</p>\n<ul>\n<li>匹配分片和最后分片</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((ip[6:2] &gt; 0) and (not ip[6] = 64))&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>测试分片可以用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping -M want -s 3000 192.168.1.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-6、匹配小TTL\"><a href=\"#2-6、匹配小TTL\" class=\"headerlink\" title=\"2.6、匹配小TTL\"></a>2.6、匹配小TTL</h3><p>TTL字段在第九字节，并且正好是完整的一个字节，TTL最大值是255，二进制为11111111。</p>\n<p>可以用下面的命令验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ping -M want -s 3000 -t 256 192.168.1.200</span><br><span class=\"line\">ping: ttl 256 out of range</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Time to Live |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在网关可以用下面的命令看看网络中谁在使用traceroute</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[8] &lt; 5&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-7、抓大于X字节的包\"><a href=\"#2-7、抓大于X字节的包\" class=\"headerlink\" title=\"2.7、抓大于X字节的包\"></a>2.7、抓大于X字节的包</h3><ul>\n<li>大于600字节</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;ip[2:2] &gt; 600&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-8、更多的IP过滤\"><a href=\"#2-8、更多的IP过滤\" class=\"headerlink\" title=\"2.8、更多的IP过滤\"></a>2.8、更多的IP过滤</h3><p>首先还是需要知道TCP基本结构，再次推荐《TCP/IP详解》，卷一就够看的了，避免走火入魔。</p>\n<ul>\n<li>TCP头</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|          Source Port          |       Destination Port        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                        Sequence Number                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Acknowledgment Number                      |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Data |       |C|E|U|A|P|R|S|F|                               |</span><br><span class=\"line\">| Offset|  Res. |W|C|R|C|S|S|Y|I|            Window             |</span><br><span class=\"line\">|       |       |R|E|G|K|H|T|N|N|                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|           Checksum            |         Urgent Pointer        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Options                    |    Padding    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                             data                              |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓取源端口大于1024的TCP数据包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[0:2] &gt; 1024&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配TCP数据包的特殊标记</li>\n</ul>\n<p>TCP标记定义在TCP头的第十四个字节</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|C|E|U|A|P|R|S|F|</span><br><span class=\"line\">|W|C|R|C|S|S|Y|I|</span><br><span class=\"line\">|R|E|G|K|H|T|N|N|</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>重复一下TCP三次握手，两个主机是如何勾搭的：</p>\n<ol>\n<li>源发送SYN</li>\n<li>目标回答SYN, ACK</li>\n<li>源发送ACK</li>\n</ol>\n<p>没女朋友的童鞋要学习一下：  </p>\n<ol>\n<li>MM，你的手有空吗？-_-  </li>\n<li>有空，你呢？~_~  </li>\n<li>我也有空 *_*  </li>\n</ol>\n<p>失败的loser是酱紫的：  </p>\n<ol>\n<li>MM，这是你掉的板砖吗？(SYN) ￣▽￣  </li>\n<li>不是，找拍啊？(RST-ACK) ˋ﹏ˊ  </li>\n</ol>\n<ul>\n<li>只抓SYN包，第十四字节是二进制的00000010，也就是十进制的2</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] = 2&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓SYN, ACK （00010010 or 18）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] = 18&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓SYN或者SYN-ACK</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] &amp; 2 = 2&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>用到了位操作，就是不管ACK位是啥。</p>\n<ul>\n<li>抓PSH-ACK</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] = 24&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓所有包含FIN标记的包（FIN通常和ACK一起，表示幽会完了，回见）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] &amp; 1 = 1&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓RST（勾搭没成功，伟大的greatwall对她认为有敏感信息的连接发RST包，典型的棒打鸳鸯）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[13] &amp; 4 = 4&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>下图详细描述了TCP各种状态的标记，方便分析。</p>\n<p><img src=\"https://raw.githubusercontent.com/linuxwiki/SourceWiki/master/images/tcp_state_machine.jpg\" alt=\"tcp_state_machine.jpg\"></p>\n<h3 id=\"2-9、大叔注\"><a href=\"#2-9、大叔注\" class=\"headerlink\" title=\"2.9、大叔注\"></a>2.9、大叔注</h3><p>tcpdump考虑了一些数字恐惧症者的需求，提供了部分常用的字段偏移名字：</p>\n<p>icmptype  (ICMP类型字段)<br>icmpcode  (ICMP符号字段)<br>tcpflags  (TCP标记字段)  </p>\n<p>ICMP类型值有：</p>\n<p>icmp-echoreply, icmp-unreach, icmp-sourcequench, icmp-redirect, icmp-echo, icmp-routeradvert, icmp-routersolicit, icmp-timxceed, icmp-paramprob, icmp-tstamp, icmp-tstampreply, icmp-ireq, icmp-ireqreply, icmp-maskreq, icmp-maskreply</p>\n<p>TCP标记值：</p>\n<p>tcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-push, tcp-ack, tcp-urg</p>\n<p>这样上面按照TCP标记位抓包的就可以写直观的表达式了：</p>\n<ul>\n<li>只抓SYN包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[tcpflags] = tcp-syn&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓SYN, ACK</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-10、抓SMTP数据\"><a href=\"#2-10、抓SMTP数据\" class=\"headerlink\" title=\"2.10、抓SMTP数据\"></a>2.10、抓SMTP数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;((port 25) and (tcp[(tcp[12]&gt;&gt;2):4] = 0x4d41494c))&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>抓取数据区开始为”MAIL”的包，”MAIL”的十六进制为0x4d41494c。</p>\n<h3 id=\"2-11、抓HTTP-GET数据\"><a href=\"#2-11、抓HTTP-GET数据\" class=\"headerlink\" title=\"2.11、抓HTTP GET数据\"></a>2.11、抓HTTP GET数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x47455420&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>“GET “的十六进制是47455420</p>\n<h3 id=\"2-12、抓SSH返回\"><a href=\"#2-12、抓SSH返回\" class=\"headerlink\" title=\"2.12、抓SSH返回\"></a>2.12、抓SSH返回</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>“SSH-“的十六进制是0x5353482D</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 <span class=\"string\">&#x27;(tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D) and (tcp[((tcp[12]&gt;&gt;2)+4):2] = 0x312E)&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>抓老版本的SSH返回信息，如”SSH-1.99..”</p>\n<h2 id=\"三、大叔注\"><a href=\"#三、大叔注\" class=\"headerlink\" title=\"三、大叔注\"></a>三、大叔注</h2><p>如果是为了查看数据内容，建议用<code>tcpdump -s 0 -w filename</code>把数据包都保存下来，然后用wireshark的Follow TCP Stream/Follow UDP Stream来查看整个会话的内容。</p>\n<p><code>-s 0</code>是抓取完整数据包，否则默认只抓68字节。</p>\n<p>另外，用tcpflow也可以方便的获取TCP会话内容，支持tcpdump的各种表达式。</p>\n<h3 id=\"3-1、UDP头\"><a href=\"#3-1、UDP头\" class=\"headerlink\" title=\"3.1、UDP头\"></a>3.1、UDP头</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0      7 8     15 16    23 24    31</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|     Source      |   Destination   |</span><br><span class=\"line\">|      Port       |      Port       |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|                 |                 |</span><br><span class=\"line\">|     Length      |    Checksum     |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">|              DATA ...             |</span><br><span class=\"line\">+-----------------------------------+</span><br></pre></td></tr></table></figure>\n<ul>\n<li>抓DNS请求数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 udp dst port 53</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2、其他\"><a href=\"#3-2、其他\" class=\"headerlink\" title=\"3.2、其他\"></a>3.2、其他</h3><p><code>-c</code>参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用<code>-c</code>参数指定抓多少个包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time tcpdump -nn -i eth0 <span class=\"string\">&#x27;tcp[tcpflags] = tcp-syn&#x27;</span> -c 10000 &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<p>上面的命令计算抓10000个SYN包花费多少时间，可以判断访问量大概是多少。</p>\n<h2 id=\"四、参考资料\"><a href=\"#四、参考资料\" class=\"headerlink\" title=\"四、参考资料\"></a>四、参考资料</h2><blockquote>\n<p><a class=\"link\"   href=\"http://www.wains.be/pub/networking/tcpdump_advanced_filters.txt\" >tcpdump advanced filters<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"腾讯与华为到低谁更赚钱","date":"2019-07-30T14:38:26.000Z","_content":"\n今天华为发布2019年上半年业绩，收入同比增长23.2%！那么华为今年上半年卖了多少钱呢？\n\n**4013亿人民币/6个月**\n\n腾讯2019年5月15日公布的一季度财报显示，腾讯卖了854.65亿。二季度还没出来，且简单做x2推算吧。\n\n**1708亿人民币/6个月**\n\n腾讯一软件服务公司，收钱的能力连卖货的华为一半都不到。不过得深挖一下。\n\n``` mermaid\npie title 营收\n  \"华为\" : 4013\n  \"腾讯\" : 1708\n```\n\n\n## 华为\n\n> \\[中国，深圳，2019年7月30日] 2019年上半年，华为实现销售收入4013亿人民币，\n同比增长23.2%，<u>净利润率8.7%</u>。[源自：官方新闻](https://www.huawei.com/cn/press-events/news/2019/7/huawei-announces-h1-2019-revenue)\n\n华为净利润：4013 x 0.087 / 6 = __58.1亿/月__\n\n## 腾讯\n\n> 期内盈利为人民币 278.56 亿元（41.37 亿美元），比去年同期增长 16%；<u>净利润率与去年同期持平，为\n  33%</u>。[源自：官方财报](http://www.tencent.com/zh-cn/articles/15000771557911821.pdf)\n\n腾讯净利润：854.65 x 0.33 / 3 = __94亿/月__\n\n``` mermaid\npie title 净利润\n  \"华为\" : 58.1\n  \"腾讯\" : 94\n```\n\n### 还是搞软件服务更赚钱啊！～～～\n","source":"_posts/tencent-vs-huwwei-2019.md","raw":"---\ntitle: 腾讯与华为到低谁更赚钱\ndate: 2019-07-30 22:38:26\ntags: [财报解读]\n---\n\n今天华为发布2019年上半年业绩，收入同比增长23.2%！那么华为今年上半年卖了多少钱呢？\n\n**4013亿人民币/6个月**\n\n腾讯2019年5月15日公布的一季度财报显示，腾讯卖了854.65亿。二季度还没出来，且简单做x2推算吧。\n\n**1708亿人民币/6个月**\n\n腾讯一软件服务公司，收钱的能力连卖货的华为一半都不到。不过得深挖一下。\n\n``` mermaid\npie title 营收\n  \"华为\" : 4013\n  \"腾讯\" : 1708\n```\n\n\n## 华为\n\n> \\[中国，深圳，2019年7月30日] 2019年上半年，华为实现销售收入4013亿人民币，\n同比增长23.2%，<u>净利润率8.7%</u>。[源自：官方新闻](https://www.huawei.com/cn/press-events/news/2019/7/huawei-announces-h1-2019-revenue)\n\n华为净利润：4013 x 0.087 / 6 = __58.1亿/月__\n\n## 腾讯\n\n> 期内盈利为人民币 278.56 亿元（41.37 亿美元），比去年同期增长 16%；<u>净利润率与去年同期持平，为\n  33%</u>。[源自：官方财报](http://www.tencent.com/zh-cn/articles/15000771557911821.pdf)\n\n腾讯净利润：854.65 x 0.33 / 3 = __94亿/月__\n\n``` mermaid\npie title 净利润\n  \"华为\" : 58.1\n  \"腾讯\" : 94\n```\n\n### 还是搞软件服务更赚钱啊！～～～\n","slug":"tencent-vs-huwwei-2019","published":1,"updated":"2021-02-17T04:29:36.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s700292aahayzm6con","content":"<p>今天华为发布2019年上半年业绩，收入同比增长23.2%！那么华为今年上半年卖了多少钱呢？</p>\n<p><strong>4013亿人民币/6个月</strong></p>\n<p>腾讯2019年5月15日公布的一季度财报显示，腾讯卖了854.65亿。二季度还没出来，且简单做x2推算吧。</p>\n<p><strong>1708亿人民币/6个月</strong></p>\n<p>腾讯一软件服务公司，收钱的能力连卖货的华为一半都不到。不过得深挖一下。</p>\n<pre class=\"mermaid\">pie title 营收\n  \"华为\" : 4013\n  \"腾讯\" : 1708</pre>\n\n\n<h2 id=\"华为\"><a href=\"#华为\" class=\"headerlink\" title=\"华为\"></a>华为</h2><blockquote>\n<p>[中国，深圳，2019年7月30日] 2019年上半年，华为实现销售收入4013亿人民币，<br>同比增长23.2%，<u>净利润率8.7%</u>。<a class=\"link\"   href=\"https://www.huawei.com/cn/press-events/news/2019/7/huawei-announces-h1-2019-revenue\" >源自：官方新闻<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>华为净利润：4013 x 0.087 / 6 = <strong>58.1亿/月</strong></p>\n<h2 id=\"腾讯\"><a href=\"#腾讯\" class=\"headerlink\" title=\"腾讯\"></a>腾讯</h2><blockquote>\n<p>期内盈利为人民币 278.56 亿元（41.37 亿美元），比去年同期增长 16%；<u>净利润率与去年同期持平，为<br>  33%</u>。<a class=\"link\"   href=\"http://www.tencent.com/zh-cn/articles/15000771557911821.pdf\" >源自：官方财报<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>腾讯净利润：854.65 x 0.33 / 3 = <strong>94亿/月</strong></p>\n<pre class=\"mermaid\">pie title 净利润\n  \"华为\" : 58.1\n  \"腾讯\" : 94</pre>\n\n<h3 id=\"还是搞软件服务更赚钱啊！～～～\"><a href=\"#还是搞软件服务更赚钱啊！～～～\" class=\"headerlink\" title=\"还是搞软件服务更赚钱啊！～～～\"></a>还是搞软件服务更赚钱啊！～～～</h3>","site":{"data":{}},"excerpt":"","more":"<p>今天华为发布2019年上半年业绩，收入同比增长23.2%！那么华为今年上半年卖了多少钱呢？</p>\n<p><strong>4013亿人民币/6个月</strong></p>\n<p>腾讯2019年5月15日公布的一季度财报显示，腾讯卖了854.65亿。二季度还没出来，且简单做x2推算吧。</p>\n<p><strong>1708亿人民币/6个月</strong></p>\n<p>腾讯一软件服务公司，收钱的能力连卖货的华为一半都不到。不过得深挖一下。</p>\n<pre class=\"mermaid\">pie title 营收\n  \"华为\" : 4013\n  \"腾讯\" : 1708</pre>\n\n\n<h2 id=\"华为\"><a href=\"#华为\" class=\"headerlink\" title=\"华为\"></a>华为</h2><blockquote>\n<p>[中国，深圳，2019年7月30日] 2019年上半年，华为实现销售收入4013亿人民币，<br>同比增长23.2%，<u>净利润率8.7%</u>。<a class=\"link\"   href=\"https://www.huawei.com/cn/press-events/news/2019/7/huawei-announces-h1-2019-revenue\" >源自：官方新闻<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>华为净利润：4013 x 0.087 / 6 = <strong>58.1亿/月</strong></p>\n<h2 id=\"腾讯\"><a href=\"#腾讯\" class=\"headerlink\" title=\"腾讯\"></a>腾讯</h2><blockquote>\n<p>期内盈利为人民币 278.56 亿元（41.37 亿美元），比去年同期增长 16%；<u>净利润率与去年同期持平，为<br>  33%</u>。<a class=\"link\"   href=\"http://www.tencent.com/zh-cn/articles/15000771557911821.pdf\" >源自：官方财报<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>腾讯净利润：854.65 x 0.33 / 3 = <strong>94亿/月</strong></p>\n<pre class=\"mermaid\">pie title 净利润\n  \"华为\" : 58.1\n  \"腾讯\" : 94</pre>\n\n<h3 id=\"还是搞软件服务更赚钱啊！～～～\"><a href=\"#还是搞软件服务更赚钱啊！～～～\" class=\"headerlink\" title=\"还是搞软件服务更赚钱啊！～～～\"></a>还是搞软件服务更赚钱啊！～～～</h3>"},{"title":"truss lsof strace ltrace 让你知道系统运行中的进程正在干什么","date":"2017-06-12T08:32:11.000Z","_content":"#truss\n这个命令一般UNIX平台自带。使用举例：\n```text\n[bluse@ybcz ~/vhosts/bluse]$ sudo truss -p48932\nclock_gettime(4,{334689.597960013 })\t\t = 0 (0x0)\nclock_gettime(4,{334689.598165067 })\t\t = 0 (0x0)\nclock_gettime(4,{334689.598310337 })\t\t = 0 (0x0)\ngettimeofday({1480832080.977889 },0x0)\t\t = 0 (0x0)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,54) = 54 (0x36)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,52) = 52 (0x34)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,56) = 56 (0x38)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,55) = 55 (0x37)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,50) = 50 (0x32)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,55) = 55 (0x37)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,54) = 54 (0x36)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,47) = 47 (0x2f)\nclock_gettime(4,{334689.600967100 })\t\t = 0 (0x0)\ngettimeofday({1480832080.980523 },0x0)\t\t = 0 (0x0)\ngettimeofday({1480832080.980791 },0x0)\t\t = 0 (0x0)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,52) = 52 (0x34)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,50) = 50 (0x32)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,49) = 49 (0x31)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,46) = 46 (0x2e)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,45) = 45 (0x2d)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,49) = 49 (0x31)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,46) = 46 (0x2e)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,46) = 46 (0x2e)\n\n```\n这是实时查看。也可以：\n```text\ntruss -p 48932 -o out.truss\n```\n把结果输出至文件中。捕获一断时间后再细分析。\n\n这个命令能让你很方便地看清异常位置。如：死循环、某些未写入日志的异常等。\n\n很适合用来解决CPU占用过高、难定位的异常、难重现的异常等 。\n\n#lsof\n这个linux/unix都好使。它有两个方面好使。\n\n- 按端口查连接\n```text\nbluse@bluse-Inspiron-1427:~/www/vhost$ lsof -i:80\nCOMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\ncairo-doc 3059 bluse   24u  IPv4  95707      0t0  TCP 192.168.1.102:40728->ec2-35-162-44-96.us-west-2.compute.amazonaws.com:http (ESTABLISHED)\nxmradio   3425 bluse   13u  IPv4  96506      0t0  TCP 192.168.1.102:48640->202.108.249.250:http (ESTABLISHED)\nxmradio   3425 bluse   14u  IPv4  90643      0t0  TCP 192.168.1.102:57590->140.205.220.98:http (CLOSE_WAIT)\ngvfsd-htt 3450 bluse   10u  IPv4  95783      0t0  TCP 192.168.1.102:55522->123.125.7.240:http (ESTABLISHED)\nchrome    3967 bluse  162u  IPv4  95526      0t0  TCP 192.168.1.102:58632->128.199.228.91:http (ESTABLISHED)\nchrome    3967 bluse  202u  IPv4  95527      0t0  TCP 192.168.1.102:58634->128.199.228.91:http (ESTABLISHED)\nchrome    3967 bluse  228u  IPv4  91831      0t0  TCP 192.168.1.102:58714->151.101.52.249:http (ESTABLISHED)\n```\n- 按进程PID查文件调用\n```text\nbluse@bluse-Inspiron-1427:~/www/vhost$ lsof -p 3425\nCOMMAND  PID  USER   FD      TYPE             DEVICE SIZE/OFF     NODE NAME\nxmradio 3425 bluse  cwd       DIR                8,1     4096   262146 /home/bluse\nxmradio 3425 bluse  rtd       DIR                8,1     4096        2 /\nxmradio 3425 bluse  txt       REG                8,1    14664 21375342 /usr/bin/xmradio\nxmradio 3425 bluse  mem       REG               0,19 67108904       15 /dev/shm/pulse-shm-1137957205\nxmradio 3425 bluse  mem       REG                8,1    10256 21435409 /usr/lib/vlc/plugins/audio_filter/libtrivial_channel_mixer_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    34920 21435412 /usr/lib/vlc/plugins/audio_filter/libaudio_format_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    10272 21435429 /usr/lib/vlc/plugins/audio_filter/libugly_resampler_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    10280 21435410 /usr/lib/vlc/plugins/audio_filter/libdolby_surround_decoder_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    10320 21435419 /usr/lib/vlc/plugins/audio_filter/libdtstospdif_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    18472 21435431 /usr/lib/vlc/plugins/audio_filter/libsimple_channel_mixer_plugin.so\nxmradio 3425 bluse  mem       REG                8,1     6176 21435428 /usr/lib/vlc/plugins/audio_filter/liba52tospdif_plugin.so\nxmradio 3425 bluse  mem       REG               0,19 67108904        7 /dev/shm/pulse-shm-3282743321\nxmradio 3425 bluse  mem       REG                8,1  4343844 22414964 /usr/share/fonts/truetype/nanum/NanumGothic.ttf\n```\n#strace\n它的用法也差不多：\n```text\nstrace -f -o vim.strace vim： 跟踪vim及其子进程的运行，将输出信息写到文件vim.strace。\n```\n进程调试\n```text\nbluse@bluse-Inspiron-1427:~/www/vhost$ sudo strace -o out.strace lsof -p 3425\nbluse@bluse-Inspiron-1427:~/www/vhost$ head -10 out.strace \nexecve(\"/usr/bin/lsof\", [\"lsof\", \"-p\", \"3425\"], [/* 26 vars */]) = 0\nbrk(NULL)                               = 0x562c9956b000\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f29b0751000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=188234, ...}) = 0\nmmap(NULL, 188234, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f29b0723000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\n\n```\n##htop 中使用 strace\nhtop中内置了strace\n\n进入`htop`后按上下方向键选择进程，在需要调试的进程上按`s`就能进入 它的strace。`F8`是自动翻页开关！\n\n#ltrace\n```text\nsudo ltrace -p 3425\n--- UNKNOWN_SIGNAL (Unknown signal 32) ---\n+++ exited (status 0) +++\n+++ exited (status 0) +++\n+++ exited (status 0) +++\n--- SIGCHLD (Child exited) ---\n```\n\n作为系统管理，以上这些用法基本能满足日常所需。更多深度功能得找各自的`man`\n","source":"_posts/truss-lsof-strace-ltrace.md","raw":"---\ntitle: truss lsof strace ltrace 让你知道系统运行中的进程正在干什么\ndate: 2017-06-12 16:32:11\ntags: [FreeBSD, 运维, 性能]\n---\n#truss\n这个命令一般UNIX平台自带。使用举例：\n```text\n[bluse@ybcz ~/vhosts/bluse]$ sudo truss -p48932\nclock_gettime(4,{334689.597960013 })\t\t = 0 (0x0)\nclock_gettime(4,{334689.598165067 })\t\t = 0 (0x0)\nclock_gettime(4,{334689.598310337 })\t\t = 0 (0x0)\ngettimeofday({1480832080.977889 },0x0)\t\t = 0 (0x0)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,54) = 54 (0x36)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,52) = 52 (0x34)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,56) = 56 (0x38)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,55) = 55 (0x37)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,50) = 50 (0x32)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,55) = 55 (0x37)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,54) = 54 (0x36)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,47) = 47 (0x2f)\nclock_gettime(4,{334689.600967100 })\t\t = 0 (0x0)\ngettimeofday({1480832080.980523 },0x0)\t\t = 0 (0x0)\ngettimeofday({1480832080.980791 },0x0)\t\t = 0 (0x0)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,52) = 52 (0x34)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,50) = 50 (0x32)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,49) = 49 (0x31)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,46) = 46 (0x2e)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,45) = 45 (0x2d)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,49) = 49 (0x31)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,46) = 46 (0x2e)\nwrite(14,\"*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate\"...,46) = 46 (0x2e)\n\n```\n这是实时查看。也可以：\n```text\ntruss -p 48932 -o out.truss\n```\n把结果输出至文件中。捕获一断时间后再细分析。\n\n这个命令能让你很方便地看清异常位置。如：死循环、某些未写入日志的异常等。\n\n很适合用来解决CPU占用过高、难定位的异常、难重现的异常等 。\n\n#lsof\n这个linux/unix都好使。它有两个方面好使。\n\n- 按端口查连接\n```text\nbluse@bluse-Inspiron-1427:~/www/vhost$ lsof -i:80\nCOMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\ncairo-doc 3059 bluse   24u  IPv4  95707      0t0  TCP 192.168.1.102:40728->ec2-35-162-44-96.us-west-2.compute.amazonaws.com:http (ESTABLISHED)\nxmradio   3425 bluse   13u  IPv4  96506      0t0  TCP 192.168.1.102:48640->202.108.249.250:http (ESTABLISHED)\nxmradio   3425 bluse   14u  IPv4  90643      0t0  TCP 192.168.1.102:57590->140.205.220.98:http (CLOSE_WAIT)\ngvfsd-htt 3450 bluse   10u  IPv4  95783      0t0  TCP 192.168.1.102:55522->123.125.7.240:http (ESTABLISHED)\nchrome    3967 bluse  162u  IPv4  95526      0t0  TCP 192.168.1.102:58632->128.199.228.91:http (ESTABLISHED)\nchrome    3967 bluse  202u  IPv4  95527      0t0  TCP 192.168.1.102:58634->128.199.228.91:http (ESTABLISHED)\nchrome    3967 bluse  228u  IPv4  91831      0t0  TCP 192.168.1.102:58714->151.101.52.249:http (ESTABLISHED)\n```\n- 按进程PID查文件调用\n```text\nbluse@bluse-Inspiron-1427:~/www/vhost$ lsof -p 3425\nCOMMAND  PID  USER   FD      TYPE             DEVICE SIZE/OFF     NODE NAME\nxmradio 3425 bluse  cwd       DIR                8,1     4096   262146 /home/bluse\nxmradio 3425 bluse  rtd       DIR                8,1     4096        2 /\nxmradio 3425 bluse  txt       REG                8,1    14664 21375342 /usr/bin/xmradio\nxmradio 3425 bluse  mem       REG               0,19 67108904       15 /dev/shm/pulse-shm-1137957205\nxmradio 3425 bluse  mem       REG                8,1    10256 21435409 /usr/lib/vlc/plugins/audio_filter/libtrivial_channel_mixer_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    34920 21435412 /usr/lib/vlc/plugins/audio_filter/libaudio_format_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    10272 21435429 /usr/lib/vlc/plugins/audio_filter/libugly_resampler_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    10280 21435410 /usr/lib/vlc/plugins/audio_filter/libdolby_surround_decoder_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    10320 21435419 /usr/lib/vlc/plugins/audio_filter/libdtstospdif_plugin.so\nxmradio 3425 bluse  mem       REG                8,1    18472 21435431 /usr/lib/vlc/plugins/audio_filter/libsimple_channel_mixer_plugin.so\nxmradio 3425 bluse  mem       REG                8,1     6176 21435428 /usr/lib/vlc/plugins/audio_filter/liba52tospdif_plugin.so\nxmradio 3425 bluse  mem       REG               0,19 67108904        7 /dev/shm/pulse-shm-3282743321\nxmradio 3425 bluse  mem       REG                8,1  4343844 22414964 /usr/share/fonts/truetype/nanum/NanumGothic.ttf\n```\n#strace\n它的用法也差不多：\n```text\nstrace -f -o vim.strace vim： 跟踪vim及其子进程的运行，将输出信息写到文件vim.strace。\n```\n进程调试\n```text\nbluse@bluse-Inspiron-1427:~/www/vhost$ sudo strace -o out.strace lsof -p 3425\nbluse@bluse-Inspiron-1427:~/www/vhost$ head -10 out.strace \nexecve(\"/usr/bin/lsof\", [\"lsof\", \"-p\", \"3425\"], [/* 26 vars */]) = 0\nbrk(NULL)                               = 0x562c9956b000\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f29b0751000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=188234, ...}) = 0\nmmap(NULL, 188234, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f29b0723000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\n\n```\n##htop 中使用 strace\nhtop中内置了strace\n\n进入`htop`后按上下方向键选择进程，在需要调试的进程上按`s`就能进入 它的strace。`F8`是自动翻页开关！\n\n#ltrace\n```text\nsudo ltrace -p 3425\n--- UNKNOWN_SIGNAL (Unknown signal 32) ---\n+++ exited (status 0) +++\n+++ exited (status 0) +++\n+++ exited (status 0) +++\n--- SIGCHLD (Child exited) ---\n```\n\n作为系统管理，以上这些用法基本能满足日常所需。更多深度功能得找各自的`man`\n","slug":"truss-lsof-strace-ltrace","published":1,"updated":"2021-01-06T09:56:16.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s8002b2aahaebi916w","content":"<p>#truss<br>这个命令一般UNIX平台自带。使用举例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bluse@ybcz ~/vhosts/bluse]$ sudo truss -p48932</span><br><span class=\"line\">clock_gettime(4,&#123;334689.597960013 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">clock_gettime(4,&#123;334689.598165067 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">clock_gettime(4,&#123;334689.598310337 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">gettimeofday(&#123;1480832080.977889 &#125;,0x0)\t\t = 0 (0x0)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,54) = 54 (0x36)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,52) = 52 (0x34)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,56) = 56 (0x38)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,55) = 55 (0x37)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,50) = 50 (0x32)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,55) = 55 (0x37)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,54) = 54 (0x36)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,47) = 47 (0x2f)</span><br><span class=\"line\">clock_gettime(4,&#123;334689.600967100 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">gettimeofday(&#123;1480832080.980523 &#125;,0x0)\t\t = 0 (0x0)</span><br><span class=\"line\">gettimeofday(&#123;1480832080.980791 &#125;,0x0)\t\t = 0 (0x0)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,52) = 52 (0x34)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,50) = 50 (0x32)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,49) = 49 (0x31)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,46) = 46 (0x2e)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,45) = 45 (0x2d)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,49) = 49 (0x31)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,46) = 46 (0x2e)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,46) = 46 (0x2e)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这是实时查看。也可以：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truss -p 48932 -o out.truss</span><br></pre></td></tr></table></figure>\n<p>把结果输出至文件中。捕获一断时间后再细分析。</p>\n<p>这个命令能让你很方便地看清异常位置。如：死循环、某些未写入日志的异常等。</p>\n<p>很适合用来解决CPU占用过高、难定位的异常、难重现的异常等 。</p>\n<p>#lsof<br>这个linux/unix都好使。它有两个方面好使。</p>\n<ul>\n<li>按端口查连接<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ lsof -i:80</span><br><span class=\"line\">COMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">cairo-doc 3059 bluse   24u  IPv4  95707      0t0  TCP 192.168.1.102:40728-&gt;ec2-35-162-44-96.us-west-2.compute.amazonaws.com:http (ESTABLISHED)</span><br><span class=\"line\">xmradio   3425 bluse   13u  IPv4  96506      0t0  TCP 192.168.1.102:48640-&gt;202.108.249.250:http (ESTABLISHED)</span><br><span class=\"line\">xmradio   3425 bluse   14u  IPv4  90643      0t0  TCP 192.168.1.102:57590-&gt;140.205.220.98:http (CLOSE_WAIT)</span><br><span class=\"line\">gvfsd-htt 3450 bluse   10u  IPv4  95783      0t0  TCP 192.168.1.102:55522-&gt;123.125.7.240:http (ESTABLISHED)</span><br><span class=\"line\">chrome    3967 bluse  162u  IPv4  95526      0t0  TCP 192.168.1.102:58632-&gt;128.199.228.91:http (ESTABLISHED)</span><br><span class=\"line\">chrome    3967 bluse  202u  IPv4  95527      0t0  TCP 192.168.1.102:58634-&gt;128.199.228.91:http (ESTABLISHED)</span><br><span class=\"line\">chrome    3967 bluse  228u  IPv4  91831      0t0  TCP 192.168.1.102:58714-&gt;151.101.52.249:http (ESTABLISHED)</span><br></pre></td></tr></table></figure></li>\n<li>按进程PID查文件调用<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ lsof -p 3425</span><br><span class=\"line\">COMMAND  PID  USER   FD      TYPE             DEVICE SIZE/OFF     NODE NAME</span><br><span class=\"line\">xmradio 3425 bluse  cwd       DIR                8,1     4096   262146 /home/bluse</span><br><span class=\"line\">xmradio 3425 bluse  rtd       DIR                8,1     4096        2 /</span><br><span class=\"line\">xmradio 3425 bluse  txt       REG                8,1    14664 21375342 /usr/bin/xmradio</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG               0,19 67108904       15 /dev/shm/pulse-shm-1137957205</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10256 21435409 /usr/lib/vlc/plugins/audio_filter/libtrivial_channel_mixer_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    34920 21435412 /usr/lib/vlc/plugins/audio_filter/libaudio_format_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10272 21435429 /usr/lib/vlc/plugins/audio_filter/libugly_resampler_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10280 21435410 /usr/lib/vlc/plugins/audio_filter/libdolby_surround_decoder_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10320 21435419 /usr/lib/vlc/plugins/audio_filter/libdtstospdif_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    18472 21435431 /usr/lib/vlc/plugins/audio_filter/libsimple_channel_mixer_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1     6176 21435428 /usr/lib/vlc/plugins/audio_filter/liba52tospdif_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG               0,19 67108904        7 /dev/shm/pulse-shm-3282743321</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1  4343844 22414964 /usr/share/fonts/truetype/nanum/NanumGothic.ttf</span><br></pre></td></tr></table></figure>\n#strace<br>它的用法也差不多：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -f -o vim.strace vim： 跟踪vim及其子进程的运行，将输出信息写到文件vim.strace。</span><br></pre></td></tr></table></figure>\n进程调试<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ sudo strace -o out.strace lsof -p 3425</span><br><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ head -10 out.strace </span><br><span class=\"line\">execve(&quot;/usr/bin/lsof&quot;, [&quot;lsof&quot;, &quot;-p&quot;, &quot;3425&quot;], [/* 26 vars */]) = 0</span><br><span class=\"line\">brk(NULL)                               = 0x562c9956b000</span><br><span class=\"line\">access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)</span><br><span class=\"line\">mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f29b0751000</span><br><span class=\"line\">access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class=\"line\">open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class=\"line\">fstat(3, &#123;st_mode=S_IFREG|0644, st_size=188234, ...&#125;) = 0</span><br><span class=\"line\">mmap(NULL, 188234, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f29b0723000</span><br><span class=\"line\">close(3)                                = 0</span><br><span class=\"line\">access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n##htop 中使用 strace<br>htop中内置了strace</li>\n</ul>\n<p>进入<code>htop</code>后按上下方向键选择进程，在需要调试的进程上按<code>s</code>就能进入 它的strace。<code>F8</code>是自动翻页开关！</p>\n<p>#ltrace</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ltrace -p 3425</span><br><span class=\"line\">--- UNKNOWN_SIGNAL (Unknown signal 32) ---</span><br><span class=\"line\">+++ exited (status 0) +++</span><br><span class=\"line\">+++ exited (status 0) +++</span><br><span class=\"line\">+++ exited (status 0) +++</span><br><span class=\"line\">--- SIGCHLD (Child exited) ---</span><br></pre></td></tr></table></figure>\n<p>作为系统管理，以上这些用法基本能满足日常所需。更多深度功能得找各自的<code>man</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#truss<br>这个命令一般UNIX平台自带。使用举例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bluse@ybcz ~/vhosts/bluse]$ sudo truss -p48932</span><br><span class=\"line\">clock_gettime(4,&#123;334689.597960013 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">clock_gettime(4,&#123;334689.598165067 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">clock_gettime(4,&#123;334689.598310337 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">gettimeofday(&#123;1480832080.977889 &#125;,0x0)\t\t = 0 (0x0)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,54) = 54 (0x36)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,52) = 52 (0x34)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,56) = 56 (0x38)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,55) = 55 (0x37)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,50) = 50 (0x32)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,55) = 55 (0x37)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,54) = 54 (0x36)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,47) = 47 (0x2f)</span><br><span class=\"line\">clock_gettime(4,&#123;334689.600967100 &#125;)\t\t = 0 (0x0)</span><br><span class=\"line\">gettimeofday(&#123;1480832080.980523 &#125;,0x0)\t\t = 0 (0x0)</span><br><span class=\"line\">gettimeofday(&#123;1480832080.980791 &#125;,0x0)\t\t = 0 (0x0)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,52) = 52 (0x34)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,50) = 50 (0x32)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,49) = 49 (0x31)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,46) = 46 (0x2e)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,45) = 45 (0x2d)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,49) = 49 (0x31)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,46) = 46 (0x2e)</span><br><span class=\"line\">write(14,&quot;*3\\r\\n$4\\r\\nhget\\r\\n$14\\r\\nstate&quot;...,46) = 46 (0x2e)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这是实时查看。也可以：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truss -p 48932 -o out.truss</span><br></pre></td></tr></table></figure>\n<p>把结果输出至文件中。捕获一断时间后再细分析。</p>\n<p>这个命令能让你很方便地看清异常位置。如：死循环、某些未写入日志的异常等。</p>\n<p>很适合用来解决CPU占用过高、难定位的异常、难重现的异常等 。</p>\n<p>#lsof<br>这个linux/unix都好使。它有两个方面好使。</p>\n<ul>\n<li>按端口查连接<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ lsof -i:80</span><br><span class=\"line\">COMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">cairo-doc 3059 bluse   24u  IPv4  95707      0t0  TCP 192.168.1.102:40728-&gt;ec2-35-162-44-96.us-west-2.compute.amazonaws.com:http (ESTABLISHED)</span><br><span class=\"line\">xmradio   3425 bluse   13u  IPv4  96506      0t0  TCP 192.168.1.102:48640-&gt;202.108.249.250:http (ESTABLISHED)</span><br><span class=\"line\">xmradio   3425 bluse   14u  IPv4  90643      0t0  TCP 192.168.1.102:57590-&gt;140.205.220.98:http (CLOSE_WAIT)</span><br><span class=\"line\">gvfsd-htt 3450 bluse   10u  IPv4  95783      0t0  TCP 192.168.1.102:55522-&gt;123.125.7.240:http (ESTABLISHED)</span><br><span class=\"line\">chrome    3967 bluse  162u  IPv4  95526      0t0  TCP 192.168.1.102:58632-&gt;128.199.228.91:http (ESTABLISHED)</span><br><span class=\"line\">chrome    3967 bluse  202u  IPv4  95527      0t0  TCP 192.168.1.102:58634-&gt;128.199.228.91:http (ESTABLISHED)</span><br><span class=\"line\">chrome    3967 bluse  228u  IPv4  91831      0t0  TCP 192.168.1.102:58714-&gt;151.101.52.249:http (ESTABLISHED)</span><br></pre></td></tr></table></figure></li>\n<li>按进程PID查文件调用<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ lsof -p 3425</span><br><span class=\"line\">COMMAND  PID  USER   FD      TYPE             DEVICE SIZE/OFF     NODE NAME</span><br><span class=\"line\">xmradio 3425 bluse  cwd       DIR                8,1     4096   262146 /home/bluse</span><br><span class=\"line\">xmradio 3425 bluse  rtd       DIR                8,1     4096        2 /</span><br><span class=\"line\">xmradio 3425 bluse  txt       REG                8,1    14664 21375342 /usr/bin/xmradio</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG               0,19 67108904       15 /dev/shm/pulse-shm-1137957205</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10256 21435409 /usr/lib/vlc/plugins/audio_filter/libtrivial_channel_mixer_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    34920 21435412 /usr/lib/vlc/plugins/audio_filter/libaudio_format_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10272 21435429 /usr/lib/vlc/plugins/audio_filter/libugly_resampler_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10280 21435410 /usr/lib/vlc/plugins/audio_filter/libdolby_surround_decoder_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    10320 21435419 /usr/lib/vlc/plugins/audio_filter/libdtstospdif_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1    18472 21435431 /usr/lib/vlc/plugins/audio_filter/libsimple_channel_mixer_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1     6176 21435428 /usr/lib/vlc/plugins/audio_filter/liba52tospdif_plugin.so</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG               0,19 67108904        7 /dev/shm/pulse-shm-3282743321</span><br><span class=\"line\">xmradio 3425 bluse  mem       REG                8,1  4343844 22414964 /usr/share/fonts/truetype/nanum/NanumGothic.ttf</span><br></pre></td></tr></table></figure>\n#strace<br>它的用法也差不多：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -f -o vim.strace vim： 跟踪vim及其子进程的运行，将输出信息写到文件vim.strace。</span><br></pre></td></tr></table></figure>\n进程调试<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ sudo strace -o out.strace lsof -p 3425</span><br><span class=\"line\">bluse@bluse-Inspiron-1427:~/www/vhost$ head -10 out.strace </span><br><span class=\"line\">execve(&quot;/usr/bin/lsof&quot;, [&quot;lsof&quot;, &quot;-p&quot;, &quot;3425&quot;], [/* 26 vars */]) = 0</span><br><span class=\"line\">brk(NULL)                               = 0x562c9956b000</span><br><span class=\"line\">access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)</span><br><span class=\"line\">mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f29b0751000</span><br><span class=\"line\">access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class=\"line\">open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class=\"line\">fstat(3, &#123;st_mode=S_IFREG|0644, st_size=188234, ...&#125;) = 0</span><br><span class=\"line\">mmap(NULL, 188234, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f29b0723000</span><br><span class=\"line\">close(3)                                = 0</span><br><span class=\"line\">access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n##htop 中使用 strace<br>htop中内置了strace</li>\n</ul>\n<p>进入<code>htop</code>后按上下方向键选择进程，在需要调试的进程上按<code>s</code>就能进入 它的strace。<code>F8</code>是自动翻页开关！</p>\n<p>#ltrace</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ltrace -p 3425</span><br><span class=\"line\">--- UNKNOWN_SIGNAL (Unknown signal 32) ---</span><br><span class=\"line\">+++ exited (status 0) +++</span><br><span class=\"line\">+++ exited (status 0) +++</span><br><span class=\"line\">+++ exited (status 0) +++</span><br><span class=\"line\">--- SIGCHLD (Child exited) ---</span><br></pre></td></tr></table></figure>\n<p>作为系统管理，以上这些用法基本能满足日常所需。更多深度功能得找各自的<code>man</code></p>\n"},{"title":"使用 webpack 打包 font-awesome","date":"2017-02-21T13:09:46.000Z","_content":"当 `npm install font-awesome --save` 后在主scss文件中：\n`@import ~font-awesome` 会报很多问题\n\n问题主要是两方面：\n* 路径\n* 加载器\n\n## 路径\n\n```text\n@import \"~font-awesome/scss/variables\";\n$fa-font-path: \"~font-awesome/fonts\";\n@import \"~font-awesome/scss/font-awesome\";\n```\n## 加载器\n```text\n\n  module: {\n    rules: [\n      {test: /\\.eot(\\?v=\\d+.\\d+.\\d+)?$/, loader: 'file-loader'},\n      {test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: 'url-loader?limit=10000&mimetype=application/font-woff'},\n      {test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: \"file-loader?limit=10000\"},\n    ]\n  }\n```\n","source":"_posts/webpack-font-awesome.md","raw":"---\ntitle: 使用 webpack 打包 font-awesome\ndate: 2017-02-21 21:09:46\ntags: [webpack, font-awesome]\n---\n当 `npm install font-awesome --save` 后在主scss文件中：\n`@import ~font-awesome` 会报很多问题\n\n问题主要是两方面：\n* 路径\n* 加载器\n\n## 路径\n\n```text\n@import \"~font-awesome/scss/variables\";\n$fa-font-path: \"~font-awesome/fonts\";\n@import \"~font-awesome/scss/font-awesome\";\n```\n## 加载器\n```text\n\n  module: {\n    rules: [\n      {test: /\\.eot(\\?v=\\d+.\\d+.\\d+)?$/, loader: 'file-loader'},\n      {test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: 'url-loader?limit=10000&mimetype=application/font-woff'},\n      {test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: \"file-loader?limit=10000\"},\n    ]\n  }\n```\n","slug":"webpack-font-awesome","published":1,"updated":"2021-01-06T09:56:16.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5s9002e2aah0r8m3vbo","content":"<p>当 <code>npm install font-awesome --save</code> 后在主scss文件中：<br><code>@import ~font-awesome</code> 会报很多问题</p>\n<p>问题主要是两方面：</p>\n<ul>\n<li>路径</li>\n<li>加载器</li>\n</ul>\n<h2 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;~font-awesome/scss/variables&quot;;</span><br><span class=\"line\">$fa-font-path: &quot;~font-awesome/fonts&quot;;</span><br><span class=\"line\">@import &quot;~font-awesome/scss/font-awesome&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载器\"><a href=\"#加载器\" class=\"headerlink\" title=\"加载器\"></a>加载器</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">module: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;test: /\\.eot(\\?v=\\d+.\\d+.\\d+)?$/, loader: &#x27;file-loader&#x27;&#125;,</span><br><span class=\"line\">    &#123;test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: &#x27;url-loader?limit=10000&amp;mimetype=application/font-woff&#x27;&#125;,</span><br><span class=\"line\">    &#123;test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: &quot;file-loader?limit=10000&quot;&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>当 <code>npm install font-awesome --save</code> 后在主scss文件中：<br><code>@import ~font-awesome</code> 会报很多问题</p>\n<p>问题主要是两方面：</p>\n<ul>\n<li>路径</li>\n<li>加载器</li>\n</ul>\n<h2 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;~font-awesome/scss/variables&quot;;</span><br><span class=\"line\">$fa-font-path: &quot;~font-awesome/fonts&quot;;</span><br><span class=\"line\">@import &quot;~font-awesome/scss/font-awesome&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载器\"><a href=\"#加载器\" class=\"headerlink\" title=\"加载器\"></a>加载器</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">module: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;test: /\\.eot(\\?v=\\d+.\\d+.\\d+)?$/, loader: &#x27;file-loader&#x27;&#125;,</span><br><span class=\"line\">    &#123;test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: &#x27;url-loader?limit=10000&amp;mimetype=application/font-woff&#x27;&#125;,</span><br><span class=\"line\">    &#123;test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: &quot;file-loader?limit=10000&quot;&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"电子商务法","date":"2021-01-07T01:39:50.000Z","_content":"\n# 中华人民共和国电子商务法\n\n## 第一章 总 则\n#### 第一条 \n为了保障电子商务各方主体的合法权益，规范电子商务行为，维护市场秩序，促进电子商务持续健康发展，制定本法。\n#### 第二条 \n中华人民共和国境内的电子商务活动，适用本法。\n\n 本法所称电子商务，是指通过互联网等信息网络销售商品或者提供服务的经营活 动。\n\n 法律、行政法规对销售商品或者提供服务有规定的，适用其规定。金融类产品和 服务，利用信息网络提供新闻信息、音视频节目、出版以及文化产品等内容方面的服 务，不适用本法。\n#### 第三条 \n国家鼓励发展电子商务新业态，创新商业模式，促进电子商务技术研发 和推广应用，推进电子商务诚信体系建设，营造有利于电子商务创新发展的市场环境， 充分发挥电子商务在推动高质量发展、满足人民日益增长的美好生活需要、构建开放 型经济方面的重要作用。\n### 第四条 \n国家平等对待线上线下商务活动，促进线上线下融合发展，各级人民政府和有关部门不得采取歧视性的政策措施，不得滥用行政权力排除、限制市场竞争。\n\n#### 第五条\n电子商务经营者从事经营活动，应当遵循自愿、平等、公平、诚信的原则，遵守法律和商业道德，公平参与市场竞争，履行消费者权益保护、环境保护、知识产权保护、网络安全与个人信息保护等方面的义务，承担产品和服务质量责任，接受政府和社会的监督。\n\n#### 第六条\n国务院有关部门按照职责分工负责电子商务发展促进、监督管理等工作。县级以上地方各级人民政府可以根据本行政区域的实际情况，确定本行政区域内电子商务的部门职责划分。\n\n#### 第七条\n国家建立符合电子商务特点的协同管理体系，推动形成有关部门、电子商务行业组织、电子商务经营者、消费者等共同参与的电子商务市场治理体系。\n\n#### 第八条\n电子商务行业组织按照本组织章程开展行业自律，建立健全行业规范，推动行业诚信建设，监督、引导本行业经营者公平参与市场竞争。\n\n## 第二章 电子商务经营者\n### 第一节 一般规定\n#### 第九条 \n本法所称电子商务经营者，是指通过互联网等信息网络从事销售商品或者提供服务的经营活动的自然人、法人和非法人组织，包括电子商务平台经营者、平台内经营者以及通过自建网站、其他网络服务销售商品或者提供服务的电子商务经营者。\n\n 本法所称电子商务平台经营者，是指在电子商务中为交易双方或者多方提供网络经营场所、交易撮合、信息发布等服务，供交易双方或者多方独立开展交易活动的法人或者非法人组织。\n\n 本法所称平台内经营者，是指通过电子商务平台销售商品或者提供服务的电子商务经营者。\n####  第十条 \n电子商务经营者应当依法办理市场主体登记。但是，个人销售自产农副产品、家庭手工业产品，个人利用自己的技能从事依法无须取得许可的便民劳务活动和零星小额交易活动，以及依照法律、行政法规不需要进行登记的除外。\n####  第十一条 \n电子商务经营者应当依法履行纳税义务，并依法享受税收优惠。\n\n 依照前条规定不需要办理市场主体登记的电子商务经营者在首次纳税义务发生后，应当依照税收征收管理法律、行政法规的规定申请办理税务登记，并如实申报纳税。\n####  第十二条 \n电子商务经营者从事经营活动，依法需要取得相关行政许可的，应当依法取得行政许可。\n####  第十三条 \n电子商务经营者销售的商品或者提供的服务应当符合保障人身、财产安全的要求和环境保护要求，不得销售或者提供法律、行政法规禁止交易的商品或者服务。\n####  第十四条 \n电子商务经营者销售商品或者提供服务应当依法出具纸质发票或者电子发票等购货凭证或者服务单据。电子发票与纸质发票具有同等法律效力。\n####  第十五条 \n电子商务经营者应当在其首页显著位置，持续公示营业执照信息、与其经营业务有关的行政许可信息、属于依照本法第十条规定的不需要办理市场主体登记情形等信息，或者上述信息的链接标识。\n\n 前款规定的信息发生变更的，电子商务经营者应当及时更新公示信息。\n####  第十六条 \n电子商务经营者自行终止从事电子商务的，应当提前三十日在首页显著位置持续公示有关信息。\n####  第十七条 \n电子商务经营者应当全面、真实、准确、及时地披露商品或者服务信息，保障消费者的知情权和选择权。电子商务经营者不得以虚构交易、编造用户评价等方式进行虚假或者引人误解的商业宣传，欺骗、误导消费者。\n####  第十八条 \n电子商务经营者根据消费者的兴趣爱好、消费习惯等特征向其提供商品或者服务的搜索结果的，应当同时向该消费者提供不针对其个人特征的选项，尊重\n和平等保护消费者合法权益。\n\n 电子商务经营者向消费者发送广告的，应当遵守《中华人民共和国广告法》的有关规定。\n####  第十九条 \n电子商务经营者搭售商品或者服务，应当以显著方式提请消费者注意，不得将搭售商品或者服务作为默认同意的选项。\n####  第二十条 \n电子商务经营者应当按照承诺或者与消费者约定的方式、时限向消费者交付商品或者服务，并承担商品运输中的风险和责任。但是，消费者另行选择快递物流服务提供者的除外。\n####  第二十一条 \n电子商务经营者按照约定向消费者收取押金的，应当明示押金退还的方式、程序，不得对押金退还设置不合理条件。消费者申请退还押金，符合押金退还条件的，电子商务经营者应当及时退还。\n####  第二十二条 \n电子商务经营者因其技术优势、用户数量、对相关行业的控制能力以及其他经营者对该电子商务经营者在交易上的依赖程度等因素而具有市场支配地位的，不得滥用市场支配地位，排除、限制竞争。\n####  第二十三条 \n电子商务经营者收集、使用其用户的个人信息，应当遵守法律、行政法规有关个人信息保护的规定。\n####  第二十四条 \n电子商务经营者应当明示用户信息查询、更正、删除以及用户注销的方式、程序，不得对用户信息查询、更正、删除以及用户注销设置不合理条件。\n\n 电子商务经营者收到用户信息查询或者更正、删除的申请的，应当在核实身份后及时提供查询或者更正、删除用户信息。用户注销的，电子商务经营者应当立即删除该用户的信息；依照法律、行政法规的规定或者双方约定保存的，依照其规定。\n####  第二十五条 \n有关主管部门依照法律、行政法规的规定要求电子商务经营者提供有关电子商务数据信息的，电子商务经营者应当提供。有关主管部门应当采取必要措施保护电子商务经营者提供的数据信息的安全，并对其中的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。\n####  第二十六条 \n电子商务经营者从事跨境电子商务，应当遵守进出口监督管理的法律、行政法规和国家有关规定。\n\n### 第二节 电子商务平台经营者\n####  第二十七条 \n电子商务平台经营者应当要求申请进入平台销售商品或者提供服务的经营者提交其身份、地址、联系方式、行政许可等真实信息，进行核验、登记，建立登记档案，并定期核验更新。\n\n 电子商务平台经营者为进入平台销售商品或者提供服务的非经营用户提供服务，应当遵守本节有关规定。\n####  第二十八条 \n电子商务平台经营者应当按照规定向市场监督管理部门报送平台内经营者的身份信息，提示未办理市场主体登记的经营者依法办理登记，并配合市场监督管理部门，针对电子商务的特点，为应当办理市场主体登记的经营者办理登记提供便利。\n\n 电子商务平台经营者应当依照税收征收管理法律、行政法规的规定，向税务部门报送平台内经营者的身份信息和与纳税有关的信息，并应当提示依照本法第十条规定不需要办理市场主体登记的电子商务经营者依照本法第十一条第二款的规定办理税务登记。\n####  第二十九条 \n电子商务平台经营者发现平台内的商品或者服务信息存在违反本法第十二条、第十三条规定情形的，应当依法采取必要的处置措施，并向有关主管部门报告。\n####  第三十条 \n电子商务平台经营者应当采取技术措施和其他必要措施保证其网络安全、稳定运行，防范网络违法犯罪活动，有效应对网络安全事件，保障电子商务交易安全。\n\n 电子商务平台经营者应当制定网络安全事件应急预案，发生网络安全事件时，应当立即启动应急预案，采取相应的补救措施，并向有关主管部门报告。\n####  第三十一条 \n电子商务平台经营者应当记录、保存平台上发布的商品和服务信息、交易信息，并确保信息的完整性、保密性、可用性。商品和服务信息、交易信息保存时间自交易完成之日起不少于三年；法律、行政法规另有规定的，依照其规定。\n####  第三十二条 \n电子商务平台经营者应当遵循公开、公平、公正的原则，制定平台服务协议和交易规则，明确进入和退出平台、商品和服务质量保障、消费者权益保护、个人信息保护等方面的权利和义务。\n####  第三十三条 \n电子商务平台经营者应当在其首页显著位置持续公示平台服务协议和交易规则信息或者上述信息的链接标识，并保证经营者和消费者能够便利、完整地阅览和下载。\n####  第三十四条 \n电子商务平台经营者修改平台服务协议和交易规则，应当在其首页显著位置公开征求意见，采取合理措施确保有关各方能够及时充分表达意见。修改内容应当至少在实施前七日予以公示。\n\n 平台内经营者不接受修改内容，要求退出平台的，电子商务平台经营者不得阻止，并按照修改前的服务协议和交易规则承担相关责任。\n####  第三十五条 \n电子商务平台经营者不得利用服务协议、交易规则以及技术等手段，对平台内经营者在平台内的交易、交易价格以及与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用。\n####  第三十六条 \n电子商务平台经营者依据平台服务协议和交易规则对平台内经营者违反法律、法规的行为实施警示、暂停或者终止服务等措施的，应当及时公示。\n####  第三十七条 \n电子商务平台经营者在其平台上开展自营业务的，应当以显著方式区分标记自营业务和平台内经营者开展的业务，不得误导消费者。\n\n 电子商务平台经营者对其标记为自营的业务依法承担商品销售者或者服务提供者的民事责任。\n####  第三十八条 \n电子商务平台经营者知道或者应当知道平台内经营者销售的商品或者提供的服务不符合保障人身、财产安全的要求，或者有其他侵害消费者合法权益行为，未采取必要措施的，依法与该平台内经营者承担连带责任。\n\n 对关系消费者生命健康的商品或者服务，电子商务平台经营者对平台内经营者的资质资格未尽到审核义务，或者对消费者未尽到安全保障义务，造成消费者损害的，依法承担相应的责任。\n####  第三十九条 \n电子商务平台经营者应当建立健全信用评价制度，公示信用评价规则，为消费者提供对平台内销售的商品或者提供的服务进行评价的途径。\n\n 电子商务平台经营者不得删除消费者对其平台内销售的商品或者提供的服务的评价。\n####  第四十条 \n电子商务平台经营者应当根据商品或者服务的价格、销量、信用等以多种方式向消费者显示商品或者服务的搜索结果；对于竞价排名的商品或者服务，应当显著标明“广告”。\n####  第四十一条 \n电子商务平台经营者应当建立知识产权保护规则，与知识产权权利人加强合作，依法保护知识产权。\n####  第四十二条 \n知识产权权利人认为其知识产权受到侵害的，有权通知电子商务平台经营者采取删除、屏蔽、断开链接、终止交易和服务等必要措施。通知应当包括构成侵权的初步证据。\n\n 电子商务平台经营者接到通知后，应当及时采取必要措施，并将该通知转送平台内经营者；未及时采取必要措施的，对损害的扩大部分与平台内经营者承担连带责任。\n\n 因通知错误造成平台内经营者损害的，依法承担民事责任。恶意发出错误通知，造成平台内经营者损失的，加倍承担赔偿责任。\n#### 第四十三条 \n平台内经营者接到转送的通知后，可以向电子商务平台经营者提交不存在侵权行为的声明。声明应当包括不存在侵权行为的初步证据。\n\n 电子商务平台经营者接到声明后，应当将该声明转送发出通知的知识产权权利人，并告知其可以向有关主管部门投诉或者向人民法院起诉。电子商务平台经营者在转送声明到达知识产权权利人后十五日内，未收到权利人已经投诉或者起诉通知的，应当及时终止所采取的措施。\n\n#### 第四十四条\n电子商务平台经营者应当及时公示收到的本法第四十二条、第四十三条规定的通知、声明及处理结果。\n\n#### 第四十五条\n电子商务平台经营者知道或者应当知道平台内经营者侵犯知识产权的，应当采取删除、屏蔽、断开链接、终止交易和服务等必要措施；未采取必要措施的，与侵权人承担连带责任。\n####  第四十六条 \n除本法第九条第二款规定的服务外，电子商务平台经营者可以按照平台服务协议和交易规则，为经营者之间的电子商务提供仓储、物流、支付结算、交收等服务。电子商务平台经营者为经营者之间的电子商务提供服务，应当遵守法律、行政法规和国家有关规定，不得采取集中竞价、做市商等集中交易方式进行交易，不得进行标准化合约交易。\n## 第三章 电子商务合同的订立与履行\n#### 第四十七条 \n电子商务当事人订立和履行合同，适用本章和《中华人民共和国民法总则》《中华人民共和国合同法》《中华人民共和国电子签名法》等法律的规定。\n#### 第四十八条 \n电子商务当事人使用自动信息系统订立或者履行合同的行为对使用该系统的当事人具有法律效力。\n\n在电子商务中推定当事人具有相应的民事行为能力。但是，有相反证据足以推翻的除外。\n#### 第四十九条 \n电子商务经营者发布的商品或者服务信息符合要约条件的，用户选择该商品或者服务并提交订单成功，合同成立。当事人另有约定的，从其约定。电子商务经营者不得以格式条款等方式约定消费者支付价款后合同不成立；格式条款等含有该内容的，其内容无效。\n#### 第五十条 \n电子商务经营者应当清晰、全面、明确地告知用户订立合同的步骤、注意事项、下载方法等事项，并保证用户能够便利、完整地阅览和下载。电子商务经营者应当保证用户在提交订单前可以更正输入错误。\n#### 第五十一条 \n合同标的为交付商品并采用快递物流方式交付的，收货人签收时间为交付时间。合同标的为提供服务的，生成的电子凭证或者实物凭证中载明的时间为交付时间；前述凭证没有载明时间或者载明时间与实际提供服务时间不一致的，实际提供服务的时间为交付时间。\n\n合同标的为采用在线传输方式交付的，合同标的进入对方当事人指定的特定系统并且能够检索识别的时间为交付时间。\n\n合同当事人对交付方式、交付时间另有约定的，从其约定。\n#### 第五十二条 \n电子商务当事人可以约定采用快递物流方式交付商品。快递物流服务提供者为电子商务提供快递物流服务，应当遵守法律、行政法规，并应当符合承诺的服务规范和时限。快递物流服务提供者在交付商品时，应当提示收货人当面查验；交由他人代收的，应当经收货人同意。 快递物流服务提供者应当按照规定使用环保包装材料，实现包装材料的减量化和再利用。快递物流服务提供者在提供快递物流服务的同时，可以接受电子商务经营者的委托提供代收货款服务。\n#### 第五十三条 \n电子商务当事人可以约定采用电子支付方式支付价款。\n\n电子支付服务提供者为电子商务提供电子支付服务，应当遵守国家规定，告知用户电子支付服务的功能、使用方法、注意事项、相关风险和收费标准等事项，不得附加不合理交易条件。电子支付服务提供者应当确保电子支付指令的完整性、一致性、可跟踪稽核和不可篡改。\n\n电子支付服务提供者应当向用户免费提供对账服务以及最近三年的交易记录。\n#### 第五十四条 \n电子支付服务提供者提供电子支付服务不符合国家有关支付安全管理要求，造成用户损失的，应当承担赔偿责任。\n#### 第五十五条 \n用户在发出支付指令前，应当核对支付指令所包含的金额、收款人等完整信息。\n\n支付指令发生错误的，电子支付服务提供者应当及时查找原因，并采取相关措施予以纠正。造成用户损失的，电子支付服务提供者应当承担赔偿责任，但能够证明支付错误非自身原因造成的除外。\n#### 第五十六条 \n电子支付服务提供者完成电子支付后，应当及时准确地向用户提供符合约定方式的确认支付的信息。\n#### 第五十七条 \n用户应当妥善保管交易密码、电子签名数据等安全工具。用户发现安全工具遗失、被盗用或者未经授权的支付的，应当及时通知电子支付服务提供者。\n\n未经授权的支付造成的损失，由电子支付服务提供者承担；电子支付服务提供者能够证明未经授权的支付是因用户的过错造成的，不承担责任。\n\n电子支付服务提供者发现支付指令未经授权，或者收到用户支付指令未经授权的通知时，应当立即采取措施防止损失扩大。电子支付服务提供者未及时采取措施导致损失扩大的，对损失扩大部分承担责任。\n\n## 第四章 电子商务争议解决\n\n#### 第五十八条 \n国家鼓励电子商务平台经营者建立有利于电子商务发展和消费者权益保护的商品、服务质量担保机制。\n\n电子商务平台经营者与平台内经营者协议设立消费者权益保证金的，双方应当就消费者权益保证金的提取数额、管理、使用和退还办法等作出明确约定。\n\n消费者要求电子商务平台经营者承担先行赔偿责任以及电子商务平台经营者赔偿后向平台内经营者的追偿，适用《中华人民共和国消费者权益保护法》的有关规定。\n#### 第五十九条 \n电子商务经营者应当建立便捷、有效的投诉、举报机制，公开投诉、举报方式等信息，及时受理并处理投诉、举报。\n#### 第六十条 \n电子商务争议可以通过协商和解，请求消费者组织、行业协会或者其他依法成立的调解组织调解，向有关部门投诉，提请仲裁，或者提起诉讼等方式解决。\n#### 第六十一条 \n消费者在电子商务平台购买商品或者接受服务，与平台内经营者发生争议时，电子商务平台经营者应当积极协助消费者维护合法权益。\n#### 第六十二条 \n在电子商务争议处理中，电子商务经营者应当提供原始合同和交易记录。因电子商务经营者丢失、伪造、篡改、销毁、隐匿或者拒绝提供前述资料，致使人民法院、仲裁机构或者有关机关无法查明事实的，电子商务经营者应当承担相应的法律责任。\n#### 第六十三条 \n电子商务平台经营者可以建立争议在线解决机制，制定并公示争议解决规则，根据自愿原则，公平、公正地解决当事人的争议。\n## 第五章 电子商务促进\n#### 第六十四条 \n国务院和省、自治区、直辖市人民政府应当将电子商务发展纳入国民经济和社会发展规划，制定科学合理的产业政策，促进电子商务创新发展。\n#### 第六十五条 \n国务院和县级以上地方人民政府及其有关部门应当采取措施，支持、推动绿色包装、仓储、运输，促进电子商务绿色发展。\n#### 第六十六条 \n国家推动电子商务基础设施和物流网络建设，完善电子商务统计制度，加强电子商务标准体系建设。\n#### 第六十七条 \n国家推动电子商务在国民经济各个领域的应用，支持电子商务与各产业融合发展。\n#### 第六十八条 \n国家促进农业生产、加工、流通等环节的互联网技术应用，鼓励各类社会资源加强合作，促进农村电子商务发展，发挥电子商务在精准扶贫中的作用。\n#### 第六十九条 \n国家维护电子商务交易安全，保护电子商务用户信息，鼓励电子商务数据开发应用，保障电子商务数据依法有序自由流动。国家采取措施推动建立公共数据共享机制，促进电子商务经营者依法利用公共数据。\n#### 第七十条 \n国家支持依法设立的信用评价机构开展电子商务信用评价，向社会提供电子商务信用评价服务。\n#### 第七十一条 \n国家促进跨境电子商务发展，建立健全适应跨境电子商务特点的海关、税收、进出境检验检疫、支付结算等管理制度，提高跨境电子商务各环节便利化水平，支持跨境电子商务平台经营者等为跨境电子商务提供仓储物流、报关、报检等服务。\n\n国家支持小型微型企业从事跨境电子商务。\n#### 第七十二条 \n国家进出口管理部门应当推进跨境电子商务海关申报、纳税、检验检疫等环节的综合服务和监管体系建设，优化监管流程，推动实现信息共享、监管互认、执法互助，提高跨境电子商务服务和监管效率。跨境电子商务经营者可以凭电子单证向国家进出口管理部门办理有关手续。\n#### 第七十三条 \n国家推动建立与不同国家、地区之间跨境电子商务的交流合作，参与电子商务国际规则的制定，促进电子签名、电子身份等国际互认。国家推动建立与不同国家、地区之间的跨境电子商务争议解决机制。\n## 第六章 法律责任\n#### 第七十四条 \n电子商务经营者销售商品或者提供服务，不履行合同义务或者履行合同义务不符合约定，或者造成他人损害的，依法承担民事责任。\n#### 第七十五条 \n电子商务经营者违反本法第十二条、第十三条规定，未取得相关行政许可从事经营活动，或者销售、提供法律、行政法规禁止交易的商品、服务，或者不履行本法第二十五条规定的信息提供义务，电子商务平台经营者违反本法第四十六条规定，采取集中交易方式进行交易，或者进行标准化合约交易的，依照有关法律、行政法规的规定处罚。\n#### 第七十六条 \n电子商务经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处一万元以下的罚款，对其中的电子商务平台经营者，依照本法第八十一条第一款的规定处罚：\n\n- （一）未在首页显著位置公示营业执照信息、行政许可信息、属于不需要办理市场主体登记情形等信息,或者上述信息的链接标识的；\n- （二）未在首页显著位置持续公示终止电子商务的有关信息的；\n- （三）未明示用户信息查询、更正、删除以及用户注销的方式、程序，或者对用户信息查询、更正、删除以及用户注销设置不合理条件的。\n  \n电子商务平台经营者对违反前款规定的平台内经营者未采取必要措施的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款。\n#### 第七十七条 \n电子商务经营者违反本法第十八条第一款规定提供搜索结果，或者违反本法第十九条规定搭售商品、服务的，由市场监督管理部门责令限期改正，没收\n违法所得，可以并处五万元以上二十万元以下的罚款；情节严重的，并处二十万元以上五十万元以下的罚款。\n#### 第七十八条 \n电子商务经营者违反本法第二十一条规定，未向消费者明示押金退还的方式、程序，对押金退还设置不合理条件，或者不及时退还押金的，由有关主管部门责令限期改正，可以处五万元以上二十万元以下的罚款；情节严重的，处二十万元以上五十万元以下的罚款。\n#### 第七十九条 \n电子商务经营者违反法律、行政法规有关个人信息保护的规定，或者不履行本法第三十条和有关法律、行政法规规定的网络安全保障义务的，依照《中华人民共和国网络安全法》等法律、行政法规的规定处罚。\n#### 第八十条 \n电子商务平台经营者有下列行为之一的，由有关主管部门责令限期改正；逾期不改正的，处二万元以上十万元以下的罚款；情节严重的，责令停业整顿， 并处十万元以上五十万元以下的罚款：\n\n- （一）不履行本法第二十七条规定的核验、登记义务的；\n- （二）不按照本法第二十八条规定向市场监督管理部门、税务部门报送有关信息 的； \n- （三）不按照本法第二十九条规定对违法情形采取必要的处置措施，或者未向有关主管部门报告的；\n- （四）不履行本法第三十一条规定的商品和服务信息、交易信息保存义务的。\n\n法律、行政法规对前款规定的违法行为的处罚另有规定的，依照其规定。\n#### 第八十一条 \n电子商务平台经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款；情节严重的，处十万元以上五十万元以下的罚款：\n\n- （一）未在首页显著位置持续公示平台服务协议、交易规则信息或者上述信息的 链接标识的；\n- （二）修改交易规则未在首页显著位置公开征求意见，未按照规定的时间提前公示修改内容，或者阻止平台内经营者退出的；\n- （三）未以显著方式区分标记自营业务和平台内经营者开展的业务的； \n- （四）未为消费者提供对平台内销售的商品或者提供的服务进行评价的途径，或者擅自删除消费者的评价的。\n  \n电子商务平台经营者违反本法第四十条规定，对竞价排名的商品或者服务未显著标明“广告”的，依照《中华人民共和国广告法》的规定处罚。\n#### 第八十二条 \n电子商务平台经营者违反本法第三十五条规定，对平台内经营者在平台内的交易、交易价格或者与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下 的罚款。\n#### 第八十三条 \n电子商务平台经营者违反本法第三十八条规定，对平台内经营者侵害消费者合法权益行为未采取必要措施，或者对平台内经营者未尽到资质资格审核义务，或者对消费者未尽到安全保障义务的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，责令停业整顿，并处五十万元以上二百万元以下的罚款。\n#### 第八十四条 \n电子商务平台经营者违反本法第四十二条、第四十五条规定，对平台内经营者实施侵犯知识产权行为未依法采取必要措施的，由有关知识产权行政部门责令限期改正；逾期不改正的，处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下的罚款。\n#### 第八十五条 \n电子商务经营者违反本法规定，销售的商品或者提供的服务不符合保障人身、财产安全的要求，实施虚假或者引人误解的商业宣传等不正当竞争行为，滥用市场支配地位，或者实施侵犯知识产权、侵害消费者权益等行为的，依照有关法律的规定处罚。\n#### 第八十六条 \n电子商务经营者有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。\n#### 第八十七条 \n依法负有电子商务监督管理职责的部门的工作人员，玩忽职守、滥用职权、徇私舞弊，或者泄露、出售或者非法向他人提供在履行职责中所知悉的个人信息、隐私和商业秘密的，依法追究法律责任。\n#### 第八十八条 \n违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。\n\n[中华人民共和国电子商务法.pdf](https://github.com/blusewang/blog/files/5779079/default.pdf)\n","source":"_posts/electronic-commerce-law.md","raw":"---\ntitle: 电子商务法\ndate: 2021-01-07 09:39:50\ntags: [电子商务法]\n---\n\n# 中华人民共和国电子商务法\n\n## 第一章 总 则\n#### 第一条 \n为了保障电子商务各方主体的合法权益，规范电子商务行为，维护市场秩序，促进电子商务持续健康发展，制定本法。\n#### 第二条 \n中华人民共和国境内的电子商务活动，适用本法。\n\n 本法所称电子商务，是指通过互联网等信息网络销售商品或者提供服务的经营活 动。\n\n 法律、行政法规对销售商品或者提供服务有规定的，适用其规定。金融类产品和 服务，利用信息网络提供新闻信息、音视频节目、出版以及文化产品等内容方面的服 务，不适用本法。\n#### 第三条 \n国家鼓励发展电子商务新业态，创新商业模式，促进电子商务技术研发 和推广应用，推进电子商务诚信体系建设，营造有利于电子商务创新发展的市场环境， 充分发挥电子商务在推动高质量发展、满足人民日益增长的美好生活需要、构建开放 型经济方面的重要作用。\n### 第四条 \n国家平等对待线上线下商务活动，促进线上线下融合发展，各级人民政府和有关部门不得采取歧视性的政策措施，不得滥用行政权力排除、限制市场竞争。\n\n#### 第五条\n电子商务经营者从事经营活动，应当遵循自愿、平等、公平、诚信的原则，遵守法律和商业道德，公平参与市场竞争，履行消费者权益保护、环境保护、知识产权保护、网络安全与个人信息保护等方面的义务，承担产品和服务质量责任，接受政府和社会的监督。\n\n#### 第六条\n国务院有关部门按照职责分工负责电子商务发展促进、监督管理等工作。县级以上地方各级人民政府可以根据本行政区域的实际情况，确定本行政区域内电子商务的部门职责划分。\n\n#### 第七条\n国家建立符合电子商务特点的协同管理体系，推动形成有关部门、电子商务行业组织、电子商务经营者、消费者等共同参与的电子商务市场治理体系。\n\n#### 第八条\n电子商务行业组织按照本组织章程开展行业自律，建立健全行业规范，推动行业诚信建设，监督、引导本行业经营者公平参与市场竞争。\n\n## 第二章 电子商务经营者\n### 第一节 一般规定\n#### 第九条 \n本法所称电子商务经营者，是指通过互联网等信息网络从事销售商品或者提供服务的经营活动的自然人、法人和非法人组织，包括电子商务平台经营者、平台内经营者以及通过自建网站、其他网络服务销售商品或者提供服务的电子商务经营者。\n\n 本法所称电子商务平台经营者，是指在电子商务中为交易双方或者多方提供网络经营场所、交易撮合、信息发布等服务，供交易双方或者多方独立开展交易活动的法人或者非法人组织。\n\n 本法所称平台内经营者，是指通过电子商务平台销售商品或者提供服务的电子商务经营者。\n####  第十条 \n电子商务经营者应当依法办理市场主体登记。但是，个人销售自产农副产品、家庭手工业产品，个人利用自己的技能从事依法无须取得许可的便民劳务活动和零星小额交易活动，以及依照法律、行政法规不需要进行登记的除外。\n####  第十一条 \n电子商务经营者应当依法履行纳税义务，并依法享受税收优惠。\n\n 依照前条规定不需要办理市场主体登记的电子商务经营者在首次纳税义务发生后，应当依照税收征收管理法律、行政法规的规定申请办理税务登记，并如实申报纳税。\n####  第十二条 \n电子商务经营者从事经营活动，依法需要取得相关行政许可的，应当依法取得行政许可。\n####  第十三条 \n电子商务经营者销售的商品或者提供的服务应当符合保障人身、财产安全的要求和环境保护要求，不得销售或者提供法律、行政法规禁止交易的商品或者服务。\n####  第十四条 \n电子商务经营者销售商品或者提供服务应当依法出具纸质发票或者电子发票等购货凭证或者服务单据。电子发票与纸质发票具有同等法律效力。\n####  第十五条 \n电子商务经营者应当在其首页显著位置，持续公示营业执照信息、与其经营业务有关的行政许可信息、属于依照本法第十条规定的不需要办理市场主体登记情形等信息，或者上述信息的链接标识。\n\n 前款规定的信息发生变更的，电子商务经营者应当及时更新公示信息。\n####  第十六条 \n电子商务经营者自行终止从事电子商务的，应当提前三十日在首页显著位置持续公示有关信息。\n####  第十七条 \n电子商务经营者应当全面、真实、准确、及时地披露商品或者服务信息，保障消费者的知情权和选择权。电子商务经营者不得以虚构交易、编造用户评价等方式进行虚假或者引人误解的商业宣传，欺骗、误导消费者。\n####  第十八条 \n电子商务经营者根据消费者的兴趣爱好、消费习惯等特征向其提供商品或者服务的搜索结果的，应当同时向该消费者提供不针对其个人特征的选项，尊重\n和平等保护消费者合法权益。\n\n 电子商务经营者向消费者发送广告的，应当遵守《中华人民共和国广告法》的有关规定。\n####  第十九条 \n电子商务经营者搭售商品或者服务，应当以显著方式提请消费者注意，不得将搭售商品或者服务作为默认同意的选项。\n####  第二十条 \n电子商务经营者应当按照承诺或者与消费者约定的方式、时限向消费者交付商品或者服务，并承担商品运输中的风险和责任。但是，消费者另行选择快递物流服务提供者的除外。\n####  第二十一条 \n电子商务经营者按照约定向消费者收取押金的，应当明示押金退还的方式、程序，不得对押金退还设置不合理条件。消费者申请退还押金，符合押金退还条件的，电子商务经营者应当及时退还。\n####  第二十二条 \n电子商务经营者因其技术优势、用户数量、对相关行业的控制能力以及其他经营者对该电子商务经营者在交易上的依赖程度等因素而具有市场支配地位的，不得滥用市场支配地位，排除、限制竞争。\n####  第二十三条 \n电子商务经营者收集、使用其用户的个人信息，应当遵守法律、行政法规有关个人信息保护的规定。\n####  第二十四条 \n电子商务经营者应当明示用户信息查询、更正、删除以及用户注销的方式、程序，不得对用户信息查询、更正、删除以及用户注销设置不合理条件。\n\n 电子商务经营者收到用户信息查询或者更正、删除的申请的，应当在核实身份后及时提供查询或者更正、删除用户信息。用户注销的，电子商务经营者应当立即删除该用户的信息；依照法律、行政法规的规定或者双方约定保存的，依照其规定。\n####  第二十五条 \n有关主管部门依照法律、行政法规的规定要求电子商务经营者提供有关电子商务数据信息的，电子商务经营者应当提供。有关主管部门应当采取必要措施保护电子商务经营者提供的数据信息的安全，并对其中的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。\n####  第二十六条 \n电子商务经营者从事跨境电子商务，应当遵守进出口监督管理的法律、行政法规和国家有关规定。\n\n### 第二节 电子商务平台经营者\n####  第二十七条 \n电子商务平台经营者应当要求申请进入平台销售商品或者提供服务的经营者提交其身份、地址、联系方式、行政许可等真实信息，进行核验、登记，建立登记档案，并定期核验更新。\n\n 电子商务平台经营者为进入平台销售商品或者提供服务的非经营用户提供服务，应当遵守本节有关规定。\n####  第二十八条 \n电子商务平台经营者应当按照规定向市场监督管理部门报送平台内经营者的身份信息，提示未办理市场主体登记的经营者依法办理登记，并配合市场监督管理部门，针对电子商务的特点，为应当办理市场主体登记的经营者办理登记提供便利。\n\n 电子商务平台经营者应当依照税收征收管理法律、行政法规的规定，向税务部门报送平台内经营者的身份信息和与纳税有关的信息，并应当提示依照本法第十条规定不需要办理市场主体登记的电子商务经营者依照本法第十一条第二款的规定办理税务登记。\n####  第二十九条 \n电子商务平台经营者发现平台内的商品或者服务信息存在违反本法第十二条、第十三条规定情形的，应当依法采取必要的处置措施，并向有关主管部门报告。\n####  第三十条 \n电子商务平台经营者应当采取技术措施和其他必要措施保证其网络安全、稳定运行，防范网络违法犯罪活动，有效应对网络安全事件，保障电子商务交易安全。\n\n 电子商务平台经营者应当制定网络安全事件应急预案，发生网络安全事件时，应当立即启动应急预案，采取相应的补救措施，并向有关主管部门报告。\n####  第三十一条 \n电子商务平台经营者应当记录、保存平台上发布的商品和服务信息、交易信息，并确保信息的完整性、保密性、可用性。商品和服务信息、交易信息保存时间自交易完成之日起不少于三年；法律、行政法规另有规定的，依照其规定。\n####  第三十二条 \n电子商务平台经营者应当遵循公开、公平、公正的原则，制定平台服务协议和交易规则，明确进入和退出平台、商品和服务质量保障、消费者权益保护、个人信息保护等方面的权利和义务。\n####  第三十三条 \n电子商务平台经营者应当在其首页显著位置持续公示平台服务协议和交易规则信息或者上述信息的链接标识，并保证经营者和消费者能够便利、完整地阅览和下载。\n####  第三十四条 \n电子商务平台经营者修改平台服务协议和交易规则，应当在其首页显著位置公开征求意见，采取合理措施确保有关各方能够及时充分表达意见。修改内容应当至少在实施前七日予以公示。\n\n 平台内经营者不接受修改内容，要求退出平台的，电子商务平台经营者不得阻止，并按照修改前的服务协议和交易规则承担相关责任。\n####  第三十五条 \n电子商务平台经营者不得利用服务协议、交易规则以及技术等手段，对平台内经营者在平台内的交易、交易价格以及与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用。\n####  第三十六条 \n电子商务平台经营者依据平台服务协议和交易规则对平台内经营者违反法律、法规的行为实施警示、暂停或者终止服务等措施的，应当及时公示。\n####  第三十七条 \n电子商务平台经营者在其平台上开展自营业务的，应当以显著方式区分标记自营业务和平台内经营者开展的业务，不得误导消费者。\n\n 电子商务平台经营者对其标记为自营的业务依法承担商品销售者或者服务提供者的民事责任。\n####  第三十八条 \n电子商务平台经营者知道或者应当知道平台内经营者销售的商品或者提供的服务不符合保障人身、财产安全的要求，或者有其他侵害消费者合法权益行为，未采取必要措施的，依法与该平台内经营者承担连带责任。\n\n 对关系消费者生命健康的商品或者服务，电子商务平台经营者对平台内经营者的资质资格未尽到审核义务，或者对消费者未尽到安全保障义务，造成消费者损害的，依法承担相应的责任。\n####  第三十九条 \n电子商务平台经营者应当建立健全信用评价制度，公示信用评价规则，为消费者提供对平台内销售的商品或者提供的服务进行评价的途径。\n\n 电子商务平台经营者不得删除消费者对其平台内销售的商品或者提供的服务的评价。\n####  第四十条 \n电子商务平台经营者应当根据商品或者服务的价格、销量、信用等以多种方式向消费者显示商品或者服务的搜索结果；对于竞价排名的商品或者服务，应当显著标明“广告”。\n####  第四十一条 \n电子商务平台经营者应当建立知识产权保护规则，与知识产权权利人加强合作，依法保护知识产权。\n####  第四十二条 \n知识产权权利人认为其知识产权受到侵害的，有权通知电子商务平台经营者采取删除、屏蔽、断开链接、终止交易和服务等必要措施。通知应当包括构成侵权的初步证据。\n\n 电子商务平台经营者接到通知后，应当及时采取必要措施，并将该通知转送平台内经营者；未及时采取必要措施的，对损害的扩大部分与平台内经营者承担连带责任。\n\n 因通知错误造成平台内经营者损害的，依法承担民事责任。恶意发出错误通知，造成平台内经营者损失的，加倍承担赔偿责任。\n#### 第四十三条 \n平台内经营者接到转送的通知后，可以向电子商务平台经营者提交不存在侵权行为的声明。声明应当包括不存在侵权行为的初步证据。\n\n 电子商务平台经营者接到声明后，应当将该声明转送发出通知的知识产权权利人，并告知其可以向有关主管部门投诉或者向人民法院起诉。电子商务平台经营者在转送声明到达知识产权权利人后十五日内，未收到权利人已经投诉或者起诉通知的，应当及时终止所采取的措施。\n\n#### 第四十四条\n电子商务平台经营者应当及时公示收到的本法第四十二条、第四十三条规定的通知、声明及处理结果。\n\n#### 第四十五条\n电子商务平台经营者知道或者应当知道平台内经营者侵犯知识产权的，应当采取删除、屏蔽、断开链接、终止交易和服务等必要措施；未采取必要措施的，与侵权人承担连带责任。\n####  第四十六条 \n除本法第九条第二款规定的服务外，电子商务平台经营者可以按照平台服务协议和交易规则，为经营者之间的电子商务提供仓储、物流、支付结算、交收等服务。电子商务平台经营者为经营者之间的电子商务提供服务，应当遵守法律、行政法规和国家有关规定，不得采取集中竞价、做市商等集中交易方式进行交易，不得进行标准化合约交易。\n## 第三章 电子商务合同的订立与履行\n#### 第四十七条 \n电子商务当事人订立和履行合同，适用本章和《中华人民共和国民法总则》《中华人民共和国合同法》《中华人民共和国电子签名法》等法律的规定。\n#### 第四十八条 \n电子商务当事人使用自动信息系统订立或者履行合同的行为对使用该系统的当事人具有法律效力。\n\n在电子商务中推定当事人具有相应的民事行为能力。但是，有相反证据足以推翻的除外。\n#### 第四十九条 \n电子商务经营者发布的商品或者服务信息符合要约条件的，用户选择该商品或者服务并提交订单成功，合同成立。当事人另有约定的，从其约定。电子商务经营者不得以格式条款等方式约定消费者支付价款后合同不成立；格式条款等含有该内容的，其内容无效。\n#### 第五十条 \n电子商务经营者应当清晰、全面、明确地告知用户订立合同的步骤、注意事项、下载方法等事项，并保证用户能够便利、完整地阅览和下载。电子商务经营者应当保证用户在提交订单前可以更正输入错误。\n#### 第五十一条 \n合同标的为交付商品并采用快递物流方式交付的，收货人签收时间为交付时间。合同标的为提供服务的，生成的电子凭证或者实物凭证中载明的时间为交付时间；前述凭证没有载明时间或者载明时间与实际提供服务时间不一致的，实际提供服务的时间为交付时间。\n\n合同标的为采用在线传输方式交付的，合同标的进入对方当事人指定的特定系统并且能够检索识别的时间为交付时间。\n\n合同当事人对交付方式、交付时间另有约定的，从其约定。\n#### 第五十二条 \n电子商务当事人可以约定采用快递物流方式交付商品。快递物流服务提供者为电子商务提供快递物流服务，应当遵守法律、行政法规，并应当符合承诺的服务规范和时限。快递物流服务提供者在交付商品时，应当提示收货人当面查验；交由他人代收的，应当经收货人同意。 快递物流服务提供者应当按照规定使用环保包装材料，实现包装材料的减量化和再利用。快递物流服务提供者在提供快递物流服务的同时，可以接受电子商务经营者的委托提供代收货款服务。\n#### 第五十三条 \n电子商务当事人可以约定采用电子支付方式支付价款。\n\n电子支付服务提供者为电子商务提供电子支付服务，应当遵守国家规定，告知用户电子支付服务的功能、使用方法、注意事项、相关风险和收费标准等事项，不得附加不合理交易条件。电子支付服务提供者应当确保电子支付指令的完整性、一致性、可跟踪稽核和不可篡改。\n\n电子支付服务提供者应当向用户免费提供对账服务以及最近三年的交易记录。\n#### 第五十四条 \n电子支付服务提供者提供电子支付服务不符合国家有关支付安全管理要求，造成用户损失的，应当承担赔偿责任。\n#### 第五十五条 \n用户在发出支付指令前，应当核对支付指令所包含的金额、收款人等完整信息。\n\n支付指令发生错误的，电子支付服务提供者应当及时查找原因，并采取相关措施予以纠正。造成用户损失的，电子支付服务提供者应当承担赔偿责任，但能够证明支付错误非自身原因造成的除外。\n#### 第五十六条 \n电子支付服务提供者完成电子支付后，应当及时准确地向用户提供符合约定方式的确认支付的信息。\n#### 第五十七条 \n用户应当妥善保管交易密码、电子签名数据等安全工具。用户发现安全工具遗失、被盗用或者未经授权的支付的，应当及时通知电子支付服务提供者。\n\n未经授权的支付造成的损失，由电子支付服务提供者承担；电子支付服务提供者能够证明未经授权的支付是因用户的过错造成的，不承担责任。\n\n电子支付服务提供者发现支付指令未经授权，或者收到用户支付指令未经授权的通知时，应当立即采取措施防止损失扩大。电子支付服务提供者未及时采取措施导致损失扩大的，对损失扩大部分承担责任。\n\n## 第四章 电子商务争议解决\n\n#### 第五十八条 \n国家鼓励电子商务平台经营者建立有利于电子商务发展和消费者权益保护的商品、服务质量担保机制。\n\n电子商务平台经营者与平台内经营者协议设立消费者权益保证金的，双方应当就消费者权益保证金的提取数额、管理、使用和退还办法等作出明确约定。\n\n消费者要求电子商务平台经营者承担先行赔偿责任以及电子商务平台经营者赔偿后向平台内经营者的追偿，适用《中华人民共和国消费者权益保护法》的有关规定。\n#### 第五十九条 \n电子商务经营者应当建立便捷、有效的投诉、举报机制，公开投诉、举报方式等信息，及时受理并处理投诉、举报。\n#### 第六十条 \n电子商务争议可以通过协商和解，请求消费者组织、行业协会或者其他依法成立的调解组织调解，向有关部门投诉，提请仲裁，或者提起诉讼等方式解决。\n#### 第六十一条 \n消费者在电子商务平台购买商品或者接受服务，与平台内经营者发生争议时，电子商务平台经营者应当积极协助消费者维护合法权益。\n#### 第六十二条 \n在电子商务争议处理中，电子商务经营者应当提供原始合同和交易记录。因电子商务经营者丢失、伪造、篡改、销毁、隐匿或者拒绝提供前述资料，致使人民法院、仲裁机构或者有关机关无法查明事实的，电子商务经营者应当承担相应的法律责任。\n#### 第六十三条 \n电子商务平台经营者可以建立争议在线解决机制，制定并公示争议解决规则，根据自愿原则，公平、公正地解决当事人的争议。\n## 第五章 电子商务促进\n#### 第六十四条 \n国务院和省、自治区、直辖市人民政府应当将电子商务发展纳入国民经济和社会发展规划，制定科学合理的产业政策，促进电子商务创新发展。\n#### 第六十五条 \n国务院和县级以上地方人民政府及其有关部门应当采取措施，支持、推动绿色包装、仓储、运输，促进电子商务绿色发展。\n#### 第六十六条 \n国家推动电子商务基础设施和物流网络建设，完善电子商务统计制度，加强电子商务标准体系建设。\n#### 第六十七条 \n国家推动电子商务在国民经济各个领域的应用，支持电子商务与各产业融合发展。\n#### 第六十八条 \n国家促进农业生产、加工、流通等环节的互联网技术应用，鼓励各类社会资源加强合作，促进农村电子商务发展，发挥电子商务在精准扶贫中的作用。\n#### 第六十九条 \n国家维护电子商务交易安全，保护电子商务用户信息，鼓励电子商务数据开发应用，保障电子商务数据依法有序自由流动。国家采取措施推动建立公共数据共享机制，促进电子商务经营者依法利用公共数据。\n#### 第七十条 \n国家支持依法设立的信用评价机构开展电子商务信用评价，向社会提供电子商务信用评价服务。\n#### 第七十一条 \n国家促进跨境电子商务发展，建立健全适应跨境电子商务特点的海关、税收、进出境检验检疫、支付结算等管理制度，提高跨境电子商务各环节便利化水平，支持跨境电子商务平台经营者等为跨境电子商务提供仓储物流、报关、报检等服务。\n\n国家支持小型微型企业从事跨境电子商务。\n#### 第七十二条 \n国家进出口管理部门应当推进跨境电子商务海关申报、纳税、检验检疫等环节的综合服务和监管体系建设，优化监管流程，推动实现信息共享、监管互认、执法互助，提高跨境电子商务服务和监管效率。跨境电子商务经营者可以凭电子单证向国家进出口管理部门办理有关手续。\n#### 第七十三条 \n国家推动建立与不同国家、地区之间跨境电子商务的交流合作，参与电子商务国际规则的制定，促进电子签名、电子身份等国际互认。国家推动建立与不同国家、地区之间的跨境电子商务争议解决机制。\n## 第六章 法律责任\n#### 第七十四条 \n电子商务经营者销售商品或者提供服务，不履行合同义务或者履行合同义务不符合约定，或者造成他人损害的，依法承担民事责任。\n#### 第七十五条 \n电子商务经营者违反本法第十二条、第十三条规定，未取得相关行政许可从事经营活动，或者销售、提供法律、行政法规禁止交易的商品、服务，或者不履行本法第二十五条规定的信息提供义务，电子商务平台经营者违反本法第四十六条规定，采取集中交易方式进行交易，或者进行标准化合约交易的，依照有关法律、行政法规的规定处罚。\n#### 第七十六条 \n电子商务经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处一万元以下的罚款，对其中的电子商务平台经营者，依照本法第八十一条第一款的规定处罚：\n\n- （一）未在首页显著位置公示营业执照信息、行政许可信息、属于不需要办理市场主体登记情形等信息,或者上述信息的链接标识的；\n- （二）未在首页显著位置持续公示终止电子商务的有关信息的；\n- （三）未明示用户信息查询、更正、删除以及用户注销的方式、程序，或者对用户信息查询、更正、删除以及用户注销设置不合理条件的。\n  \n电子商务平台经营者对违反前款规定的平台内经营者未采取必要措施的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款。\n#### 第七十七条 \n电子商务经营者违反本法第十八条第一款规定提供搜索结果，或者违反本法第十九条规定搭售商品、服务的，由市场监督管理部门责令限期改正，没收\n违法所得，可以并处五万元以上二十万元以下的罚款；情节严重的，并处二十万元以上五十万元以下的罚款。\n#### 第七十八条 \n电子商务经营者违反本法第二十一条规定，未向消费者明示押金退还的方式、程序，对押金退还设置不合理条件，或者不及时退还押金的，由有关主管部门责令限期改正，可以处五万元以上二十万元以下的罚款；情节严重的，处二十万元以上五十万元以下的罚款。\n#### 第七十九条 \n电子商务经营者违反法律、行政法规有关个人信息保护的规定，或者不履行本法第三十条和有关法律、行政法规规定的网络安全保障义务的，依照《中华人民共和国网络安全法》等法律、行政法规的规定处罚。\n#### 第八十条 \n电子商务平台经营者有下列行为之一的，由有关主管部门责令限期改正；逾期不改正的，处二万元以上十万元以下的罚款；情节严重的，责令停业整顿， 并处十万元以上五十万元以下的罚款：\n\n- （一）不履行本法第二十七条规定的核验、登记义务的；\n- （二）不按照本法第二十八条规定向市场监督管理部门、税务部门报送有关信息 的； \n- （三）不按照本法第二十九条规定对违法情形采取必要的处置措施，或者未向有关主管部门报告的；\n- （四）不履行本法第三十一条规定的商品和服务信息、交易信息保存义务的。\n\n法律、行政法规对前款规定的违法行为的处罚另有规定的，依照其规定。\n#### 第八十一条 \n电子商务平台经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款；情节严重的，处十万元以上五十万元以下的罚款：\n\n- （一）未在首页显著位置持续公示平台服务协议、交易规则信息或者上述信息的 链接标识的；\n- （二）修改交易规则未在首页显著位置公开征求意见，未按照规定的时间提前公示修改内容，或者阻止平台内经营者退出的；\n- （三）未以显著方式区分标记自营业务和平台内经营者开展的业务的； \n- （四）未为消费者提供对平台内销售的商品或者提供的服务进行评价的途径，或者擅自删除消费者的评价的。\n  \n电子商务平台经营者违反本法第四十条规定，对竞价排名的商品或者服务未显著标明“广告”的，依照《中华人民共和国广告法》的规定处罚。\n#### 第八十二条 \n电子商务平台经营者违反本法第三十五条规定，对平台内经营者在平台内的交易、交易价格或者与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下 的罚款。\n#### 第八十三条 \n电子商务平台经营者违反本法第三十八条规定，对平台内经营者侵害消费者合法权益行为未采取必要措施，或者对平台内经营者未尽到资质资格审核义务，或者对消费者未尽到安全保障义务的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，责令停业整顿，并处五十万元以上二百万元以下的罚款。\n#### 第八十四条 \n电子商务平台经营者违反本法第四十二条、第四十五条规定，对平台内经营者实施侵犯知识产权行为未依法采取必要措施的，由有关知识产权行政部门责令限期改正；逾期不改正的，处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下的罚款。\n#### 第八十五条 \n电子商务经营者违反本法规定，销售的商品或者提供的服务不符合保障人身、财产安全的要求，实施虚假或者引人误解的商业宣传等不正当竞争行为，滥用市场支配地位，或者实施侵犯知识产权、侵害消费者权益等行为的，依照有关法律的规定处罚。\n#### 第八十六条 \n电子商务经营者有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。\n#### 第八十七条 \n依法负有电子商务监督管理职责的部门的工作人员，玩忽职守、滥用职权、徇私舞弊，或者泄露、出售或者非法向他人提供在履行职责中所知悉的个人信息、隐私和商业秘密的，依法追究法律责任。\n#### 第八十八条 \n违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。\n\n[中华人民共和国电子商务法.pdf](https://github.com/blusewang/blog/files/5779079/default.pdf)\n","slug":"electronic-commerce-law","published":1,"updated":"2021-01-07T04:28:58.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl8zw5tj006h2aah16be3ma4","content":"<h1 id=\"中华人民共和国电子商务法\"><a href=\"#中华人民共和国电子商务法\" class=\"headerlink\" title=\"中华人民共和国电子商务法\"></a>中华人民共和国电子商务法</h1><h2 id=\"第一章-总-则\"><a href=\"#第一章-总-则\" class=\"headerlink\" title=\"第一章 总 则\"></a>第一章 总 则</h2><h4 id=\"第一条\"><a href=\"#第一条\" class=\"headerlink\" title=\"第一条\"></a>第一条</h4><p>为了保障电子商务各方主体的合法权益，规范电子商务行为，维护市场秩序，促进电子商务持续健康发展，制定本法。</p>\n<h4 id=\"第二条\"><a href=\"#第二条\" class=\"headerlink\" title=\"第二条\"></a>第二条</h4><p>中华人民共和国境内的电子商务活动，适用本法。</p>\n<p> 本法所称电子商务，是指通过互联网等信息网络销售商品或者提供服务的经营活 动。</p>\n<p> 法律、行政法规对销售商品或者提供服务有规定的，适用其规定。金融类产品和 服务，利用信息网络提供新闻信息、音视频节目、出版以及文化产品等内容方面的服 务，不适用本法。</p>\n<h4 id=\"第三条\"><a href=\"#第三条\" class=\"headerlink\" title=\"第三条\"></a>第三条</h4><p>国家鼓励发展电子商务新业态，创新商业模式，促进电子商务技术研发 和推广应用，推进电子商务诚信体系建设，营造有利于电子商务创新发展的市场环境， 充分发挥电子商务在推动高质量发展、满足人民日益增长的美好生活需要、构建开放 型经济方面的重要作用。</p>\n<h3 id=\"第四条\"><a href=\"#第四条\" class=\"headerlink\" title=\"第四条\"></a>第四条</h3><p>国家平等对待线上线下商务活动，促进线上线下融合发展，各级人民政府和有关部门不得采取歧视性的政策措施，不得滥用行政权力排除、限制市场竞争。</p>\n<h4 id=\"第五条\"><a href=\"#第五条\" class=\"headerlink\" title=\"第五条\"></a>第五条</h4><p>电子商务经营者从事经营活动，应当遵循自愿、平等、公平、诚信的原则，遵守法律和商业道德，公平参与市场竞争，履行消费者权益保护、环境保护、知识产权保护、网络安全与个人信息保护等方面的义务，承担产品和服务质量责任，接受政府和社会的监督。</p>\n<h4 id=\"第六条\"><a href=\"#第六条\" class=\"headerlink\" title=\"第六条\"></a>第六条</h4><p>国务院有关部门按照职责分工负责电子商务发展促进、监督管理等工作。县级以上地方各级人民政府可以根据本行政区域的实际情况，确定本行政区域内电子商务的部门职责划分。</p>\n<h4 id=\"第七条\"><a href=\"#第七条\" class=\"headerlink\" title=\"第七条\"></a>第七条</h4><p>国家建立符合电子商务特点的协同管理体系，推动形成有关部门、电子商务行业组织、电子商务经营者、消费者等共同参与的电子商务市场治理体系。</p>\n<h4 id=\"第八条\"><a href=\"#第八条\" class=\"headerlink\" title=\"第八条\"></a>第八条</h4><p>电子商务行业组织按照本组织章程开展行业自律，建立健全行业规范，推动行业诚信建设，监督、引导本行业经营者公平参与市场竞争。</p>\n<h2 id=\"第二章-电子商务经营者\"><a href=\"#第二章-电子商务经营者\" class=\"headerlink\" title=\"第二章 电子商务经营者\"></a>第二章 电子商务经营者</h2><h3 id=\"第一节-一般规定\"><a href=\"#第一节-一般规定\" class=\"headerlink\" title=\"第一节 一般规定\"></a>第一节 一般规定</h3><h4 id=\"第九条\"><a href=\"#第九条\" class=\"headerlink\" title=\"第九条\"></a>第九条</h4><p>本法所称电子商务经营者，是指通过互联网等信息网络从事销售商品或者提供服务的经营活动的自然人、法人和非法人组织，包括电子商务平台经营者、平台内经营者以及通过自建网站、其他网络服务销售商品或者提供服务的电子商务经营者。</p>\n<p> 本法所称电子商务平台经营者，是指在电子商务中为交易双方或者多方提供网络经营场所、交易撮合、信息发布等服务，供交易双方或者多方独立开展交易活动的法人或者非法人组织。</p>\n<p> 本法所称平台内经营者，是指通过电子商务平台销售商品或者提供服务的电子商务经营者。</p>\n<h4 id=\"第十条\"><a href=\"#第十条\" class=\"headerlink\" title=\"第十条\"></a>第十条</h4><p>电子商务经营者应当依法办理市场主体登记。但是，个人销售自产农副产品、家庭手工业产品，个人利用自己的技能从事依法无须取得许可的便民劳务活动和零星小额交易活动，以及依照法律、行政法规不需要进行登记的除外。</p>\n<h4 id=\"第十一条\"><a href=\"#第十一条\" class=\"headerlink\" title=\"第十一条\"></a>第十一条</h4><p>电子商务经营者应当依法履行纳税义务，并依法享受税收优惠。</p>\n<p> 依照前条规定不需要办理市场主体登记的电子商务经营者在首次纳税义务发生后，应当依照税收征收管理法律、行政法规的规定申请办理税务登记，并如实申报纳税。</p>\n<h4 id=\"第十二条\"><a href=\"#第十二条\" class=\"headerlink\" title=\"第十二条\"></a>第十二条</h4><p>电子商务经营者从事经营活动，依法需要取得相关行政许可的，应当依法取得行政许可。</p>\n<h4 id=\"第十三条\"><a href=\"#第十三条\" class=\"headerlink\" title=\"第十三条\"></a>第十三条</h4><p>电子商务经营者销售的商品或者提供的服务应当符合保障人身、财产安全的要求和环境保护要求，不得销售或者提供法律、行政法规禁止交易的商品或者服务。</p>\n<h4 id=\"第十四条\"><a href=\"#第十四条\" class=\"headerlink\" title=\"第十四条\"></a>第十四条</h4><p>电子商务经营者销售商品或者提供服务应当依法出具纸质发票或者电子发票等购货凭证或者服务单据。电子发票与纸质发票具有同等法律效力。</p>\n<h4 id=\"第十五条\"><a href=\"#第十五条\" class=\"headerlink\" title=\"第十五条\"></a>第十五条</h4><p>电子商务经营者应当在其首页显著位置，持续公示营业执照信息、与其经营业务有关的行政许可信息、属于依照本法第十条规定的不需要办理市场主体登记情形等信息，或者上述信息的链接标识。</p>\n<p> 前款规定的信息发生变更的，电子商务经营者应当及时更新公示信息。</p>\n<h4 id=\"第十六条\"><a href=\"#第十六条\" class=\"headerlink\" title=\"第十六条\"></a>第十六条</h4><p>电子商务经营者自行终止从事电子商务的，应当提前三十日在首页显著位置持续公示有关信息。</p>\n<h4 id=\"第十七条\"><a href=\"#第十七条\" class=\"headerlink\" title=\"第十七条\"></a>第十七条</h4><p>电子商务经营者应当全面、真实、准确、及时地披露商品或者服务信息，保障消费者的知情权和选择权。电子商务经营者不得以虚构交易、编造用户评价等方式进行虚假或者引人误解的商业宣传，欺骗、误导消费者。</p>\n<h4 id=\"第十八条\"><a href=\"#第十八条\" class=\"headerlink\" title=\"第十八条\"></a>第十八条</h4><p>电子商务经营者根据消费者的兴趣爱好、消费习惯等特征向其提供商品或者服务的搜索结果的，应当同时向该消费者提供不针对其个人特征的选项，尊重<br>和平等保护消费者合法权益。</p>\n<p> 电子商务经营者向消费者发送广告的，应当遵守《中华人民共和国广告法》的有关规定。</p>\n<h4 id=\"第十九条\"><a href=\"#第十九条\" class=\"headerlink\" title=\"第十九条\"></a>第十九条</h4><p>电子商务经营者搭售商品或者服务，应当以显著方式提请消费者注意，不得将搭售商品或者服务作为默认同意的选项。</p>\n<h4 id=\"第二十条\"><a href=\"#第二十条\" class=\"headerlink\" title=\"第二十条\"></a>第二十条</h4><p>电子商务经营者应当按照承诺或者与消费者约定的方式、时限向消费者交付商品或者服务，并承担商品运输中的风险和责任。但是，消费者另行选择快递物流服务提供者的除外。</p>\n<h4 id=\"第二十一条\"><a href=\"#第二十一条\" class=\"headerlink\" title=\"第二十一条\"></a>第二十一条</h4><p>电子商务经营者按照约定向消费者收取押金的，应当明示押金退还的方式、程序，不得对押金退还设置不合理条件。消费者申请退还押金，符合押金退还条件的，电子商务经营者应当及时退还。</p>\n<h4 id=\"第二十二条\"><a href=\"#第二十二条\" class=\"headerlink\" title=\"第二十二条\"></a>第二十二条</h4><p>电子商务经营者因其技术优势、用户数量、对相关行业的控制能力以及其他经营者对该电子商务经营者在交易上的依赖程度等因素而具有市场支配地位的，不得滥用市场支配地位，排除、限制竞争。</p>\n<h4 id=\"第二十三条\"><a href=\"#第二十三条\" class=\"headerlink\" title=\"第二十三条\"></a>第二十三条</h4><p>电子商务经营者收集、使用其用户的个人信息，应当遵守法律、行政法规有关个人信息保护的规定。</p>\n<h4 id=\"第二十四条\"><a href=\"#第二十四条\" class=\"headerlink\" title=\"第二十四条\"></a>第二十四条</h4><p>电子商务经营者应当明示用户信息查询、更正、删除以及用户注销的方式、程序，不得对用户信息查询、更正、删除以及用户注销设置不合理条件。</p>\n<p> 电子商务经营者收到用户信息查询或者更正、删除的申请的，应当在核实身份后及时提供查询或者更正、删除用户信息。用户注销的，电子商务经营者应当立即删除该用户的信息；依照法律、行政法规的规定或者双方约定保存的，依照其规定。</p>\n<h4 id=\"第二十五条\"><a href=\"#第二十五条\" class=\"headerlink\" title=\"第二十五条\"></a>第二十五条</h4><p>有关主管部门依照法律、行政法规的规定要求电子商务经营者提供有关电子商务数据信息的，电子商务经营者应当提供。有关主管部门应当采取必要措施保护电子商务经营者提供的数据信息的安全，并对其中的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p>\n<h4 id=\"第二十六条\"><a href=\"#第二十六条\" class=\"headerlink\" title=\"第二十六条\"></a>第二十六条</h4><p>电子商务经营者从事跨境电子商务，应当遵守进出口监督管理的法律、行政法规和国家有关规定。</p>\n<h3 id=\"第二节-电子商务平台经营者\"><a href=\"#第二节-电子商务平台经营者\" class=\"headerlink\" title=\"第二节 电子商务平台经营者\"></a>第二节 电子商务平台经营者</h3><h4 id=\"第二十七条\"><a href=\"#第二十七条\" class=\"headerlink\" title=\"第二十七条\"></a>第二十七条</h4><p>电子商务平台经营者应当要求申请进入平台销售商品或者提供服务的经营者提交其身份、地址、联系方式、行政许可等真实信息，进行核验、登记，建立登记档案，并定期核验更新。</p>\n<p> 电子商务平台经营者为进入平台销售商品或者提供服务的非经营用户提供服务，应当遵守本节有关规定。</p>\n<h4 id=\"第二十八条\"><a href=\"#第二十八条\" class=\"headerlink\" title=\"第二十八条\"></a>第二十八条</h4><p>电子商务平台经营者应当按照规定向市场监督管理部门报送平台内经营者的身份信息，提示未办理市场主体登记的经营者依法办理登记，并配合市场监督管理部门，针对电子商务的特点，为应当办理市场主体登记的经营者办理登记提供便利。</p>\n<p> 电子商务平台经营者应当依照税收征收管理法律、行政法规的规定，向税务部门报送平台内经营者的身份信息和与纳税有关的信息，并应当提示依照本法第十条规定不需要办理市场主体登记的电子商务经营者依照本法第十一条第二款的规定办理税务登记。</p>\n<h4 id=\"第二十九条\"><a href=\"#第二十九条\" class=\"headerlink\" title=\"第二十九条\"></a>第二十九条</h4><p>电子商务平台经营者发现平台内的商品或者服务信息存在违反本法第十二条、第十三条规定情形的，应当依法采取必要的处置措施，并向有关主管部门报告。</p>\n<h4 id=\"第三十条\"><a href=\"#第三十条\" class=\"headerlink\" title=\"第三十条\"></a>第三十条</h4><p>电子商务平台经营者应当采取技术措施和其他必要措施保证其网络安全、稳定运行，防范网络违法犯罪活动，有效应对网络安全事件，保障电子商务交易安全。</p>\n<p> 电子商务平台经营者应当制定网络安全事件应急预案，发生网络安全事件时，应当立即启动应急预案，采取相应的补救措施，并向有关主管部门报告。</p>\n<h4 id=\"第三十一条\"><a href=\"#第三十一条\" class=\"headerlink\" title=\"第三十一条\"></a>第三十一条</h4><p>电子商务平台经营者应当记录、保存平台上发布的商品和服务信息、交易信息，并确保信息的完整性、保密性、可用性。商品和服务信息、交易信息保存时间自交易完成之日起不少于三年；法律、行政法规另有规定的，依照其规定。</p>\n<h4 id=\"第三十二条\"><a href=\"#第三十二条\" class=\"headerlink\" title=\"第三十二条\"></a>第三十二条</h4><p>电子商务平台经营者应当遵循公开、公平、公正的原则，制定平台服务协议和交易规则，明确进入和退出平台、商品和服务质量保障、消费者权益保护、个人信息保护等方面的权利和义务。</p>\n<h4 id=\"第三十三条\"><a href=\"#第三十三条\" class=\"headerlink\" title=\"第三十三条\"></a>第三十三条</h4><p>电子商务平台经营者应当在其首页显著位置持续公示平台服务协议和交易规则信息或者上述信息的链接标识，并保证经营者和消费者能够便利、完整地阅览和下载。</p>\n<h4 id=\"第三十四条\"><a href=\"#第三十四条\" class=\"headerlink\" title=\"第三十四条\"></a>第三十四条</h4><p>电子商务平台经营者修改平台服务协议和交易规则，应当在其首页显著位置公开征求意见，采取合理措施确保有关各方能够及时充分表达意见。修改内容应当至少在实施前七日予以公示。</p>\n<p> 平台内经营者不接受修改内容，要求退出平台的，电子商务平台经营者不得阻止，并按照修改前的服务协议和交易规则承担相关责任。</p>\n<h4 id=\"第三十五条\"><a href=\"#第三十五条\" class=\"headerlink\" title=\"第三十五条\"></a>第三十五条</h4><p>电子商务平台经营者不得利用服务协议、交易规则以及技术等手段，对平台内经营者在平台内的交易、交易价格以及与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用。</p>\n<h4 id=\"第三十六条\"><a href=\"#第三十六条\" class=\"headerlink\" title=\"第三十六条\"></a>第三十六条</h4><p>电子商务平台经营者依据平台服务协议和交易规则对平台内经营者违反法律、法规的行为实施警示、暂停或者终止服务等措施的，应当及时公示。</p>\n<h4 id=\"第三十七条\"><a href=\"#第三十七条\" class=\"headerlink\" title=\"第三十七条\"></a>第三十七条</h4><p>电子商务平台经营者在其平台上开展自营业务的，应当以显著方式区分标记自营业务和平台内经营者开展的业务，不得误导消费者。</p>\n<p> 电子商务平台经营者对其标记为自营的业务依法承担商品销售者或者服务提供者的民事责任。</p>\n<h4 id=\"第三十八条\"><a href=\"#第三十八条\" class=\"headerlink\" title=\"第三十八条\"></a>第三十八条</h4><p>电子商务平台经营者知道或者应当知道平台内经营者销售的商品或者提供的服务不符合保障人身、财产安全的要求，或者有其他侵害消费者合法权益行为，未采取必要措施的，依法与该平台内经营者承担连带责任。</p>\n<p> 对关系消费者生命健康的商品或者服务，电子商务平台经营者对平台内经营者的资质资格未尽到审核义务，或者对消费者未尽到安全保障义务，造成消费者损害的，依法承担相应的责任。</p>\n<h4 id=\"第三十九条\"><a href=\"#第三十九条\" class=\"headerlink\" title=\"第三十九条\"></a>第三十九条</h4><p>电子商务平台经营者应当建立健全信用评价制度，公示信用评价规则，为消费者提供对平台内销售的商品或者提供的服务进行评价的途径。</p>\n<p> 电子商务平台经营者不得删除消费者对其平台内销售的商品或者提供的服务的评价。</p>\n<h4 id=\"第四十条\"><a href=\"#第四十条\" class=\"headerlink\" title=\"第四十条\"></a>第四十条</h4><p>电子商务平台经营者应当根据商品或者服务的价格、销量、信用等以多种方式向消费者显示商品或者服务的搜索结果；对于竞价排名的商品或者服务，应当显著标明“广告”。</p>\n<h4 id=\"第四十一条\"><a href=\"#第四十一条\" class=\"headerlink\" title=\"第四十一条\"></a>第四十一条</h4><p>电子商务平台经营者应当建立知识产权保护规则，与知识产权权利人加强合作，依法保护知识产权。</p>\n<h4 id=\"第四十二条\"><a href=\"#第四十二条\" class=\"headerlink\" title=\"第四十二条\"></a>第四十二条</h4><p>知识产权权利人认为其知识产权受到侵害的，有权通知电子商务平台经营者采取删除、屏蔽、断开链接、终止交易和服务等必要措施。通知应当包括构成侵权的初步证据。</p>\n<p> 电子商务平台经营者接到通知后，应当及时采取必要措施，并将该通知转送平台内经营者；未及时采取必要措施的，对损害的扩大部分与平台内经营者承担连带责任。</p>\n<p> 因通知错误造成平台内经营者损害的，依法承担民事责任。恶意发出错误通知，造成平台内经营者损失的，加倍承担赔偿责任。</p>\n<h4 id=\"第四十三条\"><a href=\"#第四十三条\" class=\"headerlink\" title=\"第四十三条\"></a>第四十三条</h4><p>平台内经营者接到转送的通知后，可以向电子商务平台经营者提交不存在侵权行为的声明。声明应当包括不存在侵权行为的初步证据。</p>\n<p> 电子商务平台经营者接到声明后，应当将该声明转送发出通知的知识产权权利人，并告知其可以向有关主管部门投诉或者向人民法院起诉。电子商务平台经营者在转送声明到达知识产权权利人后十五日内，未收到权利人已经投诉或者起诉通知的，应当及时终止所采取的措施。</p>\n<h4 id=\"第四十四条\"><a href=\"#第四十四条\" class=\"headerlink\" title=\"第四十四条\"></a>第四十四条</h4><p>电子商务平台经营者应当及时公示收到的本法第四十二条、第四十三条规定的通知、声明及处理结果。</p>\n<h4 id=\"第四十五条\"><a href=\"#第四十五条\" class=\"headerlink\" title=\"第四十五条\"></a>第四十五条</h4><p>电子商务平台经营者知道或者应当知道平台内经营者侵犯知识产权的，应当采取删除、屏蔽、断开链接、终止交易和服务等必要措施；未采取必要措施的，与侵权人承担连带责任。</p>\n<h4 id=\"第四十六条\"><a href=\"#第四十六条\" class=\"headerlink\" title=\"第四十六条\"></a>第四十六条</h4><p>除本法第九条第二款规定的服务外，电子商务平台经营者可以按照平台服务协议和交易规则，为经营者之间的电子商务提供仓储、物流、支付结算、交收等服务。电子商务平台经营者为经营者之间的电子商务提供服务，应当遵守法律、行政法规和国家有关规定，不得采取集中竞价、做市商等集中交易方式进行交易，不得进行标准化合约交易。</p>\n<h2 id=\"第三章-电子商务合同的订立与履行\"><a href=\"#第三章-电子商务合同的订立与履行\" class=\"headerlink\" title=\"第三章 电子商务合同的订立与履行\"></a>第三章 电子商务合同的订立与履行</h2><h4 id=\"第四十七条\"><a href=\"#第四十七条\" class=\"headerlink\" title=\"第四十七条\"></a>第四十七条</h4><p>电子商务当事人订立和履行合同，适用本章和《中华人民共和国民法总则》《中华人民共和国合同法》《中华人民共和国电子签名法》等法律的规定。</p>\n<h4 id=\"第四十八条\"><a href=\"#第四十八条\" class=\"headerlink\" title=\"第四十八条\"></a>第四十八条</h4><p>电子商务当事人使用自动信息系统订立或者履行合同的行为对使用该系统的当事人具有法律效力。</p>\n<p>在电子商务中推定当事人具有相应的民事行为能力。但是，有相反证据足以推翻的除外。</p>\n<h4 id=\"第四十九条\"><a href=\"#第四十九条\" class=\"headerlink\" title=\"第四十九条\"></a>第四十九条</h4><p>电子商务经营者发布的商品或者服务信息符合要约条件的，用户选择该商品或者服务并提交订单成功，合同成立。当事人另有约定的，从其约定。电子商务经营者不得以格式条款等方式约定消费者支付价款后合同不成立；格式条款等含有该内容的，其内容无效。</p>\n<h4 id=\"第五十条\"><a href=\"#第五十条\" class=\"headerlink\" title=\"第五十条\"></a>第五十条</h4><p>电子商务经营者应当清晰、全面、明确地告知用户订立合同的步骤、注意事项、下载方法等事项，并保证用户能够便利、完整地阅览和下载。电子商务经营者应当保证用户在提交订单前可以更正输入错误。</p>\n<h4 id=\"第五十一条\"><a href=\"#第五十一条\" class=\"headerlink\" title=\"第五十一条\"></a>第五十一条</h4><p>合同标的为交付商品并采用快递物流方式交付的，收货人签收时间为交付时间。合同标的为提供服务的，生成的电子凭证或者实物凭证中载明的时间为交付时间；前述凭证没有载明时间或者载明时间与实际提供服务时间不一致的，实际提供服务的时间为交付时间。</p>\n<p>合同标的为采用在线传输方式交付的，合同标的进入对方当事人指定的特定系统并且能够检索识别的时间为交付时间。</p>\n<p>合同当事人对交付方式、交付时间另有约定的，从其约定。</p>\n<h4 id=\"第五十二条\"><a href=\"#第五十二条\" class=\"headerlink\" title=\"第五十二条\"></a>第五十二条</h4><p>电子商务当事人可以约定采用快递物流方式交付商品。快递物流服务提供者为电子商务提供快递物流服务，应当遵守法律、行政法规，并应当符合承诺的服务规范和时限。快递物流服务提供者在交付商品时，应当提示收货人当面查验；交由他人代收的，应当经收货人同意。 快递物流服务提供者应当按照规定使用环保包装材料，实现包装材料的减量化和再利用。快递物流服务提供者在提供快递物流服务的同时，可以接受电子商务经营者的委托提供代收货款服务。</p>\n<h4 id=\"第五十三条\"><a href=\"#第五十三条\" class=\"headerlink\" title=\"第五十三条\"></a>第五十三条</h4><p>电子商务当事人可以约定采用电子支付方式支付价款。</p>\n<p>电子支付服务提供者为电子商务提供电子支付服务，应当遵守国家规定，告知用户电子支付服务的功能、使用方法、注意事项、相关风险和收费标准等事项，不得附加不合理交易条件。电子支付服务提供者应当确保电子支付指令的完整性、一致性、可跟踪稽核和不可篡改。</p>\n<p>电子支付服务提供者应当向用户免费提供对账服务以及最近三年的交易记录。</p>\n<h4 id=\"第五十四条\"><a href=\"#第五十四条\" class=\"headerlink\" title=\"第五十四条\"></a>第五十四条</h4><p>电子支付服务提供者提供电子支付服务不符合国家有关支付安全管理要求，造成用户损失的，应当承担赔偿责任。</p>\n<h4 id=\"第五十五条\"><a href=\"#第五十五条\" class=\"headerlink\" title=\"第五十五条\"></a>第五十五条</h4><p>用户在发出支付指令前，应当核对支付指令所包含的金额、收款人等完整信息。</p>\n<p>支付指令发生错误的，电子支付服务提供者应当及时查找原因，并采取相关措施予以纠正。造成用户损失的，电子支付服务提供者应当承担赔偿责任，但能够证明支付错误非自身原因造成的除外。</p>\n<h4 id=\"第五十六条\"><a href=\"#第五十六条\" class=\"headerlink\" title=\"第五十六条\"></a>第五十六条</h4><p>电子支付服务提供者完成电子支付后，应当及时准确地向用户提供符合约定方式的确认支付的信息。</p>\n<h4 id=\"第五十七条\"><a href=\"#第五十七条\" class=\"headerlink\" title=\"第五十七条\"></a>第五十七条</h4><p>用户应当妥善保管交易密码、电子签名数据等安全工具。用户发现安全工具遗失、被盗用或者未经授权的支付的，应当及时通知电子支付服务提供者。</p>\n<p>未经授权的支付造成的损失，由电子支付服务提供者承担；电子支付服务提供者能够证明未经授权的支付是因用户的过错造成的，不承担责任。</p>\n<p>电子支付服务提供者发现支付指令未经授权，或者收到用户支付指令未经授权的通知时，应当立即采取措施防止损失扩大。电子支付服务提供者未及时采取措施导致损失扩大的，对损失扩大部分承担责任。</p>\n<h2 id=\"第四章-电子商务争议解决\"><a href=\"#第四章-电子商务争议解决\" class=\"headerlink\" title=\"第四章 电子商务争议解决\"></a>第四章 电子商务争议解决</h2><h4 id=\"第五十八条\"><a href=\"#第五十八条\" class=\"headerlink\" title=\"第五十八条\"></a>第五十八条</h4><p>国家鼓励电子商务平台经营者建立有利于电子商务发展和消费者权益保护的商品、服务质量担保机制。</p>\n<p>电子商务平台经营者与平台内经营者协议设立消费者权益保证金的，双方应当就消费者权益保证金的提取数额、管理、使用和退还办法等作出明确约定。</p>\n<p>消费者要求电子商务平台经营者承担先行赔偿责任以及电子商务平台经营者赔偿后向平台内经营者的追偿，适用《中华人民共和国消费者权益保护法》的有关规定。</p>\n<h4 id=\"第五十九条\"><a href=\"#第五十九条\" class=\"headerlink\" title=\"第五十九条\"></a>第五十九条</h4><p>电子商务经营者应当建立便捷、有效的投诉、举报机制，公开投诉、举报方式等信息，及时受理并处理投诉、举报。</p>\n<h4 id=\"第六十条\"><a href=\"#第六十条\" class=\"headerlink\" title=\"第六十条\"></a>第六十条</h4><p>电子商务争议可以通过协商和解，请求消费者组织、行业协会或者其他依法成立的调解组织调解，向有关部门投诉，提请仲裁，或者提起诉讼等方式解决。</p>\n<h4 id=\"第六十一条\"><a href=\"#第六十一条\" class=\"headerlink\" title=\"第六十一条\"></a>第六十一条</h4><p>消费者在电子商务平台购买商品或者接受服务，与平台内经营者发生争议时，电子商务平台经营者应当积极协助消费者维护合法权益。</p>\n<h4 id=\"第六十二条\"><a href=\"#第六十二条\" class=\"headerlink\" title=\"第六十二条\"></a>第六十二条</h4><p>在电子商务争议处理中，电子商务经营者应当提供原始合同和交易记录。因电子商务经营者丢失、伪造、篡改、销毁、隐匿或者拒绝提供前述资料，致使人民法院、仲裁机构或者有关机关无法查明事实的，电子商务经营者应当承担相应的法律责任。</p>\n<h4 id=\"第六十三条\"><a href=\"#第六十三条\" class=\"headerlink\" title=\"第六十三条\"></a>第六十三条</h4><p>电子商务平台经营者可以建立争议在线解决机制，制定并公示争议解决规则，根据自愿原则，公平、公正地解决当事人的争议。</p>\n<h2 id=\"第五章-电子商务促进\"><a href=\"#第五章-电子商务促进\" class=\"headerlink\" title=\"第五章 电子商务促进\"></a>第五章 电子商务促进</h2><h4 id=\"第六十四条\"><a href=\"#第六十四条\" class=\"headerlink\" title=\"第六十四条\"></a>第六十四条</h4><p>国务院和省、自治区、直辖市人民政府应当将电子商务发展纳入国民经济和社会发展规划，制定科学合理的产业政策，促进电子商务创新发展。</p>\n<h4 id=\"第六十五条\"><a href=\"#第六十五条\" class=\"headerlink\" title=\"第六十五条\"></a>第六十五条</h4><p>国务院和县级以上地方人民政府及其有关部门应当采取措施，支持、推动绿色包装、仓储、运输，促进电子商务绿色发展。</p>\n<h4 id=\"第六十六条\"><a href=\"#第六十六条\" class=\"headerlink\" title=\"第六十六条\"></a>第六十六条</h4><p>国家推动电子商务基础设施和物流网络建设，完善电子商务统计制度，加强电子商务标准体系建设。</p>\n<h4 id=\"第六十七条\"><a href=\"#第六十七条\" class=\"headerlink\" title=\"第六十七条\"></a>第六十七条</h4><p>国家推动电子商务在国民经济各个领域的应用，支持电子商务与各产业融合发展。</p>\n<h4 id=\"第六十八条\"><a href=\"#第六十八条\" class=\"headerlink\" title=\"第六十八条\"></a>第六十八条</h4><p>国家促进农业生产、加工、流通等环节的互联网技术应用，鼓励各类社会资源加强合作，促进农村电子商务发展，发挥电子商务在精准扶贫中的作用。</p>\n<h4 id=\"第六十九条\"><a href=\"#第六十九条\" class=\"headerlink\" title=\"第六十九条\"></a>第六十九条</h4><p>国家维护电子商务交易安全，保护电子商务用户信息，鼓励电子商务数据开发应用，保障电子商务数据依法有序自由流动。国家采取措施推动建立公共数据共享机制，促进电子商务经营者依法利用公共数据。</p>\n<h4 id=\"第七十条\"><a href=\"#第七十条\" class=\"headerlink\" title=\"第七十条\"></a>第七十条</h4><p>国家支持依法设立的信用评价机构开展电子商务信用评价，向社会提供电子商务信用评价服务。</p>\n<h4 id=\"第七十一条\"><a href=\"#第七十一条\" class=\"headerlink\" title=\"第七十一条\"></a>第七十一条</h4><p>国家促进跨境电子商务发展，建立健全适应跨境电子商务特点的海关、税收、进出境检验检疫、支付结算等管理制度，提高跨境电子商务各环节便利化水平，支持跨境电子商务平台经营者等为跨境电子商务提供仓储物流、报关、报检等服务。</p>\n<p>国家支持小型微型企业从事跨境电子商务。</p>\n<h4 id=\"第七十二条\"><a href=\"#第七十二条\" class=\"headerlink\" title=\"第七十二条\"></a>第七十二条</h4><p>国家进出口管理部门应当推进跨境电子商务海关申报、纳税、检验检疫等环节的综合服务和监管体系建设，优化监管流程，推动实现信息共享、监管互认、执法互助，提高跨境电子商务服务和监管效率。跨境电子商务经营者可以凭电子单证向国家进出口管理部门办理有关手续。</p>\n<h4 id=\"第七十三条\"><a href=\"#第七十三条\" class=\"headerlink\" title=\"第七十三条\"></a>第七十三条</h4><p>国家推动建立与不同国家、地区之间跨境电子商务的交流合作，参与电子商务国际规则的制定，促进电子签名、电子身份等国际互认。国家推动建立与不同国家、地区之间的跨境电子商务争议解决机制。</p>\n<h2 id=\"第六章-法律责任\"><a href=\"#第六章-法律责任\" class=\"headerlink\" title=\"第六章 法律责任\"></a>第六章 法律责任</h2><h4 id=\"第七十四条\"><a href=\"#第七十四条\" class=\"headerlink\" title=\"第七十四条\"></a>第七十四条</h4><p>电子商务经营者销售商品或者提供服务，不履行合同义务或者履行合同义务不符合约定，或者造成他人损害的，依法承担民事责任。</p>\n<h4 id=\"第七十五条\"><a href=\"#第七十五条\" class=\"headerlink\" title=\"第七十五条\"></a>第七十五条</h4><p>电子商务经营者违反本法第十二条、第十三条规定，未取得相关行政许可从事经营活动，或者销售、提供法律、行政法规禁止交易的商品、服务，或者不履行本法第二十五条规定的信息提供义务，电子商务平台经营者违反本法第四十六条规定，采取集中交易方式进行交易，或者进行标准化合约交易的，依照有关法律、行政法规的规定处罚。</p>\n<h4 id=\"第七十六条\"><a href=\"#第七十六条\" class=\"headerlink\" title=\"第七十六条\"></a>第七十六条</h4><p>电子商务经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处一万元以下的罚款，对其中的电子商务平台经营者，依照本法第八十一条第一款的规定处罚：</p>\n<ul>\n<li>（一）未在首页显著位置公示营业执照信息、行政许可信息、属于不需要办理市场主体登记情形等信息,或者上述信息的链接标识的；</li>\n<li>（二）未在首页显著位置持续公示终止电子商务的有关信息的；</li>\n<li>（三）未明示用户信息查询、更正、删除以及用户注销的方式、程序，或者对用户信息查询、更正、删除以及用户注销设置不合理条件的。</li>\n</ul>\n<p>电子商务平台经营者对违反前款规定的平台内经营者未采取必要措施的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款。</p>\n<h4 id=\"第七十七条\"><a href=\"#第七十七条\" class=\"headerlink\" title=\"第七十七条\"></a>第七十七条</h4><p>电子商务经营者违反本法第十八条第一款规定提供搜索结果，或者违反本法第十九条规定搭售商品、服务的，由市场监督管理部门责令限期改正，没收<br>违法所得，可以并处五万元以上二十万元以下的罚款；情节严重的，并处二十万元以上五十万元以下的罚款。</p>\n<h4 id=\"第七十八条\"><a href=\"#第七十八条\" class=\"headerlink\" title=\"第七十八条\"></a>第七十八条</h4><p>电子商务经营者违反本法第二十一条规定，未向消费者明示押金退还的方式、程序，对押金退还设置不合理条件，或者不及时退还押金的，由有关主管部门责令限期改正，可以处五万元以上二十万元以下的罚款；情节严重的，处二十万元以上五十万元以下的罚款。</p>\n<h4 id=\"第七十九条\"><a href=\"#第七十九条\" class=\"headerlink\" title=\"第七十九条\"></a>第七十九条</h4><p>电子商务经营者违反法律、行政法规有关个人信息保护的规定，或者不履行本法第三十条和有关法律、行政法规规定的网络安全保障义务的，依照《中华人民共和国网络安全法》等法律、行政法规的规定处罚。</p>\n<h4 id=\"第八十条\"><a href=\"#第八十条\" class=\"headerlink\" title=\"第八十条\"></a>第八十条</h4><p>电子商务平台经营者有下列行为之一的，由有关主管部门责令限期改正；逾期不改正的，处二万元以上十万元以下的罚款；情节严重的，责令停业整顿， 并处十万元以上五十万元以下的罚款：</p>\n<ul>\n<li>（一）不履行本法第二十七条规定的核验、登记义务的；</li>\n<li>（二）不按照本法第二十八条规定向市场监督管理部门、税务部门报送有关信息 的； </li>\n<li>（三）不按照本法第二十九条规定对违法情形采取必要的处置措施，或者未向有关主管部门报告的；</li>\n<li>（四）不履行本法第三十一条规定的商品和服务信息、交易信息保存义务的。</li>\n</ul>\n<p>法律、行政法规对前款规定的违法行为的处罚另有规定的，依照其规定。</p>\n<h4 id=\"第八十一条\"><a href=\"#第八十一条\" class=\"headerlink\" title=\"第八十一条\"></a>第八十一条</h4><p>电子商务平台经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款；情节严重的，处十万元以上五十万元以下的罚款：</p>\n<ul>\n<li>（一）未在首页显著位置持续公示平台服务协议、交易规则信息或者上述信息的 链接标识的；</li>\n<li>（二）修改交易规则未在首页显著位置公开征求意见，未按照规定的时间提前公示修改内容，或者阻止平台内经营者退出的；</li>\n<li>（三）未以显著方式区分标记自营业务和平台内经营者开展的业务的； </li>\n<li>（四）未为消费者提供对平台内销售的商品或者提供的服务进行评价的途径，或者擅自删除消费者的评价的。</li>\n</ul>\n<p>电子商务平台经营者违反本法第四十条规定，对竞价排名的商品或者服务未显著标明“广告”的，依照《中华人民共和国广告法》的规定处罚。</p>\n<h4 id=\"第八十二条\"><a href=\"#第八十二条\" class=\"headerlink\" title=\"第八十二条\"></a>第八十二条</h4><p>电子商务平台经营者违反本法第三十五条规定，对平台内经营者在平台内的交易、交易价格或者与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下 的罚款。</p>\n<h4 id=\"第八十三条\"><a href=\"#第八十三条\" class=\"headerlink\" title=\"第八十三条\"></a>第八十三条</h4><p>电子商务平台经营者违反本法第三十八条规定，对平台内经营者侵害消费者合法权益行为未采取必要措施，或者对平台内经营者未尽到资质资格审核义务，或者对消费者未尽到安全保障义务的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，责令停业整顿，并处五十万元以上二百万元以下的罚款。</p>\n<h4 id=\"第八十四条\"><a href=\"#第八十四条\" class=\"headerlink\" title=\"第八十四条\"></a>第八十四条</h4><p>电子商务平台经营者违反本法第四十二条、第四十五条规定，对平台内经营者实施侵犯知识产权行为未依法采取必要措施的，由有关知识产权行政部门责令限期改正；逾期不改正的，处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下的罚款。</p>\n<h4 id=\"第八十五条\"><a href=\"#第八十五条\" class=\"headerlink\" title=\"第八十五条\"></a>第八十五条</h4><p>电子商务经营者违反本法规定，销售的商品或者提供的服务不符合保障人身、财产安全的要求，实施虚假或者引人误解的商业宣传等不正当竞争行为，滥用市场支配地位，或者实施侵犯知识产权、侵害消费者权益等行为的，依照有关法律的规定处罚。</p>\n<h4 id=\"第八十六条\"><a href=\"#第八十六条\" class=\"headerlink\" title=\"第八十六条\"></a>第八十六条</h4><p>电子商务经营者有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p>\n<h4 id=\"第八十七条\"><a href=\"#第八十七条\" class=\"headerlink\" title=\"第八十七条\"></a>第八十七条</h4><p>依法负有电子商务监督管理职责的部门的工作人员，玩忽职守、滥用职权、徇私舞弊，或者泄露、出售或者非法向他人提供在履行职责中所知悉的个人信息、隐私和商业秘密的，依法追究法律责任。</p>\n<h4 id=\"第八十八条\"><a href=\"#第八十八条\" class=\"headerlink\" title=\"第八十八条\"></a>第八十八条</h4><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p>\n<p><a class=\"link\"   href=\"https://github.com/blusewang/blog/files/5779079/default.pdf\" >中华人民共和国电子商务法.pdf<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"中华人民共和国电子商务法\"><a href=\"#中华人民共和国电子商务法\" class=\"headerlink\" title=\"中华人民共和国电子商务法\"></a>中华人民共和国电子商务法</h1><h2 id=\"第一章-总-则\"><a href=\"#第一章-总-则\" class=\"headerlink\" title=\"第一章 总 则\"></a>第一章 总 则</h2><h4 id=\"第一条\"><a href=\"#第一条\" class=\"headerlink\" title=\"第一条\"></a>第一条</h4><p>为了保障电子商务各方主体的合法权益，规范电子商务行为，维护市场秩序，促进电子商务持续健康发展，制定本法。</p>\n<h4 id=\"第二条\"><a href=\"#第二条\" class=\"headerlink\" title=\"第二条\"></a>第二条</h4><p>中华人民共和国境内的电子商务活动，适用本法。</p>\n<p> 本法所称电子商务，是指通过互联网等信息网络销售商品或者提供服务的经营活 动。</p>\n<p> 法律、行政法规对销售商品或者提供服务有规定的，适用其规定。金融类产品和 服务，利用信息网络提供新闻信息、音视频节目、出版以及文化产品等内容方面的服 务，不适用本法。</p>\n<h4 id=\"第三条\"><a href=\"#第三条\" class=\"headerlink\" title=\"第三条\"></a>第三条</h4><p>国家鼓励发展电子商务新业态，创新商业模式，促进电子商务技术研发 和推广应用，推进电子商务诚信体系建设，营造有利于电子商务创新发展的市场环境， 充分发挥电子商务在推动高质量发展、满足人民日益增长的美好生活需要、构建开放 型经济方面的重要作用。</p>\n<h3 id=\"第四条\"><a href=\"#第四条\" class=\"headerlink\" title=\"第四条\"></a>第四条</h3><p>国家平等对待线上线下商务活动，促进线上线下融合发展，各级人民政府和有关部门不得采取歧视性的政策措施，不得滥用行政权力排除、限制市场竞争。</p>\n<h4 id=\"第五条\"><a href=\"#第五条\" class=\"headerlink\" title=\"第五条\"></a>第五条</h4><p>电子商务经营者从事经营活动，应当遵循自愿、平等、公平、诚信的原则，遵守法律和商业道德，公平参与市场竞争，履行消费者权益保护、环境保护、知识产权保护、网络安全与个人信息保护等方面的义务，承担产品和服务质量责任，接受政府和社会的监督。</p>\n<h4 id=\"第六条\"><a href=\"#第六条\" class=\"headerlink\" title=\"第六条\"></a>第六条</h4><p>国务院有关部门按照职责分工负责电子商务发展促进、监督管理等工作。县级以上地方各级人民政府可以根据本行政区域的实际情况，确定本行政区域内电子商务的部门职责划分。</p>\n<h4 id=\"第七条\"><a href=\"#第七条\" class=\"headerlink\" title=\"第七条\"></a>第七条</h4><p>国家建立符合电子商务特点的协同管理体系，推动形成有关部门、电子商务行业组织、电子商务经营者、消费者等共同参与的电子商务市场治理体系。</p>\n<h4 id=\"第八条\"><a href=\"#第八条\" class=\"headerlink\" title=\"第八条\"></a>第八条</h4><p>电子商务行业组织按照本组织章程开展行业自律，建立健全行业规范，推动行业诚信建设，监督、引导本行业经营者公平参与市场竞争。</p>\n<h2 id=\"第二章-电子商务经营者\"><a href=\"#第二章-电子商务经营者\" class=\"headerlink\" title=\"第二章 电子商务经营者\"></a>第二章 电子商务经营者</h2><h3 id=\"第一节-一般规定\"><a href=\"#第一节-一般规定\" class=\"headerlink\" title=\"第一节 一般规定\"></a>第一节 一般规定</h3><h4 id=\"第九条\"><a href=\"#第九条\" class=\"headerlink\" title=\"第九条\"></a>第九条</h4><p>本法所称电子商务经营者，是指通过互联网等信息网络从事销售商品或者提供服务的经营活动的自然人、法人和非法人组织，包括电子商务平台经营者、平台内经营者以及通过自建网站、其他网络服务销售商品或者提供服务的电子商务经营者。</p>\n<p> 本法所称电子商务平台经营者，是指在电子商务中为交易双方或者多方提供网络经营场所、交易撮合、信息发布等服务，供交易双方或者多方独立开展交易活动的法人或者非法人组织。</p>\n<p> 本法所称平台内经营者，是指通过电子商务平台销售商品或者提供服务的电子商务经营者。</p>\n<h4 id=\"第十条\"><a href=\"#第十条\" class=\"headerlink\" title=\"第十条\"></a>第十条</h4><p>电子商务经营者应当依法办理市场主体登记。但是，个人销售自产农副产品、家庭手工业产品，个人利用自己的技能从事依法无须取得许可的便民劳务活动和零星小额交易活动，以及依照法律、行政法规不需要进行登记的除外。</p>\n<h4 id=\"第十一条\"><a href=\"#第十一条\" class=\"headerlink\" title=\"第十一条\"></a>第十一条</h4><p>电子商务经营者应当依法履行纳税义务，并依法享受税收优惠。</p>\n<p> 依照前条规定不需要办理市场主体登记的电子商务经营者在首次纳税义务发生后，应当依照税收征收管理法律、行政法规的规定申请办理税务登记，并如实申报纳税。</p>\n<h4 id=\"第十二条\"><a href=\"#第十二条\" class=\"headerlink\" title=\"第十二条\"></a>第十二条</h4><p>电子商务经营者从事经营活动，依法需要取得相关行政许可的，应当依法取得行政许可。</p>\n<h4 id=\"第十三条\"><a href=\"#第十三条\" class=\"headerlink\" title=\"第十三条\"></a>第十三条</h4><p>电子商务经营者销售的商品或者提供的服务应当符合保障人身、财产安全的要求和环境保护要求，不得销售或者提供法律、行政法规禁止交易的商品或者服务。</p>\n<h4 id=\"第十四条\"><a href=\"#第十四条\" class=\"headerlink\" title=\"第十四条\"></a>第十四条</h4><p>电子商务经营者销售商品或者提供服务应当依法出具纸质发票或者电子发票等购货凭证或者服务单据。电子发票与纸质发票具有同等法律效力。</p>\n<h4 id=\"第十五条\"><a href=\"#第十五条\" class=\"headerlink\" title=\"第十五条\"></a>第十五条</h4><p>电子商务经营者应当在其首页显著位置，持续公示营业执照信息、与其经营业务有关的行政许可信息、属于依照本法第十条规定的不需要办理市场主体登记情形等信息，或者上述信息的链接标识。</p>\n<p> 前款规定的信息发生变更的，电子商务经营者应当及时更新公示信息。</p>\n<h4 id=\"第十六条\"><a href=\"#第十六条\" class=\"headerlink\" title=\"第十六条\"></a>第十六条</h4><p>电子商务经营者自行终止从事电子商务的，应当提前三十日在首页显著位置持续公示有关信息。</p>\n<h4 id=\"第十七条\"><a href=\"#第十七条\" class=\"headerlink\" title=\"第十七条\"></a>第十七条</h4><p>电子商务经营者应当全面、真实、准确、及时地披露商品或者服务信息，保障消费者的知情权和选择权。电子商务经营者不得以虚构交易、编造用户评价等方式进行虚假或者引人误解的商业宣传，欺骗、误导消费者。</p>\n<h4 id=\"第十八条\"><a href=\"#第十八条\" class=\"headerlink\" title=\"第十八条\"></a>第十八条</h4><p>电子商务经营者根据消费者的兴趣爱好、消费习惯等特征向其提供商品或者服务的搜索结果的，应当同时向该消费者提供不针对其个人特征的选项，尊重<br>和平等保护消费者合法权益。</p>\n<p> 电子商务经营者向消费者发送广告的，应当遵守《中华人民共和国广告法》的有关规定。</p>\n<h4 id=\"第十九条\"><a href=\"#第十九条\" class=\"headerlink\" title=\"第十九条\"></a>第十九条</h4><p>电子商务经营者搭售商品或者服务，应当以显著方式提请消费者注意，不得将搭售商品或者服务作为默认同意的选项。</p>\n<h4 id=\"第二十条\"><a href=\"#第二十条\" class=\"headerlink\" title=\"第二十条\"></a>第二十条</h4><p>电子商务经营者应当按照承诺或者与消费者约定的方式、时限向消费者交付商品或者服务，并承担商品运输中的风险和责任。但是，消费者另行选择快递物流服务提供者的除外。</p>\n<h4 id=\"第二十一条\"><a href=\"#第二十一条\" class=\"headerlink\" title=\"第二十一条\"></a>第二十一条</h4><p>电子商务经营者按照约定向消费者收取押金的，应当明示押金退还的方式、程序，不得对押金退还设置不合理条件。消费者申请退还押金，符合押金退还条件的，电子商务经营者应当及时退还。</p>\n<h4 id=\"第二十二条\"><a href=\"#第二十二条\" class=\"headerlink\" title=\"第二十二条\"></a>第二十二条</h4><p>电子商务经营者因其技术优势、用户数量、对相关行业的控制能力以及其他经营者对该电子商务经营者在交易上的依赖程度等因素而具有市场支配地位的，不得滥用市场支配地位，排除、限制竞争。</p>\n<h4 id=\"第二十三条\"><a href=\"#第二十三条\" class=\"headerlink\" title=\"第二十三条\"></a>第二十三条</h4><p>电子商务经营者收集、使用其用户的个人信息，应当遵守法律、行政法规有关个人信息保护的规定。</p>\n<h4 id=\"第二十四条\"><a href=\"#第二十四条\" class=\"headerlink\" title=\"第二十四条\"></a>第二十四条</h4><p>电子商务经营者应当明示用户信息查询、更正、删除以及用户注销的方式、程序，不得对用户信息查询、更正、删除以及用户注销设置不合理条件。</p>\n<p> 电子商务经营者收到用户信息查询或者更正、删除的申请的，应当在核实身份后及时提供查询或者更正、删除用户信息。用户注销的，电子商务经营者应当立即删除该用户的信息；依照法律、行政法规的规定或者双方约定保存的，依照其规定。</p>\n<h4 id=\"第二十五条\"><a href=\"#第二十五条\" class=\"headerlink\" title=\"第二十五条\"></a>第二十五条</h4><p>有关主管部门依照法律、行政法规的规定要求电子商务经营者提供有关电子商务数据信息的，电子商务经营者应当提供。有关主管部门应当采取必要措施保护电子商务经营者提供的数据信息的安全，并对其中的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p>\n<h4 id=\"第二十六条\"><a href=\"#第二十六条\" class=\"headerlink\" title=\"第二十六条\"></a>第二十六条</h4><p>电子商务经营者从事跨境电子商务，应当遵守进出口监督管理的法律、行政法规和国家有关规定。</p>\n<h3 id=\"第二节-电子商务平台经营者\"><a href=\"#第二节-电子商务平台经营者\" class=\"headerlink\" title=\"第二节 电子商务平台经营者\"></a>第二节 电子商务平台经营者</h3><h4 id=\"第二十七条\"><a href=\"#第二十七条\" class=\"headerlink\" title=\"第二十七条\"></a>第二十七条</h4><p>电子商务平台经营者应当要求申请进入平台销售商品或者提供服务的经营者提交其身份、地址、联系方式、行政许可等真实信息，进行核验、登记，建立登记档案，并定期核验更新。</p>\n<p> 电子商务平台经营者为进入平台销售商品或者提供服务的非经营用户提供服务，应当遵守本节有关规定。</p>\n<h4 id=\"第二十八条\"><a href=\"#第二十八条\" class=\"headerlink\" title=\"第二十八条\"></a>第二十八条</h4><p>电子商务平台经营者应当按照规定向市场监督管理部门报送平台内经营者的身份信息，提示未办理市场主体登记的经营者依法办理登记，并配合市场监督管理部门，针对电子商务的特点，为应当办理市场主体登记的经营者办理登记提供便利。</p>\n<p> 电子商务平台经营者应当依照税收征收管理法律、行政法规的规定，向税务部门报送平台内经营者的身份信息和与纳税有关的信息，并应当提示依照本法第十条规定不需要办理市场主体登记的电子商务经营者依照本法第十一条第二款的规定办理税务登记。</p>\n<h4 id=\"第二十九条\"><a href=\"#第二十九条\" class=\"headerlink\" title=\"第二十九条\"></a>第二十九条</h4><p>电子商务平台经营者发现平台内的商品或者服务信息存在违反本法第十二条、第十三条规定情形的，应当依法采取必要的处置措施，并向有关主管部门报告。</p>\n<h4 id=\"第三十条\"><a href=\"#第三十条\" class=\"headerlink\" title=\"第三十条\"></a>第三十条</h4><p>电子商务平台经营者应当采取技术措施和其他必要措施保证其网络安全、稳定运行，防范网络违法犯罪活动，有效应对网络安全事件，保障电子商务交易安全。</p>\n<p> 电子商务平台经营者应当制定网络安全事件应急预案，发生网络安全事件时，应当立即启动应急预案，采取相应的补救措施，并向有关主管部门报告。</p>\n<h4 id=\"第三十一条\"><a href=\"#第三十一条\" class=\"headerlink\" title=\"第三十一条\"></a>第三十一条</h4><p>电子商务平台经营者应当记录、保存平台上发布的商品和服务信息、交易信息，并确保信息的完整性、保密性、可用性。商品和服务信息、交易信息保存时间自交易完成之日起不少于三年；法律、行政法规另有规定的，依照其规定。</p>\n<h4 id=\"第三十二条\"><a href=\"#第三十二条\" class=\"headerlink\" title=\"第三十二条\"></a>第三十二条</h4><p>电子商务平台经营者应当遵循公开、公平、公正的原则，制定平台服务协议和交易规则，明确进入和退出平台、商品和服务质量保障、消费者权益保护、个人信息保护等方面的权利和义务。</p>\n<h4 id=\"第三十三条\"><a href=\"#第三十三条\" class=\"headerlink\" title=\"第三十三条\"></a>第三十三条</h4><p>电子商务平台经营者应当在其首页显著位置持续公示平台服务协议和交易规则信息或者上述信息的链接标识，并保证经营者和消费者能够便利、完整地阅览和下载。</p>\n<h4 id=\"第三十四条\"><a href=\"#第三十四条\" class=\"headerlink\" title=\"第三十四条\"></a>第三十四条</h4><p>电子商务平台经营者修改平台服务协议和交易规则，应当在其首页显著位置公开征求意见，采取合理措施确保有关各方能够及时充分表达意见。修改内容应当至少在实施前七日予以公示。</p>\n<p> 平台内经营者不接受修改内容，要求退出平台的，电子商务平台经营者不得阻止，并按照修改前的服务协议和交易规则承担相关责任。</p>\n<h4 id=\"第三十五条\"><a href=\"#第三十五条\" class=\"headerlink\" title=\"第三十五条\"></a>第三十五条</h4><p>电子商务平台经营者不得利用服务协议、交易规则以及技术等手段，对平台内经营者在平台内的交易、交易价格以及与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用。</p>\n<h4 id=\"第三十六条\"><a href=\"#第三十六条\" class=\"headerlink\" title=\"第三十六条\"></a>第三十六条</h4><p>电子商务平台经营者依据平台服务协议和交易规则对平台内经营者违反法律、法规的行为实施警示、暂停或者终止服务等措施的，应当及时公示。</p>\n<h4 id=\"第三十七条\"><a href=\"#第三十七条\" class=\"headerlink\" title=\"第三十七条\"></a>第三十七条</h4><p>电子商务平台经营者在其平台上开展自营业务的，应当以显著方式区分标记自营业务和平台内经营者开展的业务，不得误导消费者。</p>\n<p> 电子商务平台经营者对其标记为自营的业务依法承担商品销售者或者服务提供者的民事责任。</p>\n<h4 id=\"第三十八条\"><a href=\"#第三十八条\" class=\"headerlink\" title=\"第三十八条\"></a>第三十八条</h4><p>电子商务平台经营者知道或者应当知道平台内经营者销售的商品或者提供的服务不符合保障人身、财产安全的要求，或者有其他侵害消费者合法权益行为，未采取必要措施的，依法与该平台内经营者承担连带责任。</p>\n<p> 对关系消费者生命健康的商品或者服务，电子商务平台经营者对平台内经营者的资质资格未尽到审核义务，或者对消费者未尽到安全保障义务，造成消费者损害的，依法承担相应的责任。</p>\n<h4 id=\"第三十九条\"><a href=\"#第三十九条\" class=\"headerlink\" title=\"第三十九条\"></a>第三十九条</h4><p>电子商务平台经营者应当建立健全信用评价制度，公示信用评价规则，为消费者提供对平台内销售的商品或者提供的服务进行评价的途径。</p>\n<p> 电子商务平台经营者不得删除消费者对其平台内销售的商品或者提供的服务的评价。</p>\n<h4 id=\"第四十条\"><a href=\"#第四十条\" class=\"headerlink\" title=\"第四十条\"></a>第四十条</h4><p>电子商务平台经营者应当根据商品或者服务的价格、销量、信用等以多种方式向消费者显示商品或者服务的搜索结果；对于竞价排名的商品或者服务，应当显著标明“广告”。</p>\n<h4 id=\"第四十一条\"><a href=\"#第四十一条\" class=\"headerlink\" title=\"第四十一条\"></a>第四十一条</h4><p>电子商务平台经营者应当建立知识产权保护规则，与知识产权权利人加强合作，依法保护知识产权。</p>\n<h4 id=\"第四十二条\"><a href=\"#第四十二条\" class=\"headerlink\" title=\"第四十二条\"></a>第四十二条</h4><p>知识产权权利人认为其知识产权受到侵害的，有权通知电子商务平台经营者采取删除、屏蔽、断开链接、终止交易和服务等必要措施。通知应当包括构成侵权的初步证据。</p>\n<p> 电子商务平台经营者接到通知后，应当及时采取必要措施，并将该通知转送平台内经营者；未及时采取必要措施的，对损害的扩大部分与平台内经营者承担连带责任。</p>\n<p> 因通知错误造成平台内经营者损害的，依法承担民事责任。恶意发出错误通知，造成平台内经营者损失的，加倍承担赔偿责任。</p>\n<h4 id=\"第四十三条\"><a href=\"#第四十三条\" class=\"headerlink\" title=\"第四十三条\"></a>第四十三条</h4><p>平台内经营者接到转送的通知后，可以向电子商务平台经营者提交不存在侵权行为的声明。声明应当包括不存在侵权行为的初步证据。</p>\n<p> 电子商务平台经营者接到声明后，应当将该声明转送发出通知的知识产权权利人，并告知其可以向有关主管部门投诉或者向人民法院起诉。电子商务平台经营者在转送声明到达知识产权权利人后十五日内，未收到权利人已经投诉或者起诉通知的，应当及时终止所采取的措施。</p>\n<h4 id=\"第四十四条\"><a href=\"#第四十四条\" class=\"headerlink\" title=\"第四十四条\"></a>第四十四条</h4><p>电子商务平台经营者应当及时公示收到的本法第四十二条、第四十三条规定的通知、声明及处理结果。</p>\n<h4 id=\"第四十五条\"><a href=\"#第四十五条\" class=\"headerlink\" title=\"第四十五条\"></a>第四十五条</h4><p>电子商务平台经营者知道或者应当知道平台内经营者侵犯知识产权的，应当采取删除、屏蔽、断开链接、终止交易和服务等必要措施；未采取必要措施的，与侵权人承担连带责任。</p>\n<h4 id=\"第四十六条\"><a href=\"#第四十六条\" class=\"headerlink\" title=\"第四十六条\"></a>第四十六条</h4><p>除本法第九条第二款规定的服务外，电子商务平台经营者可以按照平台服务协议和交易规则，为经营者之间的电子商务提供仓储、物流、支付结算、交收等服务。电子商务平台经营者为经营者之间的电子商务提供服务，应当遵守法律、行政法规和国家有关规定，不得采取集中竞价、做市商等集中交易方式进行交易，不得进行标准化合约交易。</p>\n<h2 id=\"第三章-电子商务合同的订立与履行\"><a href=\"#第三章-电子商务合同的订立与履行\" class=\"headerlink\" title=\"第三章 电子商务合同的订立与履行\"></a>第三章 电子商务合同的订立与履行</h2><h4 id=\"第四十七条\"><a href=\"#第四十七条\" class=\"headerlink\" title=\"第四十七条\"></a>第四十七条</h4><p>电子商务当事人订立和履行合同，适用本章和《中华人民共和国民法总则》《中华人民共和国合同法》《中华人民共和国电子签名法》等法律的规定。</p>\n<h4 id=\"第四十八条\"><a href=\"#第四十八条\" class=\"headerlink\" title=\"第四十八条\"></a>第四十八条</h4><p>电子商务当事人使用自动信息系统订立或者履行合同的行为对使用该系统的当事人具有法律效力。</p>\n<p>在电子商务中推定当事人具有相应的民事行为能力。但是，有相反证据足以推翻的除外。</p>\n<h4 id=\"第四十九条\"><a href=\"#第四十九条\" class=\"headerlink\" title=\"第四十九条\"></a>第四十九条</h4><p>电子商务经营者发布的商品或者服务信息符合要约条件的，用户选择该商品或者服务并提交订单成功，合同成立。当事人另有约定的，从其约定。电子商务经营者不得以格式条款等方式约定消费者支付价款后合同不成立；格式条款等含有该内容的，其内容无效。</p>\n<h4 id=\"第五十条\"><a href=\"#第五十条\" class=\"headerlink\" title=\"第五十条\"></a>第五十条</h4><p>电子商务经营者应当清晰、全面、明确地告知用户订立合同的步骤、注意事项、下载方法等事项，并保证用户能够便利、完整地阅览和下载。电子商务经营者应当保证用户在提交订单前可以更正输入错误。</p>\n<h4 id=\"第五十一条\"><a href=\"#第五十一条\" class=\"headerlink\" title=\"第五十一条\"></a>第五十一条</h4><p>合同标的为交付商品并采用快递物流方式交付的，收货人签收时间为交付时间。合同标的为提供服务的，生成的电子凭证或者实物凭证中载明的时间为交付时间；前述凭证没有载明时间或者载明时间与实际提供服务时间不一致的，实际提供服务的时间为交付时间。</p>\n<p>合同标的为采用在线传输方式交付的，合同标的进入对方当事人指定的特定系统并且能够检索识别的时间为交付时间。</p>\n<p>合同当事人对交付方式、交付时间另有约定的，从其约定。</p>\n<h4 id=\"第五十二条\"><a href=\"#第五十二条\" class=\"headerlink\" title=\"第五十二条\"></a>第五十二条</h4><p>电子商务当事人可以约定采用快递物流方式交付商品。快递物流服务提供者为电子商务提供快递物流服务，应当遵守法律、行政法规，并应当符合承诺的服务规范和时限。快递物流服务提供者在交付商品时，应当提示收货人当面查验；交由他人代收的，应当经收货人同意。 快递物流服务提供者应当按照规定使用环保包装材料，实现包装材料的减量化和再利用。快递物流服务提供者在提供快递物流服务的同时，可以接受电子商务经营者的委托提供代收货款服务。</p>\n<h4 id=\"第五十三条\"><a href=\"#第五十三条\" class=\"headerlink\" title=\"第五十三条\"></a>第五十三条</h4><p>电子商务当事人可以约定采用电子支付方式支付价款。</p>\n<p>电子支付服务提供者为电子商务提供电子支付服务，应当遵守国家规定，告知用户电子支付服务的功能、使用方法、注意事项、相关风险和收费标准等事项，不得附加不合理交易条件。电子支付服务提供者应当确保电子支付指令的完整性、一致性、可跟踪稽核和不可篡改。</p>\n<p>电子支付服务提供者应当向用户免费提供对账服务以及最近三年的交易记录。</p>\n<h4 id=\"第五十四条\"><a href=\"#第五十四条\" class=\"headerlink\" title=\"第五十四条\"></a>第五十四条</h4><p>电子支付服务提供者提供电子支付服务不符合国家有关支付安全管理要求，造成用户损失的，应当承担赔偿责任。</p>\n<h4 id=\"第五十五条\"><a href=\"#第五十五条\" class=\"headerlink\" title=\"第五十五条\"></a>第五十五条</h4><p>用户在发出支付指令前，应当核对支付指令所包含的金额、收款人等完整信息。</p>\n<p>支付指令发生错误的，电子支付服务提供者应当及时查找原因，并采取相关措施予以纠正。造成用户损失的，电子支付服务提供者应当承担赔偿责任，但能够证明支付错误非自身原因造成的除外。</p>\n<h4 id=\"第五十六条\"><a href=\"#第五十六条\" class=\"headerlink\" title=\"第五十六条\"></a>第五十六条</h4><p>电子支付服务提供者完成电子支付后，应当及时准确地向用户提供符合约定方式的确认支付的信息。</p>\n<h4 id=\"第五十七条\"><a href=\"#第五十七条\" class=\"headerlink\" title=\"第五十七条\"></a>第五十七条</h4><p>用户应当妥善保管交易密码、电子签名数据等安全工具。用户发现安全工具遗失、被盗用或者未经授权的支付的，应当及时通知电子支付服务提供者。</p>\n<p>未经授权的支付造成的损失，由电子支付服务提供者承担；电子支付服务提供者能够证明未经授权的支付是因用户的过错造成的，不承担责任。</p>\n<p>电子支付服务提供者发现支付指令未经授权，或者收到用户支付指令未经授权的通知时，应当立即采取措施防止损失扩大。电子支付服务提供者未及时采取措施导致损失扩大的，对损失扩大部分承担责任。</p>\n<h2 id=\"第四章-电子商务争议解决\"><a href=\"#第四章-电子商务争议解决\" class=\"headerlink\" title=\"第四章 电子商务争议解决\"></a>第四章 电子商务争议解决</h2><h4 id=\"第五十八条\"><a href=\"#第五十八条\" class=\"headerlink\" title=\"第五十八条\"></a>第五十八条</h4><p>国家鼓励电子商务平台经营者建立有利于电子商务发展和消费者权益保护的商品、服务质量担保机制。</p>\n<p>电子商务平台经营者与平台内经营者协议设立消费者权益保证金的，双方应当就消费者权益保证金的提取数额、管理、使用和退还办法等作出明确约定。</p>\n<p>消费者要求电子商务平台经营者承担先行赔偿责任以及电子商务平台经营者赔偿后向平台内经营者的追偿，适用《中华人民共和国消费者权益保护法》的有关规定。</p>\n<h4 id=\"第五十九条\"><a href=\"#第五十九条\" class=\"headerlink\" title=\"第五十九条\"></a>第五十九条</h4><p>电子商务经营者应当建立便捷、有效的投诉、举报机制，公开投诉、举报方式等信息，及时受理并处理投诉、举报。</p>\n<h4 id=\"第六十条\"><a href=\"#第六十条\" class=\"headerlink\" title=\"第六十条\"></a>第六十条</h4><p>电子商务争议可以通过协商和解，请求消费者组织、行业协会或者其他依法成立的调解组织调解，向有关部门投诉，提请仲裁，或者提起诉讼等方式解决。</p>\n<h4 id=\"第六十一条\"><a href=\"#第六十一条\" class=\"headerlink\" title=\"第六十一条\"></a>第六十一条</h4><p>消费者在电子商务平台购买商品或者接受服务，与平台内经营者发生争议时，电子商务平台经营者应当积极协助消费者维护合法权益。</p>\n<h4 id=\"第六十二条\"><a href=\"#第六十二条\" class=\"headerlink\" title=\"第六十二条\"></a>第六十二条</h4><p>在电子商务争议处理中，电子商务经营者应当提供原始合同和交易记录。因电子商务经营者丢失、伪造、篡改、销毁、隐匿或者拒绝提供前述资料，致使人民法院、仲裁机构或者有关机关无法查明事实的，电子商务经营者应当承担相应的法律责任。</p>\n<h4 id=\"第六十三条\"><a href=\"#第六十三条\" class=\"headerlink\" title=\"第六十三条\"></a>第六十三条</h4><p>电子商务平台经营者可以建立争议在线解决机制，制定并公示争议解决规则，根据自愿原则，公平、公正地解决当事人的争议。</p>\n<h2 id=\"第五章-电子商务促进\"><a href=\"#第五章-电子商务促进\" class=\"headerlink\" title=\"第五章 电子商务促进\"></a>第五章 电子商务促进</h2><h4 id=\"第六十四条\"><a href=\"#第六十四条\" class=\"headerlink\" title=\"第六十四条\"></a>第六十四条</h4><p>国务院和省、自治区、直辖市人民政府应当将电子商务发展纳入国民经济和社会发展规划，制定科学合理的产业政策，促进电子商务创新发展。</p>\n<h4 id=\"第六十五条\"><a href=\"#第六十五条\" class=\"headerlink\" title=\"第六十五条\"></a>第六十五条</h4><p>国务院和县级以上地方人民政府及其有关部门应当采取措施，支持、推动绿色包装、仓储、运输，促进电子商务绿色发展。</p>\n<h4 id=\"第六十六条\"><a href=\"#第六十六条\" class=\"headerlink\" title=\"第六十六条\"></a>第六十六条</h4><p>国家推动电子商务基础设施和物流网络建设，完善电子商务统计制度，加强电子商务标准体系建设。</p>\n<h4 id=\"第六十七条\"><a href=\"#第六十七条\" class=\"headerlink\" title=\"第六十七条\"></a>第六十七条</h4><p>国家推动电子商务在国民经济各个领域的应用，支持电子商务与各产业融合发展。</p>\n<h4 id=\"第六十八条\"><a href=\"#第六十八条\" class=\"headerlink\" title=\"第六十八条\"></a>第六十八条</h4><p>国家促进农业生产、加工、流通等环节的互联网技术应用，鼓励各类社会资源加强合作，促进农村电子商务发展，发挥电子商务在精准扶贫中的作用。</p>\n<h4 id=\"第六十九条\"><a href=\"#第六十九条\" class=\"headerlink\" title=\"第六十九条\"></a>第六十九条</h4><p>国家维护电子商务交易安全，保护电子商务用户信息，鼓励电子商务数据开发应用，保障电子商务数据依法有序自由流动。国家采取措施推动建立公共数据共享机制，促进电子商务经营者依法利用公共数据。</p>\n<h4 id=\"第七十条\"><a href=\"#第七十条\" class=\"headerlink\" title=\"第七十条\"></a>第七十条</h4><p>国家支持依法设立的信用评价机构开展电子商务信用评价，向社会提供电子商务信用评价服务。</p>\n<h4 id=\"第七十一条\"><a href=\"#第七十一条\" class=\"headerlink\" title=\"第七十一条\"></a>第七十一条</h4><p>国家促进跨境电子商务发展，建立健全适应跨境电子商务特点的海关、税收、进出境检验检疫、支付结算等管理制度，提高跨境电子商务各环节便利化水平，支持跨境电子商务平台经营者等为跨境电子商务提供仓储物流、报关、报检等服务。</p>\n<p>国家支持小型微型企业从事跨境电子商务。</p>\n<h4 id=\"第七十二条\"><a href=\"#第七十二条\" class=\"headerlink\" title=\"第七十二条\"></a>第七十二条</h4><p>国家进出口管理部门应当推进跨境电子商务海关申报、纳税、检验检疫等环节的综合服务和监管体系建设，优化监管流程，推动实现信息共享、监管互认、执法互助，提高跨境电子商务服务和监管效率。跨境电子商务经营者可以凭电子单证向国家进出口管理部门办理有关手续。</p>\n<h4 id=\"第七十三条\"><a href=\"#第七十三条\" class=\"headerlink\" title=\"第七十三条\"></a>第七十三条</h4><p>国家推动建立与不同国家、地区之间跨境电子商务的交流合作，参与电子商务国际规则的制定，促进电子签名、电子身份等国际互认。国家推动建立与不同国家、地区之间的跨境电子商务争议解决机制。</p>\n<h2 id=\"第六章-法律责任\"><a href=\"#第六章-法律责任\" class=\"headerlink\" title=\"第六章 法律责任\"></a>第六章 法律责任</h2><h4 id=\"第七十四条\"><a href=\"#第七十四条\" class=\"headerlink\" title=\"第七十四条\"></a>第七十四条</h4><p>电子商务经营者销售商品或者提供服务，不履行合同义务或者履行合同义务不符合约定，或者造成他人损害的，依法承担民事责任。</p>\n<h4 id=\"第七十五条\"><a href=\"#第七十五条\" class=\"headerlink\" title=\"第七十五条\"></a>第七十五条</h4><p>电子商务经营者违反本法第十二条、第十三条规定，未取得相关行政许可从事经营活动，或者销售、提供法律、行政法规禁止交易的商品、服务，或者不履行本法第二十五条规定的信息提供义务，电子商务平台经营者违反本法第四十六条规定，采取集中交易方式进行交易，或者进行标准化合约交易的，依照有关法律、行政法规的规定处罚。</p>\n<h4 id=\"第七十六条\"><a href=\"#第七十六条\" class=\"headerlink\" title=\"第七十六条\"></a>第七十六条</h4><p>电子商务经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处一万元以下的罚款，对其中的电子商务平台经营者，依照本法第八十一条第一款的规定处罚：</p>\n<ul>\n<li>（一）未在首页显著位置公示营业执照信息、行政许可信息、属于不需要办理市场主体登记情形等信息,或者上述信息的链接标识的；</li>\n<li>（二）未在首页显著位置持续公示终止电子商务的有关信息的；</li>\n<li>（三）未明示用户信息查询、更正、删除以及用户注销的方式、程序，或者对用户信息查询、更正、删除以及用户注销设置不合理条件的。</li>\n</ul>\n<p>电子商务平台经营者对违反前款规定的平台内经营者未采取必要措施的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款。</p>\n<h4 id=\"第七十七条\"><a href=\"#第七十七条\" class=\"headerlink\" title=\"第七十七条\"></a>第七十七条</h4><p>电子商务经营者违反本法第十八条第一款规定提供搜索结果，或者违反本法第十九条规定搭售商品、服务的，由市场监督管理部门责令限期改正，没收<br>违法所得，可以并处五万元以上二十万元以下的罚款；情节严重的，并处二十万元以上五十万元以下的罚款。</p>\n<h4 id=\"第七十八条\"><a href=\"#第七十八条\" class=\"headerlink\" title=\"第七十八条\"></a>第七十八条</h4><p>电子商务经营者违反本法第二十一条规定，未向消费者明示押金退还的方式、程序，对押金退还设置不合理条件，或者不及时退还押金的，由有关主管部门责令限期改正，可以处五万元以上二十万元以下的罚款；情节严重的，处二十万元以上五十万元以下的罚款。</p>\n<h4 id=\"第七十九条\"><a href=\"#第七十九条\" class=\"headerlink\" title=\"第七十九条\"></a>第七十九条</h4><p>电子商务经营者违反法律、行政法规有关个人信息保护的规定，或者不履行本法第三十条和有关法律、行政法规规定的网络安全保障义务的，依照《中华人民共和国网络安全法》等法律、行政法规的规定处罚。</p>\n<h4 id=\"第八十条\"><a href=\"#第八十条\" class=\"headerlink\" title=\"第八十条\"></a>第八十条</h4><p>电子商务平台经营者有下列行为之一的，由有关主管部门责令限期改正；逾期不改正的，处二万元以上十万元以下的罚款；情节严重的，责令停业整顿， 并处十万元以上五十万元以下的罚款：</p>\n<ul>\n<li>（一）不履行本法第二十七条规定的核验、登记义务的；</li>\n<li>（二）不按照本法第二十八条规定向市场监督管理部门、税务部门报送有关信息 的； </li>\n<li>（三）不按照本法第二十九条规定对违法情形采取必要的处置措施，或者未向有关主管部门报告的；</li>\n<li>（四）不履行本法第三十一条规定的商品和服务信息、交易信息保存义务的。</li>\n</ul>\n<p>法律、行政法规对前款规定的违法行为的处罚另有规定的，依照其规定。</p>\n<h4 id=\"第八十一条\"><a href=\"#第八十一条\" class=\"headerlink\" title=\"第八十一条\"></a>第八十一条</h4><p>电子商务平台经营者违反本法规定，有下列行为之一的，由市场监督管理部门责令限期改正，可以处二万元以上十万元以下的罚款；情节严重的，处十万元以上五十万元以下的罚款：</p>\n<ul>\n<li>（一）未在首页显著位置持续公示平台服务协议、交易规则信息或者上述信息的 链接标识的；</li>\n<li>（二）修改交易规则未在首页显著位置公开征求意见，未按照规定的时间提前公示修改内容，或者阻止平台内经营者退出的；</li>\n<li>（三）未以显著方式区分标记自营业务和平台内经营者开展的业务的； </li>\n<li>（四）未为消费者提供对平台内销售的商品或者提供的服务进行评价的途径，或者擅自删除消费者的评价的。</li>\n</ul>\n<p>电子商务平台经营者违反本法第四十条规定，对竞价排名的商品或者服务未显著标明“广告”的，依照《中华人民共和国广告法》的规定处罚。</p>\n<h4 id=\"第八十二条\"><a href=\"#第八十二条\" class=\"headerlink\" title=\"第八十二条\"></a>第八十二条</h4><p>电子商务平台经营者违反本法第三十五条规定，对平台内经营者在平台内的交易、交易价格或者与其他经营者的交易等进行不合理限制或者附加不合理条件，或者向平台内经营者收取不合理费用的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下 的罚款。</p>\n<h4 id=\"第八十三条\"><a href=\"#第八十三条\" class=\"headerlink\" title=\"第八十三条\"></a>第八十三条</h4><p>电子商务平台经营者违反本法第三十八条规定，对平台内经营者侵害消费者合法权益行为未采取必要措施，或者对平台内经营者未尽到资质资格审核义务，或者对消费者未尽到安全保障义务的，由市场监督管理部门责令限期改正，可以处五万元以上五十万元以下的罚款；情节严重的，责令停业整顿，并处五十万元以上二百万元以下的罚款。</p>\n<h4 id=\"第八十四条\"><a href=\"#第八十四条\" class=\"headerlink\" title=\"第八十四条\"></a>第八十四条</h4><p>电子商务平台经营者违反本法第四十二条、第四十五条规定，对平台内经营者实施侵犯知识产权行为未依法采取必要措施的，由有关知识产权行政部门责令限期改正；逾期不改正的，处五万元以上五十万元以下的罚款；情节严重的，处五十万元以上二百万元以下的罚款。</p>\n<h4 id=\"第八十五条\"><a href=\"#第八十五条\" class=\"headerlink\" title=\"第八十五条\"></a>第八十五条</h4><p>电子商务经营者违反本法规定，销售的商品或者提供的服务不符合保障人身、财产安全的要求，实施虚假或者引人误解的商业宣传等不正当竞争行为，滥用市场支配地位，或者实施侵犯知识产权、侵害消费者权益等行为的，依照有关法律的规定处罚。</p>\n<h4 id=\"第八十六条\"><a href=\"#第八十六条\" class=\"headerlink\" title=\"第八十六条\"></a>第八十六条</h4><p>电子商务经营者有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p>\n<h4 id=\"第八十七条\"><a href=\"#第八十七条\" class=\"headerlink\" title=\"第八十七条\"></a>第八十七条</h4><p>依法负有电子商务监督管理职责的部门的工作人员，玩忽职守、滥用职权、徇私舞弊，或者泄露、出售或者非法向他人提供在履行职责中所知悉的个人信息、隐私和商业秘密的，依法追究法律责任。</p>\n<h4 id=\"第八十八条\"><a href=\"#第八十八条\" class=\"headerlink\" title=\"第八十八条\"></a>第八十八条</h4><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p>\n<p><a class=\"link\"   href=\"https://github.com/blusewang/blog/files/5779079/default.pdf\" >中华人民共和国电子商务法.pdf<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"解决FreeBSD上的程序崩溃","date":"2021-02-27T09:50:34.000Z","_content":"\n## 第一步:开启核心转储\n\n```shell\nkern.corefile=/var/db/coredump/%N.core\nkern.coredump=1\nkern.nodump_coredump=1\nkern.sugid_coredump=1\n```\n当前设置,会让进程崩溃后,将核心转储至`/var/db/coredump/`文件夹下.\n\n## 第二步:等待\n\n定期检查`/var/log/message`文件,等待程序崩溃事件的到来.\n\n## 第三步:调试\n- 使用`lldb`打开`core`文件\n```shell\nlldb -c /var/db/coredump/mosquitto.core -- /usr/local/sbin/mosquitto\n```\n- 打开,进入后执行`bt`就看到详细错误了.非常简单.\n\n过程如图:\n![image](https://user-images.githubusercontent.com/1764005/109384031-354e3200-7925-11eb-802d-0ca220e55443.png)\n\n这表明是`libgdb.so`扩展里,调用`strcmp`函数时,参数给错了!\n\nso easy!~","source":"_posts/freebsd-lldb-debug-programe.md","raw":"---\ntitle: 解决FreeBSD上的程序崩溃\ndate: 2021-02-27 17:50:34\ntags: [FreeBSD, lldb, mosquitto]\n---\n\n## 第一步:开启核心转储\n\n```shell\nkern.corefile=/var/db/coredump/%N.core\nkern.coredump=1\nkern.nodump_coredump=1\nkern.sugid_coredump=1\n```\n当前设置,会让进程崩溃后,将核心转储至`/var/db/coredump/`文件夹下.\n\n## 第二步:等待\n\n定期检查`/var/log/message`文件,等待程序崩溃事件的到来.\n\n## 第三步:调试\n- 使用`lldb`打开`core`文件\n```shell\nlldb -c /var/db/coredump/mosquitto.core -- /usr/local/sbin/mosquitto\n```\n- 打开,进入后执行`bt`就看到详细错误了.非常简单.\n\n过程如图:\n![image](https://user-images.githubusercontent.com/1764005/109384031-354e3200-7925-11eb-802d-0ca220e55443.png)\n\n这表明是`libgdb.so`扩展里,调用`strcmp`函数时,参数给错了!\n\nso easy!~","slug":"freebsd-lldb-debug-programe","published":1,"updated":"2021-02-27T09:58:37.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklnjxso90000e1r80wao02ij","content":"<h2 id=\"第一步-开启核心转储\"><a href=\"#第一步-开启核心转储\" class=\"headerlink\" title=\"第一步:开启核心转储\"></a>第一步:开启核心转储</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kern.corefile=/var/db/coredump/%N.core</span><br><span class=\"line\">kern.coredump=1</span><br><span class=\"line\">kern.nodump_coredump=1</span><br><span class=\"line\">kern.sugid_coredump=1</span><br></pre></td></tr></table></figure>\n<p>当前设置,会让进程崩溃后,将核心转储至<code>/var/db/coredump/</code>文件夹下.</p>\n<h2 id=\"第二步-等待\"><a href=\"#第二步-等待\" class=\"headerlink\" title=\"第二步:等待\"></a>第二步:等待</h2><p>定期检查<code>/var/log/message</code>文件,等待程序崩溃事件的到来.</p>\n<h2 id=\"第三步-调试\"><a href=\"#第三步-调试\" class=\"headerlink\" title=\"第三步:调试\"></a>第三步:调试</h2><ul>\n<li>使用<code>lldb</code>打开<code>core</code>文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lldb -c /var/db/coredump/mosquitto.core -- /usr/local/sbin/mosquitto</span><br></pre></td></tr></table></figure></li>\n<li>打开,进入后执行<code>bt</code>就看到详细错误了.非常简单.</li>\n</ul>\n<p>过程如图:<br><img src=\"https://user-images.githubusercontent.com/1764005/109384031-354e3200-7925-11eb-802d-0ca220e55443.png\" alt=\"image\"></p>\n<p>这表明是<code>libgdb.so</code>扩展里,调用<code>strcmp</code>函数时,参数给错了!</p>\n<p>so easy!~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一步-开启核心转储\"><a href=\"#第一步-开启核心转储\" class=\"headerlink\" title=\"第一步:开启核心转储\"></a>第一步:开启核心转储</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kern.corefile=/var/db/coredump/%N.core</span><br><span class=\"line\">kern.coredump=1</span><br><span class=\"line\">kern.nodump_coredump=1</span><br><span class=\"line\">kern.sugid_coredump=1</span><br></pre></td></tr></table></figure>\n<p>当前设置,会让进程崩溃后,将核心转储至<code>/var/db/coredump/</code>文件夹下.</p>\n<h2 id=\"第二步-等待\"><a href=\"#第二步-等待\" class=\"headerlink\" title=\"第二步:等待\"></a>第二步:等待</h2><p>定期检查<code>/var/log/message</code>文件,等待程序崩溃事件的到来.</p>\n<h2 id=\"第三步-调试\"><a href=\"#第三步-调试\" class=\"headerlink\" title=\"第三步:调试\"></a>第三步:调试</h2><ul>\n<li>使用<code>lldb</code>打开<code>core</code>文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lldb -c /var/db/coredump/mosquitto.core -- /usr/local/sbin/mosquitto</span><br></pre></td></tr></table></figure></li>\n<li>打开,进入后执行<code>bt</code>就看到详细错误了.非常简单.</li>\n</ul>\n<p>过程如图:<br><img src=\"https://user-images.githubusercontent.com/1764005/109384031-354e3200-7925-11eb-802d-0ca220e55443.png\" alt=\"image\"></p>\n<p>这表明是<code>libgdb.so</code>扩展里,调用<code>strcmp</code>函数时,参数给错了!</p>\n<p>so easy!~</p>\n"},{"title":"MQTT5 协议新特性","date":"2021-03-15T08:03:08.000Z","_content":"\n### MQTT v5 (MQTT 5.0) 新特性介绍\n\n项目中逐步完成了 MQTT 5.0的开发，这里介绍下MQTT 5.0 的一些新特性\nMQTT 5.0 规范见：http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Toc514847900\n\n### 格式\n首先，协议上，增加了一个 Property字段，正是这个字段，使得 MQTT 5.0 可以支持众多的新特性。而在MQTT 3.1.1中，MQTT没有任何可以拓展的地方，限制了MQTT拓展功能的可能性。\n\n## request/response 模式\nMQTT 本身是 订阅/推送 模式，不像HTTP那样 请求/响应 模式。那么MQTT是如何在 订阅/推送 模式下支持 request/response 模式呢？\n这里简单翻译了 http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#Request/_Response 中举例的场景：\n\n（1）A publish 一个消息，消息topic假设是\"topicA\"，该消息 通过Property携带了Response Topic，假设该字段是\"topicresponse\"。\n（2）订阅了\"topicA\"的接收端B（有可能有多个）收到了该消息。\n（3）B处理完\"topicA\"后，会publish 一个 topic 名字是 “topicresponse” 的消息。该消息有可能是A订阅的，也有可能是其他人订阅的。\n（4）A publish 的消息，可能还会携带Correlation Data属性，假设其值是\"msgresponse\"，这样B发publish的消息就是(“topicresponse”, “msgresponse”)。\n\n## Server redirection\nServer可以发送 CONNACK 或者 DISCONNECT，其 Reason Codes 可以是0x9c或者0x9d，表示Client需要往另一个Server发送请求。\n0x9C 类似 HTTP 的 302, 0x9d 类似 HTTP的 301。\nCONNACK 或者 DISCONNECT 可以通过 Property携带Server redirection，其值可以告诉Client往哪个Server发送请求，类似HTTP的\"Location\"首部。\n\n## AUTH控制报文\nMQTT 单纯通过 CONNECT可能无法提供足够的信息给Server进行身份认证，所以 Server 在收到 MQTT 的 CONNECT 后，回复 AUTH控制报文给Client，Client接着也用 AUTH包发送附加信息，Server直到 认证完成后，才会发送 CONNACK。\n\n## Topic Alias\n类似HTTP2的头部压缩效果，当然，没有同HPACK那么复杂的东西。\n\n我们知道，PUBLISH消息的时候，需要携带 topic和message，其中topic往往是固定的，那么我们只需要第一次发送完整的 topic，并且通过Property中携带Topic Alias告知对端下次这个PUBLISH的topic会使用Topic Alias中的值代替，Topic Alias的值是一个整数类型的值。\n\nclient 通过 CONNECT 中 Topic Alias Maximum 告知 Server自己能处理的最多的 Topic Alias 个数。\nServer 通过 CONNACK中 Topic Alias Maximum 告知 Client自己能处理的最多的 Topic Alias 个数。\n\n如果当前PUBLISH消息的topic长度不为0，那么接受方需要解析 Topic Alias 中的值，并且 将topic和该值进行映射。\n如果当前PUBLISH消息的topic为0，那么接受方需要解析 Topic Alias 中的值，用该值去查找对应的topic。\n\n## User Property\n自定义属性，可以添加两端约定的数据。例如可以加入类似HTTP的 \"Header:value\"信息。MQTT本身没有类似HTTP的HOST信息，我们可以使用User Property特性让MQTT支持。\n\n## Session Expiry Interval\n之前的MQTT版本，当cleansession为0时，server和client会尝试保存session信息（sub信息、PUBLISH状态等），但是有个问题，server 不知道需要保存这个session多久。MQTT 5.0 就 在 Property字段中增加了Session Expiry Interval属性来告知server这个session希望被保存多久。\n\n如果MQTT 5.0 不携带 Session Expiry Interval或者 Session Expiry Interval设置为0，server和client则不会保存session信息。\n如果Session Expiry Interval设置为0xffffffff，则表示session永远不会老化。\n\n当然，这个字段是需要配合Clean Start使用的，如果Clean Start为1，那么 Session Expiry Interval设置多大都无意义。\n\nCONNECT、CONNACK、DISCONNECT都会发送 Session Expiry Interval字段。DISCONNECT中携带该字段可以告知Server更新老化时间。\nCONNACK中的Session Expiry Interval只有当CONNECT不携带该字段时才有用，当client携带该字段，server发送该字段只是表明自己最大的老化时间，不会强制client必须按照这个值。\n\n## Maximum QoS\nServer 可以发送 Maximum QoS属性告知Client自己支持最大的Qos是多少，Client发送的PUBLISH的Qos必然不能大于该值。\n\n## Receive Maximum\n告知对方自己希望处理未决的最大的 Qos1 或者 Qos2 PUBLISH消息个数，如果不存在，则默认是65535。\n作用：流控。\n因为当处理 Qos > 0 的PUBLISH的时候，需要回复对端PUBACK、PUBREC PUBCOMP等。Receive Maximum属性提供了告诉对端发送Qos>0的PUBLISH的速率，对端发现未决PUBLISH个数等于Receive Maximum时，不能再发送Qos > 0 的PUBLISH消息了。\n\n## Maximum Packet Size\n顾名思义，单个 MQTT控制报文 的大小，如果不携带，表示不限制。\n这个大小指整个 MQTT控制报文 的大小。对端如果发现将发送的包大于该大小，就默默丢弃，不关闭连接。如果自己收到超过自己通告的Maximum Packet Size需要关闭连接。\n\n## Topic Alias Maximum\n作用见上文Topic Alias。\n\n## Reason Code\nMQTT 3.1.1 只有CONNACK有是否成功还是失败的标志位，现在MQTT 5.0所有的ACK都有该标志位。具体各个ACK中code值得含义在规范中有定义，这里不再列举。\n需要注意的是，SUBACK中，MQTT 3.1.1 的 Granted Qos被取代为Reason Code，Reason Code中有状态码表示了具体的Granted Qos。\n如果PUBLISH是成功的，其ACK的的Reason Code可以不添加。\n\n## Reason String\n所有的ACK以及DISCONNECT 都可以携带 Reason String属性告知对方一些特殊的信息，一般来说是ACK失败的情况下会使用该属性告知对端为什么失败，可用来弥补Reason Code信息不够。\n\n## Clean Start\nClean Start取代了 MQTT3.1.1 中 CleanSession，在协议格式上，直接占用了CleanSession原本的field，这也表示Clean Start语义上和 CleanSession是一样的。\n\n## Payload Format Indicator\n指定了PUBLISH 消息的message部分是utf8格式的还是二进制的，接收方必须验证payload是否是该属性定义的格式。\nPayload Format Indicator 为 0，表示 是二进制，和不携带该属性的语义是一样的。\nPayload Format Indicator 为 1，表示 是utf8编码数据。\n\n## Message Expiry Interval\n指定了PUBLISH数据在Server的最长等待时间。超过这个时间，这个数据不能被publish到匹配topic的subscriber\n\n还有其他的细枝末节不再展开了，上述众多属性也有一些细节的地方，可以在原文中搜索就直到了。","source":"_posts/mqtt5-protocol.md","raw":"---\ntitle: MQTT5 协议新特性\ndate: 2021-03-15 16:03:08\ntags: [MQTT, 协议]\n---\n\n### MQTT v5 (MQTT 5.0) 新特性介绍\n\n项目中逐步完成了 MQTT 5.0的开发，这里介绍下MQTT 5.0 的一些新特性\nMQTT 5.0 规范见：http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Toc514847900\n\n### 格式\n首先，协议上，增加了一个 Property字段，正是这个字段，使得 MQTT 5.0 可以支持众多的新特性。而在MQTT 3.1.1中，MQTT没有任何可以拓展的地方，限制了MQTT拓展功能的可能性。\n\n## request/response 模式\nMQTT 本身是 订阅/推送 模式，不像HTTP那样 请求/响应 模式。那么MQTT是如何在 订阅/推送 模式下支持 request/response 模式呢？\n这里简单翻译了 http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#Request/_Response 中举例的场景：\n\n（1）A publish 一个消息，消息topic假设是\"topicA\"，该消息 通过Property携带了Response Topic，假设该字段是\"topicresponse\"。\n（2）订阅了\"topicA\"的接收端B（有可能有多个）收到了该消息。\n（3）B处理完\"topicA\"后，会publish 一个 topic 名字是 “topicresponse” 的消息。该消息有可能是A订阅的，也有可能是其他人订阅的。\n（4）A publish 的消息，可能还会携带Correlation Data属性，假设其值是\"msgresponse\"，这样B发publish的消息就是(“topicresponse”, “msgresponse”)。\n\n## Server redirection\nServer可以发送 CONNACK 或者 DISCONNECT，其 Reason Codes 可以是0x9c或者0x9d，表示Client需要往另一个Server发送请求。\n0x9C 类似 HTTP 的 302, 0x9d 类似 HTTP的 301。\nCONNACK 或者 DISCONNECT 可以通过 Property携带Server redirection，其值可以告诉Client往哪个Server发送请求，类似HTTP的\"Location\"首部。\n\n## AUTH控制报文\nMQTT 单纯通过 CONNECT可能无法提供足够的信息给Server进行身份认证，所以 Server 在收到 MQTT 的 CONNECT 后，回复 AUTH控制报文给Client，Client接着也用 AUTH包发送附加信息，Server直到 认证完成后，才会发送 CONNACK。\n\n## Topic Alias\n类似HTTP2的头部压缩效果，当然，没有同HPACK那么复杂的东西。\n\n我们知道，PUBLISH消息的时候，需要携带 topic和message，其中topic往往是固定的，那么我们只需要第一次发送完整的 topic，并且通过Property中携带Topic Alias告知对端下次这个PUBLISH的topic会使用Topic Alias中的值代替，Topic Alias的值是一个整数类型的值。\n\nclient 通过 CONNECT 中 Topic Alias Maximum 告知 Server自己能处理的最多的 Topic Alias 个数。\nServer 通过 CONNACK中 Topic Alias Maximum 告知 Client自己能处理的最多的 Topic Alias 个数。\n\n如果当前PUBLISH消息的topic长度不为0，那么接受方需要解析 Topic Alias 中的值，并且 将topic和该值进行映射。\n如果当前PUBLISH消息的topic为0，那么接受方需要解析 Topic Alias 中的值，用该值去查找对应的topic。\n\n## User Property\n自定义属性，可以添加两端约定的数据。例如可以加入类似HTTP的 \"Header:value\"信息。MQTT本身没有类似HTTP的HOST信息，我们可以使用User Property特性让MQTT支持。\n\n## Session Expiry Interval\n之前的MQTT版本，当cleansession为0时，server和client会尝试保存session信息（sub信息、PUBLISH状态等），但是有个问题，server 不知道需要保存这个session多久。MQTT 5.0 就 在 Property字段中增加了Session Expiry Interval属性来告知server这个session希望被保存多久。\n\n如果MQTT 5.0 不携带 Session Expiry Interval或者 Session Expiry Interval设置为0，server和client则不会保存session信息。\n如果Session Expiry Interval设置为0xffffffff，则表示session永远不会老化。\n\n当然，这个字段是需要配合Clean Start使用的，如果Clean Start为1，那么 Session Expiry Interval设置多大都无意义。\n\nCONNECT、CONNACK、DISCONNECT都会发送 Session Expiry Interval字段。DISCONNECT中携带该字段可以告知Server更新老化时间。\nCONNACK中的Session Expiry Interval只有当CONNECT不携带该字段时才有用，当client携带该字段，server发送该字段只是表明自己最大的老化时间，不会强制client必须按照这个值。\n\n## Maximum QoS\nServer 可以发送 Maximum QoS属性告知Client自己支持最大的Qos是多少，Client发送的PUBLISH的Qos必然不能大于该值。\n\n## Receive Maximum\n告知对方自己希望处理未决的最大的 Qos1 或者 Qos2 PUBLISH消息个数，如果不存在，则默认是65535。\n作用：流控。\n因为当处理 Qos > 0 的PUBLISH的时候，需要回复对端PUBACK、PUBREC PUBCOMP等。Receive Maximum属性提供了告诉对端发送Qos>0的PUBLISH的速率，对端发现未决PUBLISH个数等于Receive Maximum时，不能再发送Qos > 0 的PUBLISH消息了。\n\n## Maximum Packet Size\n顾名思义，单个 MQTT控制报文 的大小，如果不携带，表示不限制。\n这个大小指整个 MQTT控制报文 的大小。对端如果发现将发送的包大于该大小，就默默丢弃，不关闭连接。如果自己收到超过自己通告的Maximum Packet Size需要关闭连接。\n\n## Topic Alias Maximum\n作用见上文Topic Alias。\n\n## Reason Code\nMQTT 3.1.1 只有CONNACK有是否成功还是失败的标志位，现在MQTT 5.0所有的ACK都有该标志位。具体各个ACK中code值得含义在规范中有定义，这里不再列举。\n需要注意的是，SUBACK中，MQTT 3.1.1 的 Granted Qos被取代为Reason Code，Reason Code中有状态码表示了具体的Granted Qos。\n如果PUBLISH是成功的，其ACK的的Reason Code可以不添加。\n\n## Reason String\n所有的ACK以及DISCONNECT 都可以携带 Reason String属性告知对方一些特殊的信息，一般来说是ACK失败的情况下会使用该属性告知对端为什么失败，可用来弥补Reason Code信息不够。\n\n## Clean Start\nClean Start取代了 MQTT3.1.1 中 CleanSession，在协议格式上，直接占用了CleanSession原本的field，这也表示Clean Start语义上和 CleanSession是一样的。\n\n## Payload Format Indicator\n指定了PUBLISH 消息的message部分是utf8格式的还是二进制的，接收方必须验证payload是否是该属性定义的格式。\nPayload Format Indicator 为 0，表示 是二进制，和不携带该属性的语义是一样的。\nPayload Format Indicator 为 1，表示 是utf8编码数据。\n\n## Message Expiry Interval\n指定了PUBLISH数据在Server的最长等待时间。超过这个时间，这个数据不能被publish到匹配topic的subscriber\n\n还有其他的细枝末节不再展开了，上述众多属性也有一些细节的地方，可以在原文中搜索就直到了。","slug":"mqtt5-protocol","published":1,"updated":"2021-03-15T08:06:32.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmaazbbc0000gm8j5jsr5o2q","content":"<h3 id=\"MQTT-v5-MQTT-5-0-新特性介绍\"><a href=\"#MQTT-v5-MQTT-5-0-新特性介绍\" class=\"headerlink\" title=\"MQTT v5 (MQTT 5.0) 新特性介绍\"></a>MQTT v5 (MQTT 5.0) 新特性介绍</h3><p>项目中逐步完成了 MQTT 5.0的开发，这里介绍下MQTT 5.0 的一些新特性<br>MQTT 5.0 规范见：<a class=\"link\"   href=\"http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Toc514847900\" >http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Toc514847900<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>首先，协议上，增加了一个 Property字段，正是这个字段，使得 MQTT 5.0 可以支持众多的新特性。而在MQTT 3.1.1中，MQTT没有任何可以拓展的地方，限制了MQTT拓展功能的可能性。</p>\n<h2 id=\"request-response-模式\"><a href=\"#request-response-模式\" class=\"headerlink\" title=\"request/response 模式\"></a>request/response 模式</h2><p>MQTT 本身是 订阅/推送 模式，不像HTTP那样 请求/响应 模式。那么MQTT是如何在 订阅/推送 模式下支持 request/response 模式呢？<br>这里简单翻译了 <a class=\"link\"   href=\"http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#Request/_Response\" >http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#Request/_Response<i class=\"fas fa-external-link-alt\"></i></a> 中举例的场景：</p>\n<p>（1）A publish 一个消息，消息topic假设是”topicA”，该消息 通过Property携带了Response Topic，假设该字段是”topicresponse”。<br>（2）订阅了”topicA”的接收端B（有可能有多个）收到了该消息。<br>（3）B处理完”topicA”后，会publish 一个 topic 名字是 “topicresponse” 的消息。该消息有可能是A订阅的，也有可能是其他人订阅的。<br>（4）A publish 的消息，可能还会携带Correlation Data属性，假设其值是”msgresponse”，这样B发publish的消息就是(“topicresponse”, “msgresponse”)。</p>\n<h2 id=\"Server-redirection\"><a href=\"#Server-redirection\" class=\"headerlink\" title=\"Server redirection\"></a>Server redirection</h2><p>Server可以发送 CONNACK 或者 DISCONNECT，其 Reason Codes 可以是0x9c或者0x9d，表示Client需要往另一个Server发送请求。<br>0x9C 类似 HTTP 的 302, 0x9d 类似 HTTP的 301。<br>CONNACK 或者 DISCONNECT 可以通过 Property携带Server redirection，其值可以告诉Client往哪个Server发送请求，类似HTTP的”Location”首部。</p>\n<h2 id=\"AUTH控制报文\"><a href=\"#AUTH控制报文\" class=\"headerlink\" title=\"AUTH控制报文\"></a>AUTH控制报文</h2><p>MQTT 单纯通过 CONNECT可能无法提供足够的信息给Server进行身份认证，所以 Server 在收到 MQTT 的 CONNECT 后，回复 AUTH控制报文给Client，Client接着也用 AUTH包发送附加信息，Server直到 认证完成后，才会发送 CONNACK。</p>\n<h2 id=\"Topic-Alias\"><a href=\"#Topic-Alias\" class=\"headerlink\" title=\"Topic Alias\"></a>Topic Alias</h2><p>类似HTTP2的头部压缩效果，当然，没有同HPACK那么复杂的东西。</p>\n<p>我们知道，PUBLISH消息的时候，需要携带 topic和message，其中topic往往是固定的，那么我们只需要第一次发送完整的 topic，并且通过Property中携带Topic Alias告知对端下次这个PUBLISH的topic会使用Topic Alias中的值代替，Topic Alias的值是一个整数类型的值。</p>\n<p>client 通过 CONNECT 中 Topic Alias Maximum 告知 Server自己能处理的最多的 Topic Alias 个数。<br>Server 通过 CONNACK中 Topic Alias Maximum 告知 Client自己能处理的最多的 Topic Alias 个数。</p>\n<p>如果当前PUBLISH消息的topic长度不为0，那么接受方需要解析 Topic Alias 中的值，并且 将topic和该值进行映射。<br>如果当前PUBLISH消息的topic为0，那么接受方需要解析 Topic Alias 中的值，用该值去查找对应的topic。</p>\n<h2 id=\"User-Property\"><a href=\"#User-Property\" class=\"headerlink\" title=\"User Property\"></a>User Property</h2><p>自定义属性，可以添加两端约定的数据。例如可以加入类似HTTP的 “Header:value”信息。MQTT本身没有类似HTTP的HOST信息，我们可以使用User Property特性让MQTT支持。</p>\n<h2 id=\"Session-Expiry-Interval\"><a href=\"#Session-Expiry-Interval\" class=\"headerlink\" title=\"Session Expiry Interval\"></a>Session Expiry Interval</h2><p>之前的MQTT版本，当cleansession为0时，server和client会尝试保存session信息（sub信息、PUBLISH状态等），但是有个问题，server 不知道需要保存这个session多久。MQTT 5.0 就 在 Property字段中增加了Session Expiry Interval属性来告知server这个session希望被保存多久。</p>\n<p>如果MQTT 5.0 不携带 Session Expiry Interval或者 Session Expiry Interval设置为0，server和client则不会保存session信息。<br>如果Session Expiry Interval设置为0xffffffff，则表示session永远不会老化。</p>\n<p>当然，这个字段是需要配合Clean Start使用的，如果Clean Start为1，那么 Session Expiry Interval设置多大都无意义。</p>\n<p>CONNECT、CONNACK、DISCONNECT都会发送 Session Expiry Interval字段。DISCONNECT中携带该字段可以告知Server更新老化时间。<br>CONNACK中的Session Expiry Interval只有当CONNECT不携带该字段时才有用，当client携带该字段，server发送该字段只是表明自己最大的老化时间，不会强制client必须按照这个值。</p>\n<h2 id=\"Maximum-QoS\"><a href=\"#Maximum-QoS\" class=\"headerlink\" title=\"Maximum QoS\"></a>Maximum QoS</h2><p>Server 可以发送 Maximum QoS属性告知Client自己支持最大的Qos是多少，Client发送的PUBLISH的Qos必然不能大于该值。</p>\n<h2 id=\"Receive-Maximum\"><a href=\"#Receive-Maximum\" class=\"headerlink\" title=\"Receive Maximum\"></a>Receive Maximum</h2><p>告知对方自己希望处理未决的最大的 Qos1 或者 Qos2 PUBLISH消息个数，如果不存在，则默认是65535。<br>作用：流控。<br>因为当处理 Qos &gt; 0 的PUBLISH的时候，需要回复对端PUBACK、PUBREC PUBCOMP等。Receive Maximum属性提供了告诉对端发送Qos&gt;0的PUBLISH的速率，对端发现未决PUBLISH个数等于Receive Maximum时，不能再发送Qos &gt; 0 的PUBLISH消息了。</p>\n<h2 id=\"Maximum-Packet-Size\"><a href=\"#Maximum-Packet-Size\" class=\"headerlink\" title=\"Maximum Packet Size\"></a>Maximum Packet Size</h2><p>顾名思义，单个 MQTT控制报文 的大小，如果不携带，表示不限制。<br>这个大小指整个 MQTT控制报文 的大小。对端如果发现将发送的包大于该大小，就默默丢弃，不关闭连接。如果自己收到超过自己通告的Maximum Packet Size需要关闭连接。</p>\n<h2 id=\"Topic-Alias-Maximum\"><a href=\"#Topic-Alias-Maximum\" class=\"headerlink\" title=\"Topic Alias Maximum\"></a>Topic Alias Maximum</h2><p>作用见上文Topic Alias。</p>\n<h2 id=\"Reason-Code\"><a href=\"#Reason-Code\" class=\"headerlink\" title=\"Reason Code\"></a>Reason Code</h2><p>MQTT 3.1.1 只有CONNACK有是否成功还是失败的标志位，现在MQTT 5.0所有的ACK都有该标志位。具体各个ACK中code值得含义在规范中有定义，这里不再列举。<br>需要注意的是，SUBACK中，MQTT 3.1.1 的 Granted Qos被取代为Reason Code，Reason Code中有状态码表示了具体的Granted Qos。<br>如果PUBLISH是成功的，其ACK的的Reason Code可以不添加。</p>\n<h2 id=\"Reason-String\"><a href=\"#Reason-String\" class=\"headerlink\" title=\"Reason String\"></a>Reason String</h2><p>所有的ACK以及DISCONNECT 都可以携带 Reason String属性告知对方一些特殊的信息，一般来说是ACK失败的情况下会使用该属性告知对端为什么失败，可用来弥补Reason Code信息不够。</p>\n<h2 id=\"Clean-Start\"><a href=\"#Clean-Start\" class=\"headerlink\" title=\"Clean Start\"></a>Clean Start</h2><p>Clean Start取代了 MQTT3.1.1 中 CleanSession，在协议格式上，直接占用了CleanSession原本的field，这也表示Clean Start语义上和 CleanSession是一样的。</p>\n<h2 id=\"Payload-Format-Indicator\"><a href=\"#Payload-Format-Indicator\" class=\"headerlink\" title=\"Payload Format Indicator\"></a>Payload Format Indicator</h2><p>指定了PUBLISH 消息的message部分是utf8格式的还是二进制的，接收方必须验证payload是否是该属性定义的格式。<br>Payload Format Indicator 为 0，表示 是二进制，和不携带该属性的语义是一样的。<br>Payload Format Indicator 为 1，表示 是utf8编码数据。</p>\n<h2 id=\"Message-Expiry-Interval\"><a href=\"#Message-Expiry-Interval\" class=\"headerlink\" title=\"Message Expiry Interval\"></a>Message Expiry Interval</h2><p>指定了PUBLISH数据在Server的最长等待时间。超过这个时间，这个数据不能被publish到匹配topic的subscriber</p>\n<p>还有其他的细枝末节不再展开了，上述众多属性也有一些细节的地方，可以在原文中搜索就直到了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MQTT-v5-MQTT-5-0-新特性介绍\"><a href=\"#MQTT-v5-MQTT-5-0-新特性介绍\" class=\"headerlink\" title=\"MQTT v5 (MQTT 5.0) 新特性介绍\"></a>MQTT v5 (MQTT 5.0) 新特性介绍</h3><p>项目中逐步完成了 MQTT 5.0的开发，这里介绍下MQTT 5.0 的一些新特性<br>MQTT 5.0 规范见：<a class=\"link\"   href=\"http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Toc514847900\" >http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Toc514847900<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>首先，协议上，增加了一个 Property字段，正是这个字段，使得 MQTT 5.0 可以支持众多的新特性。而在MQTT 3.1.1中，MQTT没有任何可以拓展的地方，限制了MQTT拓展功能的可能性。</p>\n<h2 id=\"request-response-模式\"><a href=\"#request-response-模式\" class=\"headerlink\" title=\"request/response 模式\"></a>request/response 模式</h2><p>MQTT 本身是 订阅/推送 模式，不像HTTP那样 请求/响应 模式。那么MQTT是如何在 订阅/推送 模式下支持 request/response 模式呢？<br>这里简单翻译了 <a class=\"link\"   href=\"http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#Request/_Response\" >http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#Request/_Response<i class=\"fas fa-external-link-alt\"></i></a> 中举例的场景：</p>\n<p>（1）A publish 一个消息，消息topic假设是”topicA”，该消息 通过Property携带了Response Topic，假设该字段是”topicresponse”。<br>（2）订阅了”topicA”的接收端B（有可能有多个）收到了该消息。<br>（3）B处理完”topicA”后，会publish 一个 topic 名字是 “topicresponse” 的消息。该消息有可能是A订阅的，也有可能是其他人订阅的。<br>（4）A publish 的消息，可能还会携带Correlation Data属性，假设其值是”msgresponse”，这样B发publish的消息就是(“topicresponse”, “msgresponse”)。</p>\n<h2 id=\"Server-redirection\"><a href=\"#Server-redirection\" class=\"headerlink\" title=\"Server redirection\"></a>Server redirection</h2><p>Server可以发送 CONNACK 或者 DISCONNECT，其 Reason Codes 可以是0x9c或者0x9d，表示Client需要往另一个Server发送请求。<br>0x9C 类似 HTTP 的 302, 0x9d 类似 HTTP的 301。<br>CONNACK 或者 DISCONNECT 可以通过 Property携带Server redirection，其值可以告诉Client往哪个Server发送请求，类似HTTP的”Location”首部。</p>\n<h2 id=\"AUTH控制报文\"><a href=\"#AUTH控制报文\" class=\"headerlink\" title=\"AUTH控制报文\"></a>AUTH控制报文</h2><p>MQTT 单纯通过 CONNECT可能无法提供足够的信息给Server进行身份认证，所以 Server 在收到 MQTT 的 CONNECT 后，回复 AUTH控制报文给Client，Client接着也用 AUTH包发送附加信息，Server直到 认证完成后，才会发送 CONNACK。</p>\n<h2 id=\"Topic-Alias\"><a href=\"#Topic-Alias\" class=\"headerlink\" title=\"Topic Alias\"></a>Topic Alias</h2><p>类似HTTP2的头部压缩效果，当然，没有同HPACK那么复杂的东西。</p>\n<p>我们知道，PUBLISH消息的时候，需要携带 topic和message，其中topic往往是固定的，那么我们只需要第一次发送完整的 topic，并且通过Property中携带Topic Alias告知对端下次这个PUBLISH的topic会使用Topic Alias中的值代替，Topic Alias的值是一个整数类型的值。</p>\n<p>client 通过 CONNECT 中 Topic Alias Maximum 告知 Server自己能处理的最多的 Topic Alias 个数。<br>Server 通过 CONNACK中 Topic Alias Maximum 告知 Client自己能处理的最多的 Topic Alias 个数。</p>\n<p>如果当前PUBLISH消息的topic长度不为0，那么接受方需要解析 Topic Alias 中的值，并且 将topic和该值进行映射。<br>如果当前PUBLISH消息的topic为0，那么接受方需要解析 Topic Alias 中的值，用该值去查找对应的topic。</p>\n<h2 id=\"User-Property\"><a href=\"#User-Property\" class=\"headerlink\" title=\"User Property\"></a>User Property</h2><p>自定义属性，可以添加两端约定的数据。例如可以加入类似HTTP的 “Header:value”信息。MQTT本身没有类似HTTP的HOST信息，我们可以使用User Property特性让MQTT支持。</p>\n<h2 id=\"Session-Expiry-Interval\"><a href=\"#Session-Expiry-Interval\" class=\"headerlink\" title=\"Session Expiry Interval\"></a>Session Expiry Interval</h2><p>之前的MQTT版本，当cleansession为0时，server和client会尝试保存session信息（sub信息、PUBLISH状态等），但是有个问题，server 不知道需要保存这个session多久。MQTT 5.0 就 在 Property字段中增加了Session Expiry Interval属性来告知server这个session希望被保存多久。</p>\n<p>如果MQTT 5.0 不携带 Session Expiry Interval或者 Session Expiry Interval设置为0，server和client则不会保存session信息。<br>如果Session Expiry Interval设置为0xffffffff，则表示session永远不会老化。</p>\n<p>当然，这个字段是需要配合Clean Start使用的，如果Clean Start为1，那么 Session Expiry Interval设置多大都无意义。</p>\n<p>CONNECT、CONNACK、DISCONNECT都会发送 Session Expiry Interval字段。DISCONNECT中携带该字段可以告知Server更新老化时间。<br>CONNACK中的Session Expiry Interval只有当CONNECT不携带该字段时才有用，当client携带该字段，server发送该字段只是表明自己最大的老化时间，不会强制client必须按照这个值。</p>\n<h2 id=\"Maximum-QoS\"><a href=\"#Maximum-QoS\" class=\"headerlink\" title=\"Maximum QoS\"></a>Maximum QoS</h2><p>Server 可以发送 Maximum QoS属性告知Client自己支持最大的Qos是多少，Client发送的PUBLISH的Qos必然不能大于该值。</p>\n<h2 id=\"Receive-Maximum\"><a href=\"#Receive-Maximum\" class=\"headerlink\" title=\"Receive Maximum\"></a>Receive Maximum</h2><p>告知对方自己希望处理未决的最大的 Qos1 或者 Qos2 PUBLISH消息个数，如果不存在，则默认是65535。<br>作用：流控。<br>因为当处理 Qos &gt; 0 的PUBLISH的时候，需要回复对端PUBACK、PUBREC PUBCOMP等。Receive Maximum属性提供了告诉对端发送Qos&gt;0的PUBLISH的速率，对端发现未决PUBLISH个数等于Receive Maximum时，不能再发送Qos &gt; 0 的PUBLISH消息了。</p>\n<h2 id=\"Maximum-Packet-Size\"><a href=\"#Maximum-Packet-Size\" class=\"headerlink\" title=\"Maximum Packet Size\"></a>Maximum Packet Size</h2><p>顾名思义，单个 MQTT控制报文 的大小，如果不携带，表示不限制。<br>这个大小指整个 MQTT控制报文 的大小。对端如果发现将发送的包大于该大小，就默默丢弃，不关闭连接。如果自己收到超过自己通告的Maximum Packet Size需要关闭连接。</p>\n<h2 id=\"Topic-Alias-Maximum\"><a href=\"#Topic-Alias-Maximum\" class=\"headerlink\" title=\"Topic Alias Maximum\"></a>Topic Alias Maximum</h2><p>作用见上文Topic Alias。</p>\n<h2 id=\"Reason-Code\"><a href=\"#Reason-Code\" class=\"headerlink\" title=\"Reason Code\"></a>Reason Code</h2><p>MQTT 3.1.1 只有CONNACK有是否成功还是失败的标志位，现在MQTT 5.0所有的ACK都有该标志位。具体各个ACK中code值得含义在规范中有定义，这里不再列举。<br>需要注意的是，SUBACK中，MQTT 3.1.1 的 Granted Qos被取代为Reason Code，Reason Code中有状态码表示了具体的Granted Qos。<br>如果PUBLISH是成功的，其ACK的的Reason Code可以不添加。</p>\n<h2 id=\"Reason-String\"><a href=\"#Reason-String\" class=\"headerlink\" title=\"Reason String\"></a>Reason String</h2><p>所有的ACK以及DISCONNECT 都可以携带 Reason String属性告知对方一些特殊的信息，一般来说是ACK失败的情况下会使用该属性告知对端为什么失败，可用来弥补Reason Code信息不够。</p>\n<h2 id=\"Clean-Start\"><a href=\"#Clean-Start\" class=\"headerlink\" title=\"Clean Start\"></a>Clean Start</h2><p>Clean Start取代了 MQTT3.1.1 中 CleanSession，在协议格式上，直接占用了CleanSession原本的field，这也表示Clean Start语义上和 CleanSession是一样的。</p>\n<h2 id=\"Payload-Format-Indicator\"><a href=\"#Payload-Format-Indicator\" class=\"headerlink\" title=\"Payload Format Indicator\"></a>Payload Format Indicator</h2><p>指定了PUBLISH 消息的message部分是utf8格式的还是二进制的，接收方必须验证payload是否是该属性定义的格式。<br>Payload Format Indicator 为 0，表示 是二进制，和不携带该属性的语义是一样的。<br>Payload Format Indicator 为 1，表示 是utf8编码数据。</p>\n<h2 id=\"Message-Expiry-Interval\"><a href=\"#Message-Expiry-Interval\" class=\"headerlink\" title=\"Message Expiry Interval\"></a>Message Expiry Interval</h2><p>指定了PUBLISH数据在Server的最长等待时间。超过这个时间，这个数据不能被publish到匹配topic的subscriber</p>\n<p>还有其他的细枝末节不再展开了，上述众多属性也有一些细节的地方，可以在原文中搜索就直到了。</p>\n"},{"title":"阿里云 FreeBSD 挂载云盘","date":"2021-08-03T08:02:25.000Z","_content":"\n添加云盘后，重启ECS。在`/dev`下会多出一个`/dev/vtbd1`\n\n- 分区\n``` shell\ngpart create -s GPT vtbd1\ngpart add -t freebsd-ufs vtbd1\n```\n\n- 格式化\n``` shell\nnewfs -U /dev/vtbd1p1\n```\n\n- 创建挂载点\n``` shell\nmkdir /data\n```\n\n- 写入`fstab`\n``` shell\necho '/dev/vtbd1p1\t/data\tufs\trw\t2\t2' >> /etc/fstab\n```\n\n- 手工挂载\n``` shell\nmount /data\n```\n","source":"_posts/aliyun-freebsd-mount-cloud-disk.md","raw":"---\ntitle: 阿里云 FreeBSD 挂载云盘\ndate: 2021-08-03 16:02:25\ntags: [FreeBSD, mount, 阿里云]\n---\n\n添加云盘后，重启ECS。在`/dev`下会多出一个`/dev/vtbd1`\n\n- 分区\n``` shell\ngpart create -s GPT vtbd1\ngpart add -t freebsd-ufs vtbd1\n```\n\n- 格式化\n``` shell\nnewfs -U /dev/vtbd1p1\n```\n\n- 创建挂载点\n``` shell\nmkdir /data\n```\n\n- 写入`fstab`\n``` shell\necho '/dev/vtbd1p1\t/data\tufs\trw\t2\t2' >> /etc/fstab\n```\n\n- 手工挂载\n``` shell\nmount /data\n```\n","slug":"aliyun-freebsd-mount-cloud-disk","published":1,"updated":"2021-08-03T08:12:54.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrvsanl10000gsr81vtt8mk9","content":"<p>添加云盘后，重启ECS。在<code>/dev</code>下会多出一个<code>/dev/vtbd1</code></p>\n<ul>\n<li>分区<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpart create -s GPT vtbd1</span><br><span class=\"line\">gpart add -t freebsd-ufs vtbd1</span><br></pre></td></tr></table></figure></li>\n<li>格式化<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newfs -U /dev/vtbd1p1</span><br></pre></td></tr></table></figure></li>\n<li>创建挂载点<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure></li>\n<li>写入<code>fstab</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;/dev/vtbd1p1\t/data\tufs\trw\t2\t2&#x27; &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure></li>\n<li>手工挂载<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /data</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>添加云盘后，重启ECS。在<code>/dev</code>下会多出一个<code>/dev/vtbd1</code></p>\n<ul>\n<li>分区<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpart create -s GPT vtbd1</span><br><span class=\"line\">gpart add -t freebsd-ufs vtbd1</span><br></pre></td></tr></table></figure></li>\n<li>格式化<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newfs -U /dev/vtbd1p1</span><br></pre></td></tr></table></figure></li>\n<li>创建挂载点<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure></li>\n<li>写入<code>fstab</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;/dev/vtbd1p1\t/data\tufs\trw\t2\t2&#x27; &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure></li>\n<li>手工挂载<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /data</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"golang项目的自动化部署","date":"2021-09-09T09:04:31.000Z","_content":"\n在Go项目中。部署可以使用`Makefile`管理编译脚本、打包上传二进制至服务器的功能。\n\n但在服务器上，如何自动在收到上传后自动停止服务，解压二进制包，替换旧二进制文件，再启动。这是个一直困扰我的问题。\n\n在`Debian`上可以使用`systemd`的`service`脚本，实现守护，并实现启动前的预检测新包功能。\n\n但`service`脚本无法感知到有新版的二进制包被上传。\n\n想了很多办法，但都不如意：\n\n- 采用用`Golang`写一个文件监测服务。杀鸡用了宰牛刀。\n\n- 装自动化CI服务之类的，重且不说，业务分布在不同的主机，挨个安装部署太费精力。\n\n- 装一个`git`服务。利用`git`的`Hook`触发部署。可将源码部署在生产主机上，不合适不说，还是要挨个主机装一个。\n\n# 理想方案\n今天偶然想到了`shell`查了一下。结果一下就通了。\n\n首先在`Debian`上安装文件监测工具。`inotify-tools`\n\n### 一个监控脚本：\n```shell\n#!/bin/bash\nfilename=$1\ninotifywait -mq --format '%f,%e' -e close_write $filename | while read file\ndo\n\tcase $file in messager.tgz,CLOSE_WRITE,CLOSE) service messager restart;;\n\tesac\n\tcase $file in crmd.tgz,CLOSE_WRITE,CLOSE) service crmd restart ;;\n\tesac\ndone\n```\n\n### 为这个监测脚本编写守护服务：\n```shell\ncat /usr/lib/systemd/system/watchdog.service\n[Unit]\nDescription=Watch dog server\n\n[Service]\nType=simple\nRestart=always\nUser=root\nGroup=root\nRestartSec=3\nExecStart=/usr/local/bin/watchdog /usr/local/bin\n\n[Install]\nWantedBy=multi-user.target\n\n```\n### 启动它\n\n    `systemctl enable watchdog`\n    `service watchdog start`\n\nDone！现在只要在开发环境`make install`。服务器收到了二进制包，就会在无人执守的条件下，自动部署更新包。并重启！\n","source":"_posts/golang-auto-deploy.md","raw":"---\ntitle: golang项目的自动化部署\ndate: 2021-09-09 17:04:31\ntags: [golang,部署]\n---\n\n在Go项目中。部署可以使用`Makefile`管理编译脚本、打包上传二进制至服务器的功能。\n\n但在服务器上，如何自动在收到上传后自动停止服务，解压二进制包，替换旧二进制文件，再启动。这是个一直困扰我的问题。\n\n在`Debian`上可以使用`systemd`的`service`脚本，实现守护，并实现启动前的预检测新包功能。\n\n但`service`脚本无法感知到有新版的二进制包被上传。\n\n想了很多办法，但都不如意：\n\n- 采用用`Golang`写一个文件监测服务。杀鸡用了宰牛刀。\n\n- 装自动化CI服务之类的，重且不说，业务分布在不同的主机，挨个安装部署太费精力。\n\n- 装一个`git`服务。利用`git`的`Hook`触发部署。可将源码部署在生产主机上，不合适不说，还是要挨个主机装一个。\n\n# 理想方案\n今天偶然想到了`shell`查了一下。结果一下就通了。\n\n首先在`Debian`上安装文件监测工具。`inotify-tools`\n\n### 一个监控脚本：\n```shell\n#!/bin/bash\nfilename=$1\ninotifywait -mq --format '%f,%e' -e close_write $filename | while read file\ndo\n\tcase $file in messager.tgz,CLOSE_WRITE,CLOSE) service messager restart;;\n\tesac\n\tcase $file in crmd.tgz,CLOSE_WRITE,CLOSE) service crmd restart ;;\n\tesac\ndone\n```\n\n### 为这个监测脚本编写守护服务：\n```shell\ncat /usr/lib/systemd/system/watchdog.service\n[Unit]\nDescription=Watch dog server\n\n[Service]\nType=simple\nRestart=always\nUser=root\nGroup=root\nRestartSec=3\nExecStart=/usr/local/bin/watchdog /usr/local/bin\n\n[Install]\nWantedBy=multi-user.target\n\n```\n### 启动它\n\n    `systemctl enable watchdog`\n    `service watchdog start`\n\nDone！现在只要在开发环境`make install`。服务器收到了二进制包，就会在无人执守的条件下，自动部署更新包。并重启！\n","slug":"golang-auto-deploy","published":1,"updated":"2021-09-11T08:40:07.432Z","_id":"cktcq2kw90000qhr86rn82cji","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在Go项目中。部署可以使用<code>Makefile</code>管理编译脚本、打包上传二进制至服务器的功能。</p>\n<p>但在服务器上，如何自动在收到上传后自动停止服务，解压二进制包，替换旧二进制文件，再启动。这是个一直困扰我的问题。</p>\n<p>在<code>Debian</code>上可以使用<code>systemd</code>的<code>service</code>脚本，实现守护，并实现启动前的预检测新包功能。</p>\n<p>但<code>service</code>脚本无法感知到有新版的二进制包被上传。</p>\n<p>想了很多办法，但都不如意：</p>\n<ul>\n<li><p>采用用<code>Golang</code>写一个文件监测服务。杀鸡用了宰牛刀。</p>\n</li>\n<li><p>装自动化CI服务之类的，重且不说，业务分布在不同的主机，挨个安装部署太费精力。</p>\n</li>\n<li><p>装一个<code>git</code>服务。利用<code>git</code>的<code>Hook</code>触发部署。可将源码部署在生产主机上，不合适不说，还是要挨个主机装一个。</p>\n</li>\n</ul>\n<h1 id=\"理想方案\"><a href=\"#理想方案\" class=\"headerlink\" title=\"理想方案\"></a>理想方案</h1><p>今天偶然想到了<code>shell</code>查了一下。结果一下就通了。</p>\n<p>首先在<code>Debian</code>上安装文件监测工具。<code>inotify-tools</code></p>\n<h3 id=\"一个监控脚本：\"><a href=\"#一个监控脚本：\" class=\"headerlink\" title=\"一个监控脚本：\"></a>一个监控脚本：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">filename=$1</span><br><span class=\"line\">inotifywait -mq --format &#x27;%f,%e&#x27; -e close_write $filename | while read file</span><br><span class=\"line\">do</span><br><span class=\"line\">\tcase $file in messager.tgz,CLOSE_WRITE,CLOSE) service messager restart;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">\tcase $file in crmd.tgz,CLOSE_WRITE,CLOSE) service crmd restart ;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"为这个监测脚本编写守护服务：\"><a href=\"#为这个监测脚本编写守护服务：\" class=\"headerlink\" title=\"为这个监测脚本编写守护服务：\"></a>为这个监测脚本编写守护服务：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/lib/systemd/system/watchdog.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Watch dog server</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\">RestartSec=3</span><br><span class=\"line\">ExecStart=/usr/local/bin/watchdog /usr/local/bin</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动它\"><a href=\"#启动它\" class=\"headerlink\" title=\"启动它\"></a>启动它</h3><pre><code>`systemctl enable watchdog`\n`service watchdog start`</code></pre>\n<p>Done！现在只要在开发环境<code>make install</code>。服务器收到了二进制包，就会在无人执守的条件下，自动部署更新包。并重启！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在Go项目中。部署可以使用<code>Makefile</code>管理编译脚本、打包上传二进制至服务器的功能。</p>\n<p>但在服务器上，如何自动在收到上传后自动停止服务，解压二进制包，替换旧二进制文件，再启动。这是个一直困扰我的问题。</p>\n<p>在<code>Debian</code>上可以使用<code>systemd</code>的<code>service</code>脚本，实现守护，并实现启动前的预检测新包功能。</p>\n<p>但<code>service</code>脚本无法感知到有新版的二进制包被上传。</p>\n<p>想了很多办法，但都不如意：</p>\n<ul>\n<li><p>采用用<code>Golang</code>写一个文件监测服务。杀鸡用了宰牛刀。</p>\n</li>\n<li><p>装自动化CI服务之类的，重且不说，业务分布在不同的主机，挨个安装部署太费精力。</p>\n</li>\n<li><p>装一个<code>git</code>服务。利用<code>git</code>的<code>Hook</code>触发部署。可将源码部署在生产主机上，不合适不说，还是要挨个主机装一个。</p>\n</li>\n</ul>\n<h1 id=\"理想方案\"><a href=\"#理想方案\" class=\"headerlink\" title=\"理想方案\"></a>理想方案</h1><p>今天偶然想到了<code>shell</code>查了一下。结果一下就通了。</p>\n<p>首先在<code>Debian</code>上安装文件监测工具。<code>inotify-tools</code></p>\n<h3 id=\"一个监控脚本：\"><a href=\"#一个监控脚本：\" class=\"headerlink\" title=\"一个监控脚本：\"></a>一个监控脚本：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">filename=$1</span><br><span class=\"line\">inotifywait -mq --format &#x27;%f,%e&#x27; -e close_write $filename | while read file</span><br><span class=\"line\">do</span><br><span class=\"line\">\tcase $file in messager.tgz,CLOSE_WRITE,CLOSE) service messager restart;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">\tcase $file in crmd.tgz,CLOSE_WRITE,CLOSE) service crmd restart ;;</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"为这个监测脚本编写守护服务：\"><a href=\"#为这个监测脚本编写守护服务：\" class=\"headerlink\" title=\"为这个监测脚本编写守护服务：\"></a>为这个监测脚本编写守护服务：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/lib/systemd/system/watchdog.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Watch dog server</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\">RestartSec=3</span><br><span class=\"line\">ExecStart=/usr/local/bin/watchdog /usr/local/bin</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动它\"><a href=\"#启动它\" class=\"headerlink\" title=\"启动它\"></a>启动它</h3><pre><code>`systemctl enable watchdog`\n`service watchdog start`</code></pre>\n<p>Done！现在只要在开发环境<code>make install</code>。服务器收到了二进制包，就会在无人执守的条件下，自动部署更新包。并重启！</p>\n"},{"title":"PostgreSQL 防误删，最佳的备份、恢复方案，实现高可用","date":"2021-11-16T01:31:03.000Z","_content":"\n误删是一个无法回避的数据库风险。没有不犯错的人，当数据被误删或被错误数据覆盖，都将造成数据损失。如何实现，既能找回100%丢失的数据，又不大费周章？\n\n## 方案博采&筛选\n见常的备份方案有：\n- 热备份 - 这个备份对找回数据没有作用\n- 定时备份 - 这个方案既耗费资源又无法实现100%找回数据，总有部分数据丢失。数据库越庞大，备份消耗时间越长，要么阻碍线上主库，要么备份失败。\n- 文件系统快照 - 这个性能高，但同样无法恢复100%的数据\n- 基准备份+WAL归档+流复制+恢复目标限制 - 能实现想恢复到哪个时刻就恢复到哪个时刻，但只能按时间正向恢复；这个可以通过多次尝试的方式弥补。\n\n**基准备份+WAL归档+流复制+恢复目标限制** 的方案是最佳方案。那么如何构建它呢？\n\n## 数据流程图\n我们来画个设计图：\n```mermaid\ngraph LR\nsubgraph 主服务器\nmain[(主数据库)]\nmwal[WAL归档文件夹]\nend\n\nsubgraph 后备服务器\nbk[(后备数据库)]\nrsyncd([rsyncd])\nbwal[WAL连续归档文件夹]\nend\n\nmain-->|wal传送|bk\nmwal-->|在线增量备份|rsyncd\nrsyncd-->bwal\n```\n\n## 方案说明\n上图中有了两套传送方案：\n- `wal传送`流复制用来跟上线上主库最新的数据。\n- `在线增量备份`复制归档用来复制旧的WAL归档文件。\n这样远和近的所有WAL文件都能在后备服务器上拿到了。\n- \n### 关键知识\n后备数据库在`postgresql.auto.conf`中配置：\n- `primary_conninfo`用于流中恢复\n- `restore_command`用于从归档中恢复\n\n另外，关键：还要添加**恢复目标**！如果不添加就启动实例，默认会一路追到主数据库的当前时间点。\n\nPostgreSQL的恢复目标的设置支持很丰富，这里不逐个介绍。我使用恢复到指定时间戳，配置参数为：`recovery_target_time`。\n> `recovery_target_time`的精确的停止点还受`recovery_target_inclusive`的影响。影响不大，取默认值即可。\n> 它只是定义是否包含边界。\n\n### `rsync`知识\n本着**简单的事简单办的原则**，选中了这个古老的工具。\n它的使用比较简单：\n#### 安装：\n```shell\napt install rsync\n```\n#### `/etc/rsyncd.conf`配置：\n```text\nhosts allow = x.x.x.x\nhosts deny = *\nuid = postgres\ngid = postgres\n\n[core]\npath = /path/to/archive\nlist = yes\nread only = false\ncomment = PostgreSQL WAL archive\n```\n#### 重点解说：\n- `hosts allow` 允许访问服务的远程IP，可以多个。有了这个就免去了用户认证了。\n- `hosts deny` 必须配合 `hosts allow` 指定为`*`，不然孤掌难鸣。\n- `read only` 默认为`true`必须明确指定\n- `list`、`comment` 可以不设置\n\n#### 服务器端指令\n`rsync`的指定很丰富，详细的解释，中文参考[阮一峰的教程](https://www.ruanyifeng.com/blog/2020/08/rsync.html)，英文参考`man rsync`输出的文档。\n\n`rsync`默认就是做的增量同步。\n\n加一个说明，不要使用推荐的 `rsync -a`参数，推荐使用`rsync -r`参数。由于两台服务器用户的`uid`对应的用户，是不一样的。`-a`会把源服务器的文件的所有者属性同步到后备服务器时用户错乱。\n\n`rsync`执行一次，只能做一次同步，它并没有监视文件夹变化的功能。所以这个命令要么配合`inotify-tool`，要么并入PostgreSQL的备份指令中。\n\n我们选择并入PostgreSQL的备份指令中，做法是：修改`postgresql.conf`文件：\n```text\narchive_command = 'test ! -f /path/to/archive/%f && cp %p /path/to/archive/%f && /usr/bin/rsync -r /path/to/archive/ rsync://x.x.x.x/core'\n```\n","source":"_posts/postgresql-best-backup-and-restore.md","raw":"---\ntitle: PostgreSQL 防误删，最佳的备份、恢复方案，实现高可用\ndate: 2021-11-16 09:31:03\ntags: [PostgreSQL, 时间线, 备份, 恢复]\n---\n\n误删是一个无法回避的数据库风险。没有不犯错的人，当数据被误删或被错误数据覆盖，都将造成数据损失。如何实现，既能找回100%丢失的数据，又不大费周章？\n\n## 方案博采&筛选\n见常的备份方案有：\n- 热备份 - 这个备份对找回数据没有作用\n- 定时备份 - 这个方案既耗费资源又无法实现100%找回数据，总有部分数据丢失。数据库越庞大，备份消耗时间越长，要么阻碍线上主库，要么备份失败。\n- 文件系统快照 - 这个性能高，但同样无法恢复100%的数据\n- 基准备份+WAL归档+流复制+恢复目标限制 - 能实现想恢复到哪个时刻就恢复到哪个时刻，但只能按时间正向恢复；这个可以通过多次尝试的方式弥补。\n\n**基准备份+WAL归档+流复制+恢复目标限制** 的方案是最佳方案。那么如何构建它呢？\n\n## 数据流程图\n我们来画个设计图：\n```mermaid\ngraph LR\nsubgraph 主服务器\nmain[(主数据库)]\nmwal[WAL归档文件夹]\nend\n\nsubgraph 后备服务器\nbk[(后备数据库)]\nrsyncd([rsyncd])\nbwal[WAL连续归档文件夹]\nend\n\nmain-->|wal传送|bk\nmwal-->|在线增量备份|rsyncd\nrsyncd-->bwal\n```\n\n## 方案说明\n上图中有了两套传送方案：\n- `wal传送`流复制用来跟上线上主库最新的数据。\n- `在线增量备份`复制归档用来复制旧的WAL归档文件。\n这样远和近的所有WAL文件都能在后备服务器上拿到了。\n- \n### 关键知识\n后备数据库在`postgresql.auto.conf`中配置：\n- `primary_conninfo`用于流中恢复\n- `restore_command`用于从归档中恢复\n\n另外，关键：还要添加**恢复目标**！如果不添加就启动实例，默认会一路追到主数据库的当前时间点。\n\nPostgreSQL的恢复目标的设置支持很丰富，这里不逐个介绍。我使用恢复到指定时间戳，配置参数为：`recovery_target_time`。\n> `recovery_target_time`的精确的停止点还受`recovery_target_inclusive`的影响。影响不大，取默认值即可。\n> 它只是定义是否包含边界。\n\n### `rsync`知识\n本着**简单的事简单办的原则**，选中了这个古老的工具。\n它的使用比较简单：\n#### 安装：\n```shell\napt install rsync\n```\n#### `/etc/rsyncd.conf`配置：\n```text\nhosts allow = x.x.x.x\nhosts deny = *\nuid = postgres\ngid = postgres\n\n[core]\npath = /path/to/archive\nlist = yes\nread only = false\ncomment = PostgreSQL WAL archive\n```\n#### 重点解说：\n- `hosts allow` 允许访问服务的远程IP，可以多个。有了这个就免去了用户认证了。\n- `hosts deny` 必须配合 `hosts allow` 指定为`*`，不然孤掌难鸣。\n- `read only` 默认为`true`必须明确指定\n- `list`、`comment` 可以不设置\n\n#### 服务器端指令\n`rsync`的指定很丰富，详细的解释，中文参考[阮一峰的教程](https://www.ruanyifeng.com/blog/2020/08/rsync.html)，英文参考`man rsync`输出的文档。\n\n`rsync`默认就是做的增量同步。\n\n加一个说明，不要使用推荐的 `rsync -a`参数，推荐使用`rsync -r`参数。由于两台服务器用户的`uid`对应的用户，是不一样的。`-a`会把源服务器的文件的所有者属性同步到后备服务器时用户错乱。\n\n`rsync`执行一次，只能做一次同步，它并没有监视文件夹变化的功能。所以这个命令要么配合`inotify-tool`，要么并入PostgreSQL的备份指令中。\n\n我们选择并入PostgreSQL的备份指令中，做法是：修改`postgresql.conf`文件：\n```text\narchive_command = 'test ! -f /path/to/archive/%f && cp %p /path/to/archive/%f && /usr/bin/rsync -r /path/to/archive/ rsync://x.x.x.x/core'\n```\n","slug":"postgresql-best-backup-and-restore","published":1,"updated":"2021-11-16T02:42:07.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw1hpk6x0000iqr8coyi4xcy","content":"<p>误删是一个无法回避的数据库风险。没有不犯错的人，当数据被误删或被错误数据覆盖，都将造成数据损失。如何实现，既能找回100%丢失的数据，又不大费周章？</p>\n<h2 id=\"方案博采-amp-筛选\"><a href=\"#方案博采-amp-筛选\" class=\"headerlink\" title=\"方案博采&amp;筛选\"></a>方案博采&amp;筛选</h2><p>见常的备份方案有：</p>\n<ul>\n<li>热备份 - 这个备份对找回数据没有作用</li>\n<li>定时备份 - 这个方案既耗费资源又无法实现100%找回数据，总有部分数据丢失。数据库越庞大，备份消耗时间越长，要么阻碍线上主库，要么备份失败。</li>\n<li>文件系统快照 - 这个性能高，但同样无法恢复100%的数据</li>\n<li>基准备份+WAL归档+流复制+恢复目标限制 - 能实现想恢复到哪个时刻就恢复到哪个时刻，但只能按时间正向恢复；这个可以通过多次尝试的方式弥补。</li>\n</ul>\n<p><strong>基准备份+WAL归档+流复制+恢复目标限制</strong> 的方案是最佳方案。那么如何构建它呢？</p>\n<h2 id=\"数据流程图\"><a href=\"#数据流程图\" class=\"headerlink\" title=\"数据流程图\"></a>数据流程图</h2><p>我们来画个设计图：</p>\n<pre class=\"mermaid\">graph LR\nsubgraph 主服务器\nmain[(主数据库)]\nmwal[WAL归档文件夹]\nend\n\nsubgraph 后备服务器\nbk[(后备数据库)]\nrsyncd([rsyncd])\nbwal[WAL连续归档文件夹]\nend\n\nmain-->|wal传送|bk\nmwal-->|在线增量备份|rsyncd\nrsyncd-->bwal</pre>\n\n<h2 id=\"方案说明\"><a href=\"#方案说明\" class=\"headerlink\" title=\"方案说明\"></a>方案说明</h2><p>上图中有了两套传送方案：</p>\n<ul>\n<li><code>wal传送</code>流复制用来跟上线上主库最新的数据。</li>\n<li><code>在线增量备份</code>复制归档用来复制旧的WAL归档文件。<br>这样远和近的所有WAL文件都能在后备服务器上拿到了。</li>\n<li><h3 id=\"关键知识\"><a href=\"#关键知识\" class=\"headerlink\" title=\"关键知识\"></a>关键知识</h3>后备数据库在<code>postgresql.auto.conf</code>中配置：</li>\n<li><code>primary_conninfo</code>用于流中恢复</li>\n<li><code>restore_command</code>用于从归档中恢复</li>\n</ul>\n<p>另外，关键：还要添加<strong>恢复目标</strong>！如果不添加就启动实例，默认会一路追到主数据库的当前时间点。</p>\n<p>PostgreSQL的恢复目标的设置支持很丰富，这里不逐个介绍。我使用恢复到指定时间戳，配置参数为：<code>recovery_target_time</code>。</p>\n<blockquote>\n<p><code>recovery_target_time</code>的精确的停止点还受<code>recovery_target_inclusive</code>的影响。影响不大，取默认值即可。<br>它只是定义是否包含边界。</p>\n</blockquote>\n<h3 id=\"rsync知识\"><a href=\"#rsync知识\" class=\"headerlink\" title=\"rsync知识\"></a><code>rsync</code>知识</h3><p>本着<strong>简单的事简单办的原则</strong>，选中了这个古老的工具。<br>它的使用比较简单：</p>\n<h4 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install rsync</span><br></pre></td></tr></table></figure>\n<h4 id=\"etc-rsyncd-conf配置：\"><a href=\"#etc-rsyncd-conf配置：\" class=\"headerlink\" title=\"/etc/rsyncd.conf配置：\"></a><code>/etc/rsyncd.conf</code>配置：</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hosts allow = x.x.x.x</span><br><span class=\"line\">hosts deny = *</span><br><span class=\"line\">uid = postgres</span><br><span class=\"line\">gid = postgres</span><br><span class=\"line\"></span><br><span class=\"line\">[core]</span><br><span class=\"line\">path = /path/to/archive</span><br><span class=\"line\">list = yes</span><br><span class=\"line\">read only = false</span><br><span class=\"line\">comment = PostgreSQL WAL archive</span><br></pre></td></tr></table></figure>\n<h4 id=\"重点解说：\"><a href=\"#重点解说：\" class=\"headerlink\" title=\"重点解说：\"></a>重点解说：</h4><ul>\n<li><code>hosts allow</code> 允许访问服务的远程IP，可以多个。有了这个就免去了用户认证了。</li>\n<li><code>hosts deny</code> 必须配合 <code>hosts allow</code> 指定为<code>*</code>，不然孤掌难鸣。</li>\n<li><code>read only</code> 默认为<code>true</code>必须明确指定</li>\n<li><code>list</code>、<code>comment</code> 可以不设置</li>\n</ul>\n<h4 id=\"服务器端指令\"><a href=\"#服务器端指令\" class=\"headerlink\" title=\"服务器端指令\"></a>服务器端指令</h4><p><code>rsync</code>的指定很丰富，详细的解释，中文参考<a class=\"link\"   href=\"https://www.ruanyifeng.com/blog/2020/08/rsync.html\" >阮一峰的教程<i class=\"fas fa-external-link-alt\"></i></a>，英文参考<code>man rsync</code>输出的文档。</p>\n<p><code>rsync</code>默认就是做的增量同步。</p>\n<p>加一个说明，不要使用推荐的 <code>rsync -a</code>参数，推荐使用<code>rsync -r</code>参数。由于两台服务器用户的<code>uid</code>对应的用户，是不一样的。<code>-a</code>会把源服务器的文件的所有者属性同步到后备服务器时用户错乱。</p>\n<p><code>rsync</code>执行一次，只能做一次同步，它并没有监视文件夹变化的功能。所以这个命令要么配合<code>inotify-tool</code>，要么并入PostgreSQL的备份指令中。</p>\n<p>我们选择并入PostgreSQL的备份指令中，做法是：修改<code>postgresql.conf</code>文件：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">archive_command = &#x27;test ! -f /path/to/archive/%f &amp;&amp; cp %p /path/to/archive/%f &amp;&amp; /usr/bin/rsync -r /path/to/archive/ rsync://x.x.x.x/core&#x27;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>误删是一个无法回避的数据库风险。没有不犯错的人，当数据被误删或被错误数据覆盖，都将造成数据损失。如何实现，既能找回100%丢失的数据，又不大费周章？</p>\n<h2 id=\"方案博采-amp-筛选\"><a href=\"#方案博采-amp-筛选\" class=\"headerlink\" title=\"方案博采&amp;筛选\"></a>方案博采&amp;筛选</h2><p>见常的备份方案有：</p>\n<ul>\n<li>热备份 - 这个备份对找回数据没有作用</li>\n<li>定时备份 - 这个方案既耗费资源又无法实现100%找回数据，总有部分数据丢失。数据库越庞大，备份消耗时间越长，要么阻碍线上主库，要么备份失败。</li>\n<li>文件系统快照 - 这个性能高，但同样无法恢复100%的数据</li>\n<li>基准备份+WAL归档+流复制+恢复目标限制 - 能实现想恢复到哪个时刻就恢复到哪个时刻，但只能按时间正向恢复；这个可以通过多次尝试的方式弥补。</li>\n</ul>\n<p><strong>基准备份+WAL归档+流复制+恢复目标限制</strong> 的方案是最佳方案。那么如何构建它呢？</p>\n<h2 id=\"数据流程图\"><a href=\"#数据流程图\" class=\"headerlink\" title=\"数据流程图\"></a>数据流程图</h2><p>我们来画个设计图：</p>\n<pre class=\"mermaid\">graph LR\nsubgraph 主服务器\nmain[(主数据库)]\nmwal[WAL归档文件夹]\nend\n\nsubgraph 后备服务器\nbk[(后备数据库)]\nrsyncd([rsyncd])\nbwal[WAL连续归档文件夹]\nend\n\nmain-->|wal传送|bk\nmwal-->|在线增量备份|rsyncd\nrsyncd-->bwal</pre>\n\n<h2 id=\"方案说明\"><a href=\"#方案说明\" class=\"headerlink\" title=\"方案说明\"></a>方案说明</h2><p>上图中有了两套传送方案：</p>\n<ul>\n<li><code>wal传送</code>流复制用来跟上线上主库最新的数据。</li>\n<li><code>在线增量备份</code>复制归档用来复制旧的WAL归档文件。<br>这样远和近的所有WAL文件都能在后备服务器上拿到了。</li>\n<li><h3 id=\"关键知识\"><a href=\"#关键知识\" class=\"headerlink\" title=\"关键知识\"></a>关键知识</h3>后备数据库在<code>postgresql.auto.conf</code>中配置：</li>\n<li><code>primary_conninfo</code>用于流中恢复</li>\n<li><code>restore_command</code>用于从归档中恢复</li>\n</ul>\n<p>另外，关键：还要添加<strong>恢复目标</strong>！如果不添加就启动实例，默认会一路追到主数据库的当前时间点。</p>\n<p>PostgreSQL的恢复目标的设置支持很丰富，这里不逐个介绍。我使用恢复到指定时间戳，配置参数为：<code>recovery_target_time</code>。</p>\n<blockquote>\n<p><code>recovery_target_time</code>的精确的停止点还受<code>recovery_target_inclusive</code>的影响。影响不大，取默认值即可。<br>它只是定义是否包含边界。</p>\n</blockquote>\n<h3 id=\"rsync知识\"><a href=\"#rsync知识\" class=\"headerlink\" title=\"rsync知识\"></a><code>rsync</code>知识</h3><p>本着<strong>简单的事简单办的原则</strong>，选中了这个古老的工具。<br>它的使用比较简单：</p>\n<h4 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install rsync</span><br></pre></td></tr></table></figure>\n<h4 id=\"etc-rsyncd-conf配置：\"><a href=\"#etc-rsyncd-conf配置：\" class=\"headerlink\" title=\"/etc/rsyncd.conf配置：\"></a><code>/etc/rsyncd.conf</code>配置：</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hosts allow = x.x.x.x</span><br><span class=\"line\">hosts deny = *</span><br><span class=\"line\">uid = postgres</span><br><span class=\"line\">gid = postgres</span><br><span class=\"line\"></span><br><span class=\"line\">[core]</span><br><span class=\"line\">path = /path/to/archive</span><br><span class=\"line\">list = yes</span><br><span class=\"line\">read only = false</span><br><span class=\"line\">comment = PostgreSQL WAL archive</span><br></pre></td></tr></table></figure>\n<h4 id=\"重点解说：\"><a href=\"#重点解说：\" class=\"headerlink\" title=\"重点解说：\"></a>重点解说：</h4><ul>\n<li><code>hosts allow</code> 允许访问服务的远程IP，可以多个。有了这个就免去了用户认证了。</li>\n<li><code>hosts deny</code> 必须配合 <code>hosts allow</code> 指定为<code>*</code>，不然孤掌难鸣。</li>\n<li><code>read only</code> 默认为<code>true</code>必须明确指定</li>\n<li><code>list</code>、<code>comment</code> 可以不设置</li>\n</ul>\n<h4 id=\"服务器端指令\"><a href=\"#服务器端指令\" class=\"headerlink\" title=\"服务器端指令\"></a>服务器端指令</h4><p><code>rsync</code>的指定很丰富，详细的解释，中文参考<a class=\"link\"   href=\"https://www.ruanyifeng.com/blog/2020/08/rsync.html\" >阮一峰的教程<i class=\"fas fa-external-link-alt\"></i></a>，英文参考<code>man rsync</code>输出的文档。</p>\n<p><code>rsync</code>默认就是做的增量同步。</p>\n<p>加一个说明，不要使用推荐的 <code>rsync -a</code>参数，推荐使用<code>rsync -r</code>参数。由于两台服务器用户的<code>uid</code>对应的用户，是不一样的。<code>-a</code>会把源服务器的文件的所有者属性同步到后备服务器时用户错乱。</p>\n<p><code>rsync</code>执行一次，只能做一次同步，它并没有监视文件夹变化的功能。所以这个命令要么配合<code>inotify-tool</code>，要么并入PostgreSQL的备份指令中。</p>\n<p>我们选择并入PostgreSQL的备份指令中，做法是：修改<code>postgresql.conf</code>文件：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">archive_command = &#x27;test ! -f /path/to/archive/%f &amp;&amp; cp %p /path/to/archive/%f &amp;&amp; /usr/bin/rsync -r /path/to/archive/ rsync://x.x.x.x/core&#x27;</span><br></pre></td></tr></table></figure>"},{"title":"Unbearable Past","date":"2021-12-18T08:03:19.000Z","_content":"\n<iframe width=\"100%\" height=\"400\" src=\"https://time.graphics/embed?v=1&id=596569\" frameborder=\"0\" allowfullscreen></iframe>\n","source":"_posts/unbearable-past.md","raw":"---\ntitle: Unbearable Past\ndate: 2021-12-18 16:03:19\ntags: []\n---\n\n<iframe width=\"100%\" height=\"400\" src=\"https://time.graphics/embed?v=1&id=596569\" frameborder=\"0\" allowfullscreen></iframe>\n","slug":"unbearable-past","published":1,"updated":"2021-12-18T08:05:32.821Z","_id":"ckxbjbytd0000c7r893pc8ng7","comments":1,"layout":"post","photos":[],"link":"","content":"<iframe width=\"100%\" height=\"400\" src=\"https://time.graphics/embed?v=1&id=596569\" frameborder=\"0\" allowfullscreen></iframe>\n","site":{"data":{}},"excerpt":"","more":"<iframe width=\"100%\" height=\"400\" src=\"https://time.graphics/embed?v=1&id=596569\" frameborder=\"0\" allowfullscreen></iframe>\n"},{"title":"Linux bridge/tun/tap 构建虚拟网络","date":"2022-06-27T02:24:01.000Z","_content":"\n# 私有网桥，仅 VM 到 VM\n用于两个或多个 VM 之间的通信。它们只相互通信，不能访问 Internet 或主机。\n\n> 添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde VM 的 qemu 命令行连接。每个 VM 必须具有不同的分接头接口和 MAC 地址：第 1：第2：在 VM 内部，您可以使用任意子网和每个 VM 在该子网上的 IP 配置网络接口。\n\n```shell\nip link add Gefyra0 type bridge\nip link set Gefyra0 up\n\nip tuntap add QemuTap0 mode tap user A_Username\nip tuntap add QemuTap1 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap1 up\n\nip link set QemuTap0 master Gefyra0\nip link set QemuTap1 master Gefyra0\n```\n\n---\n\n# 使用路由子网桥接，VM <->主机\n在这种情况下，主机和 VM 之间可以互相访问。\n\n> 添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接与之前设置的不同之处在于第二行：将新子网中的 IP 分配给主机的网桥接口。此新子网不得在其他任何地方使用。虚拟机应使用不同的分接头接口和 MAC 地址进行配置（见上文）。每个 VM 的 IP 应与网桥的子网位于同一子网中，以便主机和 VM 进行通信。\n\n```shell\nip link add Gefyra0 type bridge\nip addr add 192.168.223.1/24 dev Gefyra0\nip link set Gefyra0 up\n\nip tuntap add QemuTap0 mode tap user A_Username\nip tuntap add QemuTap1 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap1 up\n\nip link set QemuTap0 master Gefyra0\nip link set QemuTap1 master Gefyra0\n\n```\n---\n# 使用路由子网桥接，VM <-> host-LAN-Internet\n是时候让 VM 访问 Internet，你不觉得吗？🙂\n> 添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接# 启用路由# -o 将要用于路由的接口作为参数，在本例中为 enp2s0和往常一样，每个VM 必须在配置的网桥子网上有各自的 tap int、mac addr 和分配的 IP；看上面。\n```shell\nip link add Gefyra0 type bridge\nip addr add 192.168.223.1/24 dev Gefyra0\nip link set Gefyra0 up\n\nip tuntap add QemuTap0 mode tap user A_Username\nip tuntap add QemuTap1 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap1 up\n\nip link set QemuTap0 master Gefyra0\nip link set QemuTap1 master Gefyra0\n\necho '1' > /proc/sys/net/ipv4/ip_forward\n\niptables -t nat -A POSTROUTING -o enp2s0 -j MASQUERADE\n```\n---\n\n# 桥接到第2层 - 将 VM 连接到已连接的交换机主机：\n需要更多解释性的标题，欢迎提出建议！\n\n在这种类型的连接中，VM 被插入 - 有点 - 在连接主机的同一交换机上。例如，如果网络上有 DHCP 服务器并且主机从该 DHCP 获取其 IP，则 VM 也将能够从同一 DHCP 获取 IP。这是主要用于生产 ESXi、Xen 或 HyperV 虚拟机的场景。\n\n**警告** 当物理网卡分配给网桥时，它会失去连接。IP必须分配给网桥，而不是主机的物理网络接口。\n\n> 添加一个名为 Gefyra0 的网桥# 添加一个物理接口到网桥，例如 eth0：\n```shell\nip link add Gefyra0 type bridge\nip link set Gefyra0 up\n\nip link set eth0 master Gefyra0\n```\n> 此时主机上的网络连接丢失。如果要恢复连接：\n> dhclient -v Gefyra0 (for dhcp)\n> dhclient -v Gefyra0 -r (to release IP)\n> ip addr add 192.168.223.1/24 dev Gefyra0 (for static IP)\n> add 2 tun/tap虚拟机接口现在可以在虚拟机上配置网络。**注意：**如果主机上使用了network-manager，它可能会干扰。为了安全起见，请在开始之前禁用它：\n```shell\nip tuntap add QemuTap0 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap0 master Gefyra0\n\nsudo systemctl stop NetworkManager\npkill nm-applet\n```\n---\n\n# 其它\n- 删除网桥：\n`ip link del Gefyra0`\n\n- 删除点击：\n`ip tuntap del tap0 mode tap`\n\n- 查看所有 iptables 防火墙规则和 NAT 网络过滤表\n`iptables -t nat -vL`\n\n- 没有解析\n`iptables -t nat -vL -n`\n\n- 显示行号 - 优先级：\n`iptables -t nat -vL --line-number`\n\n- 删除行，使用上面命令显示的数字：\n`iptables -t nat -D POSTROUTING {number}`\n","source":"_posts/linux-virtual-bridge-and-tun-tap.md","raw":"---\ntitle: Linux bridge/tun/tap 构建虚拟网络\ndate: 2022-06-27 10:24:01\ntags: [linux, tun, tap, bridge]\n---\n\n# 私有网桥，仅 VM 到 VM\n用于两个或多个 VM 之间的通信。它们只相互通信，不能访问 Internet 或主机。\n\n> 添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde VM 的 qemu 命令行连接。每个 VM 必须具有不同的分接头接口和 MAC 地址：第 1：第2：在 VM 内部，您可以使用任意子网和每个 VM 在该子网上的 IP 配置网络接口。\n\n```shell\nip link add Gefyra0 type bridge\nip link set Gefyra0 up\n\nip tuntap add QemuTap0 mode tap user A_Username\nip tuntap add QemuTap1 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap1 up\n\nip link set QemuTap0 master Gefyra0\nip link set QemuTap1 master Gefyra0\n```\n\n---\n\n# 使用路由子网桥接，VM <->主机\n在这种情况下，主机和 VM 之间可以互相访问。\n\n> 添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接与之前设置的不同之处在于第二行：将新子网中的 IP 分配给主机的网桥接口。此新子网不得在其他任何地方使用。虚拟机应使用不同的分接头接口和 MAC 地址进行配置（见上文）。每个 VM 的 IP 应与网桥的子网位于同一子网中，以便主机和 VM 进行通信。\n\n```shell\nip link add Gefyra0 type bridge\nip addr add 192.168.223.1/24 dev Gefyra0\nip link set Gefyra0 up\n\nip tuntap add QemuTap0 mode tap user A_Username\nip tuntap add QemuTap1 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap1 up\n\nip link set QemuTap0 master Gefyra0\nip link set QemuTap1 master Gefyra0\n\n```\n---\n# 使用路由子网桥接，VM <-> host-LAN-Internet\n是时候让 VM 访问 Internet，你不觉得吗？🙂\n> 添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接# 启用路由# -o 将要用于路由的接口作为参数，在本例中为 enp2s0和往常一样，每个VM 必须在配置的网桥子网上有各自的 tap int、mac addr 和分配的 IP；看上面。\n```shell\nip link add Gefyra0 type bridge\nip addr add 192.168.223.1/24 dev Gefyra0\nip link set Gefyra0 up\n\nip tuntap add QemuTap0 mode tap user A_Username\nip tuntap add QemuTap1 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap1 up\n\nip link set QemuTap0 master Gefyra0\nip link set QemuTap1 master Gefyra0\n\necho '1' > /proc/sys/net/ipv4/ip_forward\n\niptables -t nat -A POSTROUTING -o enp2s0 -j MASQUERADE\n```\n---\n\n# 桥接到第2层 - 将 VM 连接到已连接的交换机主机：\n需要更多解释性的标题，欢迎提出建议！\n\n在这种类型的连接中，VM 被插入 - 有点 - 在连接主机的同一交换机上。例如，如果网络上有 DHCP 服务器并且主机从该 DHCP 获取其 IP，则 VM 也将能够从同一 DHCP 获取 IP。这是主要用于生产 ESXi、Xen 或 HyperV 虚拟机的场景。\n\n**警告** 当物理网卡分配给网桥时，它会失去连接。IP必须分配给网桥，而不是主机的物理网络接口。\n\n> 添加一个名为 Gefyra0 的网桥# 添加一个物理接口到网桥，例如 eth0：\n```shell\nip link add Gefyra0 type bridge\nip link set Gefyra0 up\n\nip link set eth0 master Gefyra0\n```\n> 此时主机上的网络连接丢失。如果要恢复连接：\n> dhclient -v Gefyra0 (for dhcp)\n> dhclient -v Gefyra0 -r (to release IP)\n> ip addr add 192.168.223.1/24 dev Gefyra0 (for static IP)\n> add 2 tun/tap虚拟机接口现在可以在虚拟机上配置网络。**注意：**如果主机上使用了network-manager，它可能会干扰。为了安全起见，请在开始之前禁用它：\n```shell\nip tuntap add QemuTap0 mode tap user A_Username\nip link set QemuTap0 up\nip link set QemuTap0 master Gefyra0\n\nsudo systemctl stop NetworkManager\npkill nm-applet\n```\n---\n\n# 其它\n- 删除网桥：\n`ip link del Gefyra0`\n\n- 删除点击：\n`ip tuntap del tap0 mode tap`\n\n- 查看所有 iptables 防火墙规则和 NAT 网络过滤表\n`iptables -t nat -vL`\n\n- 没有解析\n`iptables -t nat -vL -n`\n\n- 显示行号 - 优先级：\n`iptables -t nat -vL --line-number`\n\n- 删除行，使用上面命令显示的数字：\n`iptables -t nat -D POSTROUTING {number}`\n","slug":"linux-virtual-bridge-and-tun-tap","published":1,"updated":"2022-06-27T02:36:55.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4w6jh9w0000chr83rkf6r7o","content":"<h1 id=\"私有网桥，仅-VM-到-VM\"><a href=\"#私有网桥，仅-VM-到-VM\" class=\"headerlink\" title=\"私有网桥，仅 VM 到 VM\"></a>私有网桥，仅 VM 到 VM</h1><p>用于两个或多个 VM 之间的通信。它们只相互通信，不能访问 Internet 或主机。</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde VM 的 qemu 命令行连接。每个 VM 必须具有不同的分接头接口和 MAC 地址：第 1：第2：在 VM 内部，您可以使用任意子网和每个 VM 在该子网上的 IP 配置网络接口。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip tuntap add QemuTap1 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap1 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\">ip link set QemuTap1 master Gefyra0</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"使用路由子网桥接，VM-lt-gt-主机\"><a href=\"#使用路由子网桥接，VM-lt-gt-主机\" class=\"headerlink\" title=\"使用路由子网桥接，VM &lt;-&gt;主机\"></a>使用路由子网桥接，VM &lt;-&gt;主机</h1><p>在这种情况下，主机和 VM 之间可以互相访问。</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接与之前设置的不同之处在于第二行：将新子网中的 IP 分配给主机的网桥接口。此新子网不得在其他任何地方使用。虚拟机应使用不同的分接头接口和 MAC 地址进行配置（见上文）。每个 VM 的 IP 应与网桥的子网位于同一子网中，以便主机和 VM 进行通信。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip addr add 192.168.223.1/24 dev Gefyra0</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip tuntap add QemuTap1 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap1 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\">ip link set QemuTap1 master Gefyra0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"使用路由子网桥接，VM-lt-gt-host-LAN-Internet\"><a href=\"#使用路由子网桥接，VM-lt-gt-host-LAN-Internet\" class=\"headerlink\" title=\"使用路由子网桥接，VM &lt;-&gt; host-LAN-Internet\"></a>使用路由子网桥接，VM &lt;-&gt; host-LAN-Internet</h1><p>是时候让 VM 访问 Internet，你不觉得吗？🙂</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接# 启用路由# -o 将要用于路由的接口作为参数，在本例中为 enp2s0和往常一样，每个VM 必须在配置的网桥子网上有各自的 tap int、mac addr 和分配的 IP；看上面。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip addr add 192.168.223.1/24 dev Gefyra0</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip tuntap add QemuTap1 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap1 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\">ip link set QemuTap1 master Gefyra0</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;1&#x27; &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -o enp2s0 -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"桥接到第2层-将-VM-连接到已连接的交换机主机：\"><a href=\"#桥接到第2层-将-VM-连接到已连接的交换机主机：\" class=\"headerlink\" title=\"桥接到第2层 - 将 VM 连接到已连接的交换机主机：\"></a>桥接到第2层 - 将 VM 连接到已连接的交换机主机：</h1><p>需要更多解释性的标题，欢迎提出建议！</p>\n<p>在这种类型的连接中，VM 被插入 - 有点 - 在连接主机的同一交换机上。例如，如果网络上有 DHCP 服务器并且主机从该 DHCP 获取其 IP，则 VM 也将能够从同一 DHCP 获取 IP。这是主要用于生产 ESXi、Xen 或 HyperV 虚拟机的场景。</p>\n<p><strong>警告</strong> 当物理网卡分配给网桥时，它会失去连接。IP必须分配给网桥，而不是主机的物理网络接口。</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 添加一个物理接口到网桥，例如 eth0：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 master Gefyra0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时主机上的网络连接丢失。如果要恢复连接：<br>dhclient -v Gefyra0 (for dhcp)<br>dhclient -v Gefyra0 -r (to release IP)<br>ip addr add 192.168.223.1/24 dev Gefyra0 (for static IP)<br>add 2 tun/tap虚拟机接口现在可以在虚拟机上配置网络。<strong>注意：</strong>如果主机上使用了network-manager，它可能会干扰。为了安全起见，请在开始之前禁用它：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl stop NetworkManager</span><br><span class=\"line\">pkill nm-applet</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><ul>\n<li><p>删除网桥：<br><code>ip link del Gefyra0</code></p>\n</li>\n<li><p>删除点击：<br><code>ip tuntap del tap0 mode tap</code></p>\n</li>\n<li><p>查看所有 iptables 防火墙规则和 NAT 网络过滤表<br><code>iptables -t nat -vL</code></p>\n</li>\n<li><p>没有解析<br><code>iptables -t nat -vL -n</code></p>\n</li>\n<li><p>显示行号 - 优先级：<br><code>iptables -t nat -vL --line-number</code></p>\n</li>\n<li><p>删除行，使用上面命令显示的数字：<br><code>iptables -t nat -D POSTROUTING &#123;number&#125;</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"私有网桥，仅-VM-到-VM\"><a href=\"#私有网桥，仅-VM-到-VM\" class=\"headerlink\" title=\"私有网桥，仅 VM 到 VM\"></a>私有网桥，仅 VM 到 VM</h1><p>用于两个或多个 VM 之间的通信。它们只相互通信，不能访问 Internet 或主机。</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde VM 的 qemu 命令行连接。每个 VM 必须具有不同的分接头接口和 MAC 地址：第 1：第2：在 VM 内部，您可以使用任意子网和每个 VM 在该子网上的 IP 配置网络接口。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip tuntap add QemuTap1 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap1 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\">ip link set QemuTap1 master Gefyra0</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"使用路由子网桥接，VM-lt-gt-主机\"><a href=\"#使用路由子网桥接，VM-lt-gt-主机\" class=\"headerlink\" title=\"使用路由子网桥接，VM &lt;-&gt;主机\"></a>使用路由子网桥接，VM &lt;-&gt;主机</h1><p>在这种情况下，主机和 VM 之间可以互相访问。</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接与之前设置的不同之处在于第二行：将新子网中的 IP 分配给主机的网桥接口。此新子网不得在其他任何地方使用。虚拟机应使用不同的分接头接口和 MAC 地址进行配置（见上文）。每个 VM 的 IP 应与网桥的子网位于同一子网中，以便主机和 VM 进行通信。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip addr add 192.168.223.1/24 dev Gefyra0</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip tuntap add QemuTap1 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap1 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\">ip link set QemuTap1 master Gefyra0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"使用路由子网桥接，VM-lt-gt-host-LAN-Internet\"><a href=\"#使用路由子网桥接，VM-lt-gt-host-LAN-Internet\" class=\"headerlink\" title=\"使用路由子网桥接，VM &lt;-&gt; host-LAN-Internet\"></a>使用路由子网桥接，VM &lt;-&gt; host-LAN-Internet</h1><p>是时候让 VM 访问 Internet，你不觉得吗？🙂</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 为 VM 添加 2 个 tun/tap 接口# 将 tun/tap 接口与 brigde 连接# 启用路由# -o 将要用于路由的接口作为参数，在本例中为 enp2s0和往常一样，每个VM 必须在配置的网桥子网上有各自的 tap int、mac addr 和分配的 IP；看上面。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip addr add 192.168.223.1/24 dev Gefyra0</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip tuntap add QemuTap1 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap1 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\">ip link set QemuTap1 master Gefyra0</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;1&#x27; &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -o enp2s0 -j MASQUERADE</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"桥接到第2层-将-VM-连接到已连接的交换机主机：\"><a href=\"#桥接到第2层-将-VM-连接到已连接的交换机主机：\" class=\"headerlink\" title=\"桥接到第2层 - 将 VM 连接到已连接的交换机主机：\"></a>桥接到第2层 - 将 VM 连接到已连接的交换机主机：</h1><p>需要更多解释性的标题，欢迎提出建议！</p>\n<p>在这种类型的连接中，VM 被插入 - 有点 - 在连接主机的同一交换机上。例如，如果网络上有 DHCP 服务器并且主机从该 DHCP 获取其 IP，则 VM 也将能够从同一 DHCP 获取 IP。这是主要用于生产 ESXi、Xen 或 HyperV 虚拟机的场景。</p>\n<p><strong>警告</strong> 当物理网卡分配给网桥时，它会失去连接。IP必须分配给网桥，而不是主机的物理网络接口。</p>\n<blockquote>\n<p>添加一个名为 Gefyra0 的网桥# 添加一个物理接口到网桥，例如 eth0：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link add Gefyra0 type bridge</span><br><span class=\"line\">ip link set Gefyra0 up</span><br><span class=\"line\"></span><br><span class=\"line\">ip link set eth0 master Gefyra0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时主机上的网络连接丢失。如果要恢复连接：<br>dhclient -v Gefyra0 (for dhcp)<br>dhclient -v Gefyra0 -r (to release IP)<br>ip addr add 192.168.223.1/24 dev Gefyra0 (for static IP)<br>add 2 tun/tap虚拟机接口现在可以在虚拟机上配置网络。<strong>注意：</strong>如果主机上使用了network-manager，它可能会干扰。为了安全起见，请在开始之前禁用它：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip tuntap add QemuTap0 mode tap user A_Username</span><br><span class=\"line\">ip link set QemuTap0 up</span><br><span class=\"line\">ip link set QemuTap0 master Gefyra0</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl stop NetworkManager</span><br><span class=\"line\">pkill nm-applet</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><ul>\n<li><p>删除网桥：<br><code>ip link del Gefyra0</code></p>\n</li>\n<li><p>删除点击：<br><code>ip tuntap del tap0 mode tap</code></p>\n</li>\n<li><p>查看所有 iptables 防火墙规则和 NAT 网络过滤表<br><code>iptables -t nat -vL</code></p>\n</li>\n<li><p>没有解析<br><code>iptables -t nat -vL -n</code></p>\n</li>\n<li><p>显示行号 - 优先级：<br><code>iptables -t nat -vL --line-number</code></p>\n</li>\n<li><p>删除行，使用上面命令显示的数字：<br><code>iptables -t nat -D POSTROUTING &#123;number&#125;</code></p>\n</li>\n</ul>\n"},{"title":"PostgreSQL跨系统主从后，出现查询时文本类条件无法命中的问题","date":"2022-06-27T02:48:44.000Z","_content":"\n# 问题描述\n- 当主服务运行在`FreeBSD`上，从服务运行在`Debian`上时，同样的编译参数，且都打开了`--with-icu`支持，连接到`Debian`上查询条件带文本的查询返回空。没有命中数据。\n- 主服务调整到`Debian`，从服务调整到`Alpine`上后，表现一样。\n- 主服务采用`zh_CN.UTF-8`编码初始化的数据库。配置中`lc`系列也同样使用的`zh_CN.UTF-8`。\n`lc`系列配置：\n```text\nlc_messages = 'zh_CN.UTF-8'\t\t\t# locale for system error message\n\t\t\t\t\t# strings\nlc_monetary = 'zh_CN.UTF-8'\t\t\t# locale for monetary formatting\nlc_numeric = 'zh_CN.UTF-8'\t\t\t# locale for number formatting\nlc_time = 'zh_CN.UTF-8'\t\t\t\t# locale for time formatting\n```\n\n主服务上：\n```psql\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY';\n            openid\n------------------------------\n oEG8Ss_yCRB315jjLfdTRK-QicdY\n(1 行记录)\n```\n从服务上：\n```psql\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY';\n openid\n--------\n(0 行记录)\n```\n\n# 原因\n因为：同样是`zh_CN.UTF-8`在不同`OS`上的`ICU`支持是不一样的。但如果使用`C`一般能避免这个问题。\n\n从服务上没有命中，默认不报任何错误或警告。这个很诡异！如果指定条件的编码问题就能表现出来：\n```psql\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY' COLLATE \"zh_CN\";\n错误：排序规则\"zh_CN\"没有实际版本，但指定了版本\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY' COLLATE \"C\";\n            openid\n------------------------------\n oEG8Ss_yCRB315jjLfdTRK-QicdY\n(1 行记录)\n```\n至于排序规则与版本之间的关系，我还没有进一步了解。这个问题暂时就研究到这里。\n","source":"_posts/postgresql-cross-os-problem.md","raw":"---\ntitle: PostgreSQL跨系统主从后，出现查询时文本类条件无法命中的问题\ndate: 2022-06-27 10:48:44\ntags: [PostgreSQL]\n---\n\n# 问题描述\n- 当主服务运行在`FreeBSD`上，从服务运行在`Debian`上时，同样的编译参数，且都打开了`--with-icu`支持，连接到`Debian`上查询条件带文本的查询返回空。没有命中数据。\n- 主服务调整到`Debian`，从服务调整到`Alpine`上后，表现一样。\n- 主服务采用`zh_CN.UTF-8`编码初始化的数据库。配置中`lc`系列也同样使用的`zh_CN.UTF-8`。\n`lc`系列配置：\n```text\nlc_messages = 'zh_CN.UTF-8'\t\t\t# locale for system error message\n\t\t\t\t\t# strings\nlc_monetary = 'zh_CN.UTF-8'\t\t\t# locale for monetary formatting\nlc_numeric = 'zh_CN.UTF-8'\t\t\t# locale for number formatting\nlc_time = 'zh_CN.UTF-8'\t\t\t\t# locale for time formatting\n```\n\n主服务上：\n```psql\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY';\n            openid\n------------------------------\n oEG8Ss_yCRB315jjLfdTRK-QicdY\n(1 行记录)\n```\n从服务上：\n```psql\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY';\n openid\n--------\n(0 行记录)\n```\n\n# 原因\n因为：同样是`zh_CN.UTF-8`在不同`OS`上的`ICU`支持是不一样的。但如果使用`C`一般能避免这个问题。\n\n从服务上没有命中，默认不报任何错误或警告。这个很诡异！如果指定条件的编码问题就能表现出来：\n```psql\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY' COLLATE \"zh_CN\";\n错误：排序规则\"zh_CN\"没有实际版本，但指定了版本\ncore=# select openid from wx.fans where openid='oEG8Ss_yCRB315jjLfdTRK-QicdY' COLLATE \"C\";\n            openid\n------------------------------\n oEG8Ss_yCRB315jjLfdTRK-QicdY\n(1 行记录)\n```\n至于排序规则与版本之间的关系，我还没有进一步了解。这个问题暂时就研究到这里。\n","slug":"postgresql-cross-os-problem","published":1,"updated":"2022-06-27T03:27:50.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4w6jha10001chr8h68fereh","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><ul>\n<li>当主服务运行在<code>FreeBSD</code>上，从服务运行在<code>Debian</code>上时，同样的编译参数，且都打开了<code>--with-icu</code>支持，连接到<code>Debian</code>上查询条件带文本的查询返回空。没有命中数据。</li>\n<li>主服务调整到<code>Debian</code>，从服务调整到<code>Alpine</code>上后，表现一样。</li>\n<li>主服务采用<code>zh_CN.UTF-8</code>编码初始化的数据库。配置中<code>lc</code>系列也同样使用的<code>zh_CN.UTF-8</code>。<br><code>lc</code>系列配置：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lc_messages = &#x27;zh_CN.UTF-8&#x27;\t\t\t# locale for system error message</span><br><span class=\"line\">\t\t\t\t\t# strings</span><br><span class=\"line\">lc_monetary = &#x27;zh_CN.UTF-8&#x27;\t\t\t# locale for monetary formatting</span><br><span class=\"line\">lc_numeric = &#x27;zh_CN.UTF-8&#x27;\t\t\t# locale for number formatting</span><br><span class=\"line\">lc_time = &#x27;zh_CN.UTF-8&#x27;\t\t\t\t# locale for time formatting</span><br></pre></td></tr></table></figure>\n主服务上：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39;;</span><br><span class=\"line\">            openid</span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"> oEG8Ss_yCRB315jjLfdTRK-QicdY</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n从服务上：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39;;</span><br><span class=\"line\"> openid</span><br><span class=\"line\">--------</span><br><span class=\"line\">(0 行记录)</span><br></pre></td></tr></table></figure>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1>因为：同样是<code>zh_CN.UTF-8</code>在不同<code>OS</code>上的<code>ICU</code>支持是不一样的。但如果使用<code>C</code>一般能避免这个问题。</li>\n</ul>\n<p>从服务上没有命中，默认不报任何错误或警告。这个很诡异！如果指定条件的编码问题就能表现出来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39; COLLATE &quot;zh_CN&quot;;</span><br><span class=\"line\">错误：排序规则&quot;zh_CN&quot;没有实际版本，但指定了版本</span><br><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39; COLLATE &quot;C&quot;;</span><br><span class=\"line\">            openid</span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"> oEG8Ss_yCRB315jjLfdTRK-QicdY</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n<p>至于排序规则与版本之间的关系，我还没有进一步了解。这个问题暂时就研究到这里。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><ul>\n<li>当主服务运行在<code>FreeBSD</code>上，从服务运行在<code>Debian</code>上时，同样的编译参数，且都打开了<code>--with-icu</code>支持，连接到<code>Debian</code>上查询条件带文本的查询返回空。没有命中数据。</li>\n<li>主服务调整到<code>Debian</code>，从服务调整到<code>Alpine</code>上后，表现一样。</li>\n<li>主服务采用<code>zh_CN.UTF-8</code>编码初始化的数据库。配置中<code>lc</code>系列也同样使用的<code>zh_CN.UTF-8</code>。<br><code>lc</code>系列配置：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lc_messages = &#x27;zh_CN.UTF-8&#x27;\t\t\t# locale for system error message</span><br><span class=\"line\">\t\t\t\t\t# strings</span><br><span class=\"line\">lc_monetary = &#x27;zh_CN.UTF-8&#x27;\t\t\t# locale for monetary formatting</span><br><span class=\"line\">lc_numeric = &#x27;zh_CN.UTF-8&#x27;\t\t\t# locale for number formatting</span><br><span class=\"line\">lc_time = &#x27;zh_CN.UTF-8&#x27;\t\t\t\t# locale for time formatting</span><br></pre></td></tr></table></figure>\n主服务上：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39;;</span><br><span class=\"line\">            openid</span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"> oEG8Ss_yCRB315jjLfdTRK-QicdY</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n从服务上：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39;;</span><br><span class=\"line\"> openid</span><br><span class=\"line\">--------</span><br><span class=\"line\">(0 行记录)</span><br></pre></td></tr></table></figure>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1>因为：同样是<code>zh_CN.UTF-8</code>在不同<code>OS</code>上的<code>ICU</code>支持是不一样的。但如果使用<code>C</code>一般能避免这个问题。</li>\n</ul>\n<p>从服务上没有命中，默认不报任何错误或警告。这个很诡异！如果指定条件的编码问题就能表现出来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39; COLLATE &quot;zh_CN&quot;;</span><br><span class=\"line\">错误：排序规则&quot;zh_CN&quot;没有实际版本，但指定了版本</span><br><span class=\"line\">core&#x3D;# select openid from wx.fans where openid&#x3D;&#39;oEG8Ss_yCRB315jjLfdTRK-QicdY&#39; COLLATE &quot;C&quot;;</span><br><span class=\"line\">            openid</span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"> oEG8Ss_yCRB315jjLfdTRK-QicdY</span><br><span class=\"line\">(1 行记录)</span><br></pre></td></tr></table></figure>\n<p>至于排序规则与版本之间的关系，我还没有进一步了解。这个问题暂时就研究到这里。</p>\n"},{"title":"wget 的妙用","date":"2022-06-27T02:24:36.000Z","_content":"# 将文件下载到特定目录📁\n只需将PATH替换为要保存文件的输出目录位置即可。\n`wget ‐P <PATH> https://example.com/sitemap.xml`\n# 重命名下载的文件📝\n要重命名文件，请将FILENAME替换为您想要的名称并运行：\n`wget -O <FILENAME.html> https://example.com/file.html`\n# 将自己定义为用户代理🧑‍💻\n`wget --user-agent=Chrome https://example.com/file.html`\n# 限速⏩\nwget 可以通过实现--waitand--limit-rate命令来帮助解决这个问题。\n```shell\n--wait=1 \\\\ Wait 1 second between extractions.\n--limit-rate=10K \\\\ Limit the download speed (bytes per second)\n```\n# 提取为 Google bot 🤖\n`wget --user-agent=\"Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\" https://example.com/path`\n# 转换页面上的链接🖇️\n将 HTML 中的链接转换为在您的本地版本中仍然有效。（例如 example.com/path -> localhost:8000/path）\n`wget --convert-links https://example.com/path`\n# 镜像单个网页📑\n您可以运行此命令来镜像单个网页以在本地设备上查看它。\n`wget -E -H -k -K -p --convert-links https://example.com/path`\n# 提取多个 URL 🗂️\n首先创建所有需要的 URL 并将其添加到urls.txt文件中。\n```text\nhttps://example.com/1\nhttps://example.com/2\nhttps://example.com/3\n```\n接下来，运行以下命令以提取所有 URL。\n`wget -i urls.txt`\n\n# 如何使用 wget 配置代理\n## 配置文件\n- /usr/local/etc/wgetrc 全局，适用于所有用户\n- $HOME/.wgetrc 适用于单个用户\n配置：\n```text\nhttps_proxy = http://[Proxy_Server]:[port] \nhttp_proxy = http://[Proxy_Server]:[port]\nftp_proxy = http://[Proxy_Server]:[port]\n```\n## 设置临时代理变量\n```shell\nexport http_proxy=http://[Proxy_Server]:[port]\nexport https_proxy=$http_proxy\nexport ftp_proxy=$http_proxy\n```\n## 设置到`SHELL`环境变量\n> 在 `~/.bash_profile` 或 `/etc/profile` 中添加以下行：\n```shell\nexport http_proxy=http://[Proxy_Server]:[port]\nexport https_proxy=http://[Proxy_Server]:[port]\nexport ftp_proxy=http://[Proxy_Server]:[port]\n```\n","source":"_posts/wget-menu.md","raw":"---\ntitle: wget 的妙用\ndate: 2022-06-27 10:24:36\ntags: [wget]\n---\n# 将文件下载到特定目录📁\n只需将PATH替换为要保存文件的输出目录位置即可。\n`wget ‐P <PATH> https://example.com/sitemap.xml`\n# 重命名下载的文件📝\n要重命名文件，请将FILENAME替换为您想要的名称并运行：\n`wget -O <FILENAME.html> https://example.com/file.html`\n# 将自己定义为用户代理🧑‍💻\n`wget --user-agent=Chrome https://example.com/file.html`\n# 限速⏩\nwget 可以通过实现--waitand--limit-rate命令来帮助解决这个问题。\n```shell\n--wait=1 \\\\ Wait 1 second between extractions.\n--limit-rate=10K \\\\ Limit the download speed (bytes per second)\n```\n# 提取为 Google bot 🤖\n`wget --user-agent=\"Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\" https://example.com/path`\n# 转换页面上的链接🖇️\n将 HTML 中的链接转换为在您的本地版本中仍然有效。（例如 example.com/path -> localhost:8000/path）\n`wget --convert-links https://example.com/path`\n# 镜像单个网页📑\n您可以运行此命令来镜像单个网页以在本地设备上查看它。\n`wget -E -H -k -K -p --convert-links https://example.com/path`\n# 提取多个 URL 🗂️\n首先创建所有需要的 URL 并将其添加到urls.txt文件中。\n```text\nhttps://example.com/1\nhttps://example.com/2\nhttps://example.com/3\n```\n接下来，运行以下命令以提取所有 URL。\n`wget -i urls.txt`\n\n# 如何使用 wget 配置代理\n## 配置文件\n- /usr/local/etc/wgetrc 全局，适用于所有用户\n- $HOME/.wgetrc 适用于单个用户\n配置：\n```text\nhttps_proxy = http://[Proxy_Server]:[port] \nhttp_proxy = http://[Proxy_Server]:[port]\nftp_proxy = http://[Proxy_Server]:[port]\n```\n## 设置临时代理变量\n```shell\nexport http_proxy=http://[Proxy_Server]:[port]\nexport https_proxy=$http_proxy\nexport ftp_proxy=$http_proxy\n```\n## 设置到`SHELL`环境变量\n> 在 `~/.bash_profile` 或 `/etc/profile` 中添加以下行：\n```shell\nexport http_proxy=http://[Proxy_Server]:[port]\nexport https_proxy=http://[Proxy_Server]:[port]\nexport ftp_proxy=http://[Proxy_Server]:[port]\n```\n","slug":"wget-menu","published":1,"updated":"2022-06-27T02:47:50.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4w6jhab0003chr8gh9tg8oe","content":"<h1 id=\"将文件下载到特定目录📁\"><a href=\"#将文件下载到特定目录📁\" class=\"headerlink\" title=\"将文件下载到特定目录📁\"></a>将文件下载到特定目录📁</h1><p>只需将PATH替换为要保存文件的输出目录位置即可。<br><code>wget ‐P &lt;PATH&gt; https://example.com/sitemap.xml</code></p>\n<h1 id=\"重命名下载的文件📝\"><a href=\"#重命名下载的文件📝\" class=\"headerlink\" title=\"重命名下载的文件📝\"></a>重命名下载的文件📝</h1><p>要重命名文件，请将FILENAME替换为您想要的名称并运行：<br><code>wget -O &lt;FILENAME.html&gt; https://example.com/file.html</code></p>\n<h1 id=\"将自己定义为用户代理🧑‍💻\"><a href=\"#将自己定义为用户代理🧑‍💻\" class=\"headerlink\" title=\"将自己定义为用户代理🧑‍💻\"></a>将自己定义为用户代理🧑‍💻</h1><p><code>wget --user-agent=Chrome https://example.com/file.html</code></p>\n<h1 id=\"限速⏩\"><a href=\"#限速⏩\" class=\"headerlink\" title=\"限速⏩\"></a>限速⏩</h1><p>wget 可以通过实现–waitand–limit-rate命令来帮助解决这个问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--wait=1 \\\\ Wait 1 second between extractions.</span><br><span class=\"line\">--limit-rate=10K \\\\ Limit the download speed (bytes per second)</span><br></pre></td></tr></table></figure>\n<h1 id=\"提取为-Google-bot-🤖\"><a href=\"#提取为-Google-bot-🤖\" class=\"headerlink\" title=\"提取为 Google bot 🤖\"></a>提取为 Google bot 🤖</h1><p><code>wget --user-agent=&quot;Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot; https://example.com/path</code></p>\n<h1 id=\"转换页面上的链接🖇️\"><a href=\"#转换页面上的链接🖇️\" class=\"headerlink\" title=\"转换页面上的链接🖇️\"></a>转换页面上的链接🖇️</h1><p>将 HTML 中的链接转换为在您的本地版本中仍然有效。（例如 example.com/path -&gt; localhost:8000/path）<br><code>wget --convert-links https://example.com/path</code></p>\n<h1 id=\"镜像单个网页📑\"><a href=\"#镜像单个网页📑\" class=\"headerlink\" title=\"镜像单个网页📑\"></a>镜像单个网页📑</h1><p>您可以运行此命令来镜像单个网页以在本地设备上查看它。<br><code>wget -E -H -k -K -p --convert-links https://example.com/path</code></p>\n<h1 id=\"提取多个-URL-🗂️\"><a href=\"#提取多个-URL-🗂️\" class=\"headerlink\" title=\"提取多个 URL 🗂️\"></a>提取多个 URL 🗂️</h1><p>首先创建所有需要的 URL 并将其添加到urls.txt文件中。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://example.com/1</span><br><span class=\"line\">https://example.com/2</span><br><span class=\"line\">https://example.com/3</span><br></pre></td></tr></table></figure>\n<p>接下来，运行以下命令以提取所有 URL。<br><code>wget -i urls.txt</code></p>\n<h1 id=\"如何使用-wget-配置代理\"><a href=\"#如何使用-wget-配置代理\" class=\"headerlink\" title=\"如何使用 wget 配置代理\"></a>如何使用 wget 配置代理</h1><h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ul>\n<li>/usr/local/etc/wgetrc 全局，适用于所有用户</li>\n<li>$HOME/.wgetrc 适用于单个用户<br>配置：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https_proxy = http://[Proxy_Server]:[port] </span><br><span class=\"line\">http_proxy = http://[Proxy_Server]:[port]</span><br><span class=\"line\">ftp_proxy = http://[Proxy_Server]:[port]</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置临时代理变量\"><a href=\"#设置临时代理变量\" class=\"headerlink\" title=\"设置临时代理变量\"></a>设置临时代理变量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://[Proxy_Server]:[port]</span><br><span class=\"line\">export https_proxy=$http_proxy</span><br><span class=\"line\">export ftp_proxy=$http_proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置到SHELL环境变量\"><a href=\"#设置到SHELL环境变量\" class=\"headerlink\" title=\"设置到SHELL环境变量\"></a>设置到<code>SHELL</code>环境变量</h2><blockquote>\n<p>在 <code>~/.bash_profile</code> 或 <code>/etc/profile</code> 中添加以下行：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://[Proxy_Server]:[port]</span><br><span class=\"line\">export https_proxy=http://[Proxy_Server]:[port]</span><br><span class=\"line\">export ftp_proxy=http://[Proxy_Server]:[port]</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"将文件下载到特定目录📁\"><a href=\"#将文件下载到特定目录📁\" class=\"headerlink\" title=\"将文件下载到特定目录📁\"></a>将文件下载到特定目录📁</h1><p>只需将PATH替换为要保存文件的输出目录位置即可。<br><code>wget ‐P &lt;PATH&gt; https://example.com/sitemap.xml</code></p>\n<h1 id=\"重命名下载的文件📝\"><a href=\"#重命名下载的文件📝\" class=\"headerlink\" title=\"重命名下载的文件📝\"></a>重命名下载的文件📝</h1><p>要重命名文件，请将FILENAME替换为您想要的名称并运行：<br><code>wget -O &lt;FILENAME.html&gt; https://example.com/file.html</code></p>\n<h1 id=\"将自己定义为用户代理🧑‍💻\"><a href=\"#将自己定义为用户代理🧑‍💻\" class=\"headerlink\" title=\"将自己定义为用户代理🧑‍💻\"></a>将自己定义为用户代理🧑‍💻</h1><p><code>wget --user-agent=Chrome https://example.com/file.html</code></p>\n<h1 id=\"限速⏩\"><a href=\"#限速⏩\" class=\"headerlink\" title=\"限速⏩\"></a>限速⏩</h1><p>wget 可以通过实现–waitand–limit-rate命令来帮助解决这个问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--wait=1 \\\\ Wait 1 second between extractions.</span><br><span class=\"line\">--limit-rate=10K \\\\ Limit the download speed (bytes per second)</span><br></pre></td></tr></table></figure>\n<h1 id=\"提取为-Google-bot-🤖\"><a href=\"#提取为-Google-bot-🤖\" class=\"headerlink\" title=\"提取为 Google bot 🤖\"></a>提取为 Google bot 🤖</h1><p><code>wget --user-agent=&quot;Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot; https://example.com/path</code></p>\n<h1 id=\"转换页面上的链接🖇️\"><a href=\"#转换页面上的链接🖇️\" class=\"headerlink\" title=\"转换页面上的链接🖇️\"></a>转换页面上的链接🖇️</h1><p>将 HTML 中的链接转换为在您的本地版本中仍然有效。（例如 example.com/path -&gt; localhost:8000/path）<br><code>wget --convert-links https://example.com/path</code></p>\n<h1 id=\"镜像单个网页📑\"><a href=\"#镜像单个网页📑\" class=\"headerlink\" title=\"镜像单个网页📑\"></a>镜像单个网页📑</h1><p>您可以运行此命令来镜像单个网页以在本地设备上查看它。<br><code>wget -E -H -k -K -p --convert-links https://example.com/path</code></p>\n<h1 id=\"提取多个-URL-🗂️\"><a href=\"#提取多个-URL-🗂️\" class=\"headerlink\" title=\"提取多个 URL 🗂️\"></a>提取多个 URL 🗂️</h1><p>首先创建所有需要的 URL 并将其添加到urls.txt文件中。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://example.com/1</span><br><span class=\"line\">https://example.com/2</span><br><span class=\"line\">https://example.com/3</span><br></pre></td></tr></table></figure>\n<p>接下来，运行以下命令以提取所有 URL。<br><code>wget -i urls.txt</code></p>\n<h1 id=\"如何使用-wget-配置代理\"><a href=\"#如何使用-wget-配置代理\" class=\"headerlink\" title=\"如何使用 wget 配置代理\"></a>如何使用 wget 配置代理</h1><h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ul>\n<li>/usr/local/etc/wgetrc 全局，适用于所有用户</li>\n<li>$HOME/.wgetrc 适用于单个用户<br>配置：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https_proxy = http://[Proxy_Server]:[port] </span><br><span class=\"line\">http_proxy = http://[Proxy_Server]:[port]</span><br><span class=\"line\">ftp_proxy = http://[Proxy_Server]:[port]</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置临时代理变量\"><a href=\"#设置临时代理变量\" class=\"headerlink\" title=\"设置临时代理变量\"></a>设置临时代理变量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://[Proxy_Server]:[port]</span><br><span class=\"line\">export https_proxy=$http_proxy</span><br><span class=\"line\">export ftp_proxy=$http_proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置到SHELL环境变量\"><a href=\"#设置到SHELL环境变量\" class=\"headerlink\" title=\"设置到SHELL环境变量\"></a>设置到<code>SHELL</code>环境变量</h2><blockquote>\n<p>在 <code>~/.bash_profile</code> 或 <code>/etc/profile</code> 中添加以下行：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://[Proxy_Server]:[port]</span><br><span class=\"line\">export https_proxy=http://[Proxy_Server]:[port]</span><br><span class=\"line\">export ftp_proxy=http://[Proxy_Server]:[port]</span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckl8zw5qv00012aah3s0g34gs","tag_id":"ckl8zw5r100042aah78g3b2r0","_id":"ckl8zw5r8000d2aahaqr92lly"},{"post_id":"ckl8zw5qv00012aah3s0g34gs","tag_id":"ckl8zw5r500082aah5bo398ya","_id":"ckl8zw5r9000f2aaha2nb13zu"},{"post_id":"ckl8zw5qz00032aah57c59i6x","tag_id":"ckl8zw5r7000b2aahgni69r97","_id":"ckl8zw5rf000o2aahgyz39837"},{"post_id":"ckl8zw5qz00032aah57c59i6x","tag_id":"ckl8zw5r9000g2aah3h4544e5","_id":"ckl8zw5rf000q2aaha2sdarv6"},{"post_id":"ckl8zw5qz00032aah57c59i6x","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5rh000t2aahe3mz2sgq"},{"post_id":"ckl8zw5r200052aah9w07ceyf","tag_id":"ckl8zw5re000n2aahdwp291ci","_id":"ckl8zw5rp00142aah15ega0if"},{"post_id":"ckl8zw5r200052aah9w07ceyf","tag_id":"ckl8zw5rg000s2aah0w0lbftu","_id":"ckl8zw5rp00162aahfa0ad5t7"},{"post_id":"ckl8zw5r200052aah9w07ceyf","tag_id":"ckl8zw5ri000w2aah837ma6ku","_id":"ckl8zw5rq00192aah8732296w"},{"post_id":"ckl8zw5r200052aah9w07ceyf","tag_id":"ckl8zw5rm000z2aahdffp80j5","_id":"ckl8zw5rr001b2aahdtsdcz52"},{"post_id":"ckl8zw5r300062aahaxio7iox","tag_id":"ckl8zw5ro00132aahct3rb085","_id":"ckl8zw5rt001f2aah60tebwry"},{"post_id":"ckl8zw5r300062aahaxio7iox","tag_id":"ckl8zw5rq00182aaha7yl8cbc","_id":"ckl8zw5ru001h2aahhxkuca3t"},{"post_id":"ckl8zw5r400072aahgs3p2q1l","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckl8zw5ry001n2aahe7id5jdl"},{"post_id":"ckl8zw5r400072aahgs3p2q1l","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5rz001p2aahdguv95k8"},{"post_id":"ckl8zw5ry001o2aah9p24a8zp","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5s0001s2aah3t653eyr"},{"post_id":"ckl8zw5r500092aahc7dt5s6j","tag_id":"ckl8zw5rx001l2aah3of40l7e","_id":"ckl8zw5s400202aah0bxxcobb"},{"post_id":"ckl8zw5r500092aahc7dt5s6j","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckl8zw5s500222aah0ohtdmao"},{"post_id":"ckl8zw5r500092aahc7dt5s6j","tag_id":"ckl8zw5s1001v2aah36ht36ws","_id":"ckl8zw5s600252aahfing8lka"},{"post_id":"ckl8zw5s500242aah01hrezxf","tag_id":"ckl8zw5ro00132aahct3rb085","_id":"ckl8zw5s700282aah4y70buzv"},{"post_id":"ckl8zw5s500242aah01hrezxf","tag_id":"ckl8zw5rq00182aaha7yl8cbc","_id":"ckl8zw5s8002a2aahb2zgbb0z"},{"post_id":"ckl8zw5r6000a2aahaqzz7rhi","tag_id":"ckl8zw5re000n2aahdwp291ci","_id":"ckl8zw5s9002c2aahgy6g1l7v"},{"post_id":"ckl8zw5r6000a2aahaqzz7rhi","tag_id":"ckl8zw5s500232aahg3v00ygo","_id":"ckl8zw5sa002f2aah65q46rx4"},{"post_id":"ckl8zw5r7000c2aah3nms8dz2","tag_id":"ckl8zw5s700272aah1rpvb07r","_id":"ckl8zw5sb002h2aah1i7p5ya2"},{"post_id":"ckl8zw5r7000c2aah3nms8dz2","tag_id":"ckl8zw5s9002d2aahb57je6n1","_id":"ckl8zw5sb002i2aah503hg4ds"},{"post_id":"ckl8zw5r8000e2aahc9w77kxm","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckl8zw5sc002k2aahhju9a6vq"},{"post_id":"ckl8zw5r9000h2aah35mu28gm","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckl8zw5se002p2aahc7ek10gv"},{"post_id":"ckl8zw5r9000h2aah35mu28gm","tag_id":"ckl8zw5sc002l2aah8h2gamuk","_id":"ckl8zw5se002q2aahf7xc95l5"},{"post_id":"ckl8zw5r9000h2aah35mu28gm","tag_id":"ckl8zw5sd002m2aahgv6a7qyu","_id":"ckl8zw5sf002s2aahh8g11ibt"},{"post_id":"ckl8zw5r9000h2aah35mu28gm","tag_id":"ckl8zw5sd002n2aahfjenhxd8","_id":"ckl8zw5sf002t2aahcoq9fwgu"},{"post_id":"ckl8zw5ra000i2aah0ry8136x","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckl8zw5sf002v2aah0tnq33g7"},{"post_id":"ckl8zw5rc000k2aah01cw8qv1","tag_id":"ckl8zw5se002r2aahge4hdbjy","_id":"ckl8zw5sg002y2aah95tuad8p"},{"post_id":"ckl8zw5rc000k2aah01cw8qv1","tag_id":"ckl8zw5sf002u2aah872ggpgs","_id":"ckl8zw5sg002z2aaheitp6re6"},{"post_id":"ckl8zw5rc000k2aah01cw8qv1","tag_id":"ckl8zw5sf002w2aah9t4jacqn","_id":"ckl8zw5sh00312aah9xcu9eye"},{"post_id":"ckl8zw5rd000l2aahce1iar3p","tag_id":"ckl8zw5se002r2aahge4hdbjy","_id":"ckl8zw5sh00332aah0znq484m"},{"post_id":"ckl8zw5rd000l2aahce1iar3p","tag_id":"ckl8zw5sg00302aahchlh14m8","_id":"ckl8zw5si00342aahebbl6rd8"},{"post_id":"ckl8zw5rd000m2aah2kvihp1z","tag_id":"ckl8zw5sh00322aah7kfu7wl3","_id":"ckl8zw5si00362aah5vmtfli5"},{"post_id":"ckl8zw5rf000p2aahguja2kb8","tag_id":"ckl8zw5si00352aah5p5det9z","_id":"ckl8zw5sj00392aahgt9p5wz9"},{"post_id":"ckl8zw5rf000p2aahguja2kb8","tag_id":"ckl8zw5sj00372aah3bpyd1bn","_id":"ckl8zw5sk003a2aah3g8d8gom"},{"post_id":"ckl8zw5rg000r2aah72sr57fa","tag_id":"ckl8zw5sj00382aah8lus7xy6","_id":"ckl8zw5sl003e2aahdh8eek8r"},{"post_id":"ckl8zw5rg000r2aah72sr57fa","tag_id":"ckl8zw5sk003b2aahg3ms8w50","_id":"ckl8zw5sl003f2aahhep032c3"},{"post_id":"ckl8zw5rg000r2aah72sr57fa","tag_id":"ckl8zw5sk003c2aah9wmtd9v4","_id":"ckl8zw5sl003h2aah3w7pauuj"},{"post_id":"ckl8zw5rh000u2aahhumggn4x","tag_id":"ckl8zw5sk003d2aahfnwzgg5n","_id":"ckl8zw5sm003j2aahcey7hh18"},{"post_id":"ckl8zw5rh000u2aahhumggn4x","tag_id":"ckl8zw5sl003g2aah5cjx3k50","_id":"ckl8zw5sm003k2aah512q04hp"},{"post_id":"ckl8zw5rh000v2aah2lsgdo2v","tag_id":"ckl8zw5sk003d2aahfnwzgg5n","_id":"ckl8zw5sn003o2aah7ggebtxo"},{"post_id":"ckl8zw5rh000v2aah2lsgdo2v","tag_id":"ckl8zw5sm003l2aah242qcwmg","_id":"ckl8zw5sn003p2aah8115c2ve"},{"post_id":"ckl8zw5rh000v2aah2lsgdo2v","tag_id":"ckl8zw5sm003m2aah5li3ho7x","_id":"ckl8zw5sn003r2aah0shv7rxo"},{"post_id":"ckl8zw5ri000x2aah8bj83hr8","tag_id":"ckl8zw5sm003n2aahfhdjdizu","_id":"ckl8zw5sn003s2aah9lsfe7sw"},{"post_id":"ckl8zw5rj000y2aah9xij90xx","tag_id":"ckl8zw5sn003q2aah1ybwfpyp","_id":"ckl8zw5sr003x2aah03qvhhbh"},{"post_id":"ckl8zw5rj000y2aah9xij90xx","tag_id":"ckl8zw5so003t2aah7i2yg2g2","_id":"ckl8zw5sr003y2aah0yra0gq0"},{"post_id":"ckl8zw5rj000y2aah9xij90xx","tag_id":"ckl8zw5so003u2aahhfwag6hh","_id":"ckl8zw5sr00402aah29ffbpt0"},{"post_id":"ckl8zw5rj000y2aah9xij90xx","tag_id":"ckl8zw5sc002l2aah8h2gamuk","_id":"ckl8zw5sr00412aah6l8261ri"},{"post_id":"ckl8zw5rm00102aahbffzep9h","tag_id":"ckl8zw5sp003w2aahgs6q0oqk","_id":"ckl8zw5st00442aahccy56uqz"},{"post_id":"ckl8zw5rm00102aahbffzep9h","tag_id":"ckl8zw5sr003z2aah01uue3o7","_id":"ckl8zw5st00452aah8zn89fpn"},{"post_id":"ckl8zw5rm00102aahbffzep9h","tag_id":"ckl8zw5ss00422aah7wxy0uw5","_id":"ckl8zw5st00472aah17081h88"},{"post_id":"ckl8zw5rn00112aah1ydf96s4","tag_id":"ckl8zw5ss00432aah3q8l3q6g","_id":"ckl8zw5su00482aah183w5tk2"},{"post_id":"ckl8zw5rp00152aahg4r0fmzh","tag_id":"ckl8zw5st00462aahat7905nu","_id":"ckl8zw5sv004b2aahdfyme4ye"},{"post_id":"ckl8zw5rp00152aahg4r0fmzh","tag_id":"ckl8zw5su00492aah3umbf5zu","_id":"ckl8zw5sv004c2aahdbi5gd22"},{"post_id":"ckl8zw5rp00172aah2deq1i1f","tag_id":"ckl8zw5su00492aah3umbf5zu","_id":"ckl8zw5sv004e2aah9o4r0vyt"},{"post_id":"ckl8zw5rq001a2aahetk223pb","tag_id":"ckl8zw5sv004d2aahfm2j3jzs","_id":"ckl8zw5sw004h2aah3wfvchl8"},{"post_id":"ckl8zw5rq001a2aahetk223pb","tag_id":"ckl8zw5sv004f2aah26uz3zun","_id":"ckl8zw5sw004i2aah3h3k85p2"},{"post_id":"ckl8zw5rr001c2aah3xz41tjj","tag_id":"ckl8zw5sv004g2aah1jyu711w","_id":"ckl8zw5sx004m2aaheb4zf6ay"},{"post_id":"ckl8zw5rr001c2aah3xz41tjj","tag_id":"ckl8zw5sd002m2aahgv6a7qyu","_id":"ckl8zw5sx004n2aah7kyoaq3f"},{"post_id":"ckl8zw5rr001c2aah3xz41tjj","tag_id":"ckl8zw5sw004k2aah8ikodfu2","_id":"ckl8zw5sy004p2aah3ad8250f"},{"post_id":"ckl8zw5rs001e2aahghkn8se2","tag_id":"ckl8zw5sx004l2aahghdbdg25","_id":"ckl8zw5sy004r2aah5l3i0f6o"},{"post_id":"ckl8zw5rs001e2aahghkn8se2","tag_id":"ckl8zw5sw004k2aah8ikodfu2","_id":"ckl8zw5sy004s2aah9sjz5lk4"},{"post_id":"ckl8zw5rt001g2aah0w2dcdar","tag_id":"ckl8zw5sw004k2aah8ikodfu2","_id":"ckl8zw5sz004w2aah21mq02aq"},{"post_id":"ckl8zw5rt001g2aah0w2dcdar","tag_id":"ckl8zw5sx004l2aahghdbdg25","_id":"ckl8zw5t0004x2aahboqiegbh"},{"post_id":"ckl8zw5rt001g2aah0w2dcdar","tag_id":"ckl8zw5sz004u2aah8t1i71sz","_id":"ckl8zw5t0004z2aahg14d8e73"},{"post_id":"ckl8zw5ru001j2aah90h280ma","tag_id":"ckl8zw5sz004v2aahdotk1oou","_id":"ckl8zw5t000512aah78hm6ysw"},{"post_id":"ckl8zw5ru001j2aah90h280ma","tag_id":"ckl8zw5t0004y2aah6fwfhyib","_id":"ckl8zw5t100522aah7y2v1gbk"},{"post_id":"ckl8zw5rw001k2aahcle27251","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t100552aahavt3dgrz"},{"post_id":"ckl8zw5rw001k2aahcle27251","tag_id":"ckl8zw5t000502aah67ln3o1l","_id":"ckl8zw5t100562aah25ql2mbb"},{"post_id":"ckl8zw5rw001k2aahcle27251","tag_id":"ckl8zw5t100532aahcdy85wqb","_id":"ckl8zw5t300582aah5aigctzb"},{"post_id":"ckl8zw5rx001m2aah0y5117nw","tag_id":"ckl8zw5t100542aah6sld1mr3","_id":"ckl8zw5t3005a2aahcii24403"},{"post_id":"ckl8zw5rx001m2aah0y5117nw","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t3005b2aah5l8t0xz2"},{"post_id":"ckl8zw5rx001m2aah0y5117nw","tag_id":"ckl8zw5t100572aah78sibv71","_id":"ckl8zw5t4005d2aah1brcb1f6"},{"post_id":"ckl8zw5rz001q2aahf8l4h32u","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t4005e2aahgo0xc4l5"},{"post_id":"ckl8zw5rz001q2aahf8l4h32u","tag_id":"ckl8zw5t300592aah1cq9403w","_id":"ckl8zw5t4005g2aahdb7yef9n"},{"post_id":"ckl8zw5s0001t2aah8ewjgm69","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t5005h2aahczpuegk5"},{"post_id":"ckl8zw5s0001t2aah8ewjgm69","tag_id":"ckl8zw5t3005c2aah5x6u63xh","_id":"ckl8zw5t5005j2aah9qa56700"},{"post_id":"ckl8zw5s1001u2aahcap42zyt","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t5005k2aah2jwfb1zt"},{"post_id":"ckl8zw5s1001u2aahcap42zyt","tag_id":"ckl8zw5t4005f2aah1w6f4ghi","_id":"ckl8zw5t5005l2aah97itfu2w"},{"post_id":"ckl8zw5s2001w2aah60nff30q","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t7005p2aah7s8mgwbg"},{"post_id":"ckl8zw5s2001w2aah60nff30q","tag_id":"ckl8zw5t5005i2aahek07eh8z","_id":"ckl8zw5t7005q2aahff99bjac"},{"post_id":"ckl8zw5s2001w2aah60nff30q","tag_id":"ckl8zw5sc002l2aah8h2gamuk","_id":"ckl8zw5t8005s2aah1lzx0mtm"},{"post_id":"ckl8zw5s2001w2aah60nff30q","tag_id":"ckl8zw5t6005n2aah04bp9rfl","_id":"ckl8zw5t8005t2aahf167d693"},{"post_id":"ckl8zw5s2001x2aah85vn9x4k","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckl8zw5t8005v2aah7fmzh078"},{"post_id":"ckl8zw5s2001x2aah85vn9x4k","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t9005w2aah9a6924td"},{"post_id":"ckl8zw5s2001x2aah85vn9x4k","tag_id":"ckl8zw5t100572aah78sibv71","_id":"ckl8zw5t9005y2aah0lp0g3ei"},{"post_id":"ckl8zw5s4001z2aah4ryda13s","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5t9005z2aahgfrpa21x"},{"post_id":"ckl8zw5s4001z2aah4ryda13s","tag_id":"ckl8zw5t7005r2aahagp01qbe","_id":"ckl8zw5ta00612aah4p4haoc7"},{"post_id":"ckl8zw5s400212aah5in50q7z","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckl8zw5ta00622aaharif7zl3"},{"post_id":"ckl8zw5s400212aah5in50q7z","tag_id":"ckl8zw5t8005u2aahcs2ifl07","_id":"ckl8zw5ta00632aah4nnbdrwx"},{"post_id":"ckl8zw5s400212aah5in50q7z","tag_id":"ckl8zw5t9005x2aahaldmhaag","_id":"ckl8zw5tb00652aah9t72dp28"},{"post_id":"ckl8zw5s600262aahh86zdnxz","tag_id":"ckl8zw5ta00602aahcekf0cue","_id":"ckl8zw5tb00662aah5hzd5abb"},{"post_id":"ckl8zw5s700292aahayzm6con","tag_id":"ckl8zw5ta00642aah69sobctq","_id":"ckl8zw5tb00682aahga4j0z2r"},{"post_id":"ckl8zw5s8002b2aahaebi916w","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckl8zw5tc006b2aahdn6jem9j"},{"post_id":"ckl8zw5s8002b2aahaebi916w","tag_id":"ckl8zw5tb00672aah7b6x29sg","_id":"ckl8zw5tc006c2aah64j5475v"},{"post_id":"ckl8zw5s8002b2aahaebi916w","tag_id":"ckl8zw5tb00692aahdui1dntg","_id":"ckl8zw5tc006e2aah4p5g9f8o"},{"post_id":"ckl8zw5s9002e2aah0r8m3vbo","tag_id":"ckl8zw5tb006a2aah1a4f5ipw","_id":"ckl8zw5tc006f2aahbell58ap"},{"post_id":"ckl8zw5s9002e2aah0r8m3vbo","tag_id":"ckl8zw5tc006d2aahhbm546l5","_id":"ckl8zw5tc006g2aah7a516d4m"},{"post_id":"ckl8zw5tj006h2aah16be3ma4","tag_id":"ckl8zw5tk006i2aah6n4777i2","_id":"ckl8zw5tk006j2aahdz4t2oyb"},{"post_id":"cklnjxso90000e1r80wao02ij","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"cklnjxsoo0002e1r885noe7h0"},{"post_id":"cklnjxso90000e1r80wao02ij","tag_id":"cklnjxsoe0001e1r89cu6634j","_id":"cklnjxsoo0003e1r8232s079e"},{"post_id":"cklnjxso90000e1r80wao02ij","tag_id":"ckl8zw5r7000b2aahgni69r97","_id":"cklnjxsoo0004e1r86zoqcxnd"},{"post_id":"ckmaazbbc0000gm8j5jsr5o2q","tag_id":"ckmaazbbh0001gm8jayg59pt4","_id":"ckmaazbbr0003gm8jepfqelnc"},{"post_id":"ckmaazbbc0000gm8j5jsr5o2q","tag_id":"ckmaazbbr0002gm8j1ly8bqjj","_id":"ckmaazbbs0004gm8jbq1l28fu"},{"post_id":"ckrvsanl10000gsr81vtt8mk9","tag_id":"ckl8zw5rs001d2aahhik56qpn","_id":"ckrvsanlg0003gsr83x1u7m4y"},{"post_id":"ckrvsanl10000gsr81vtt8mk9","tag_id":"ckrvsanl60001gsr82oprdy2z","_id":"ckrvsanlg0004gsr80hle4zk8"},{"post_id":"ckrvsanl10000gsr81vtt8mk9","tag_id":"ckrvsanlf0002gsr8et6ba7x9","_id":"ckrvsanlg0005gsr8dphwh5f0"},{"post_id":"cktcq2kw90000qhr86rn82cji","tag_id":"ckl8zw5se002r2aahge4hdbjy","_id":"cktcq2kwn0002qhr830jo5wdj"},{"post_id":"cktcq2kw90000qhr86rn82cji","tag_id":"cktcq2kwd0001qhr802si5ecx","_id":"cktcq2kwn0003qhr80clxe6rt"},{"post_id":"ckw1hpk6x0000iqr8coyi4xcy","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"ckw1hpk7f0004iqr8aprnceti"},{"post_id":"ckw1hpk6x0000iqr8coyi4xcy","tag_id":"ckw1hpk730001iqr8d1hibtbi","_id":"ckw1hpk7f0005iqr8cbr91b74"},{"post_id":"ckw1hpk6x0000iqr8coyi4xcy","tag_id":"ckw1hpk7d0002iqr84a4n6is2","_id":"ckw1hpk7f0006iqr80c6f89u3"},{"post_id":"ckw1hpk6x0000iqr8coyi4xcy","tag_id":"ckw1hpk7e0003iqr82vhfe96d","_id":"ckw1hpk7f0007iqr8hrde1un9"},{"post_id":"cl4w6jha10001chr8h68fereh","tag_id":"ckl8zw5rb000j2aahaptkbfxt","_id":"cl4w6jhac0004chr8g6m47fd3"},{"post_id":"cl4w6jh9w0000chr83rkf6r7o","tag_id":"cl4w6jha30002chr89nes0dsi","_id":"cl4w6jhaf0008chr8c40ahz1n"},{"post_id":"cl4w6jh9w0000chr83rkf6r7o","tag_id":"ckl8zw5sj00372aah3bpyd1bn","_id":"cl4w6jhaf0009chr86fowb4dv"},{"post_id":"cl4w6jh9w0000chr83rkf6r7o","tag_id":"cl4w6jhad0005chr8dd3y0b15","_id":"cl4w6jhaf000achr855c6bymc"},{"post_id":"cl4w6jh9w0000chr83rkf6r7o","tag_id":"cl4w6jhae0006chr87iu75mne","_id":"cl4w6jhaf000bchr8fopn0n6a"},{"post_id":"cl4w6jhab0003chr8gh9tg8oe","tag_id":"cl4w6jhae0007chr8fl5g86ap","_id":"cl4w6jhaf000cchr858j8gvuq"}],"Tag":[{"name":"Android","_id":"ckl8zw5r100042aah78g3b2r0"},{"name":"DNS","_id":"ckl8zw5r500082aah5bo398ya"},{"name":"mosquitto","_id":"ckl8zw5r7000b2aahgni69r97"},{"name":"mqtt","_id":"ckl8zw5r9000g2aah3h4544e5"},{"name":"PostgreSQL","_id":"ckl8zw5rb000j2aahaptkbfxt"},{"name":"xcode","_id":"ckl8zw5re000n2aahdwp291ci"},{"name":"opencore-amr","_id":"ckl8zw5rg000s2aah0w0lbftu"},{"name":"amr","_id":"ckl8zw5ri000w2aah837ma6ku"},{"name":"ios","_id":"ckl8zw5rm000z2aahdffp80j5"},{"name":"PHP","_id":"ckl8zw5ro00132aahct3rb085"},{"name":"Swoole","_id":"ckl8zw5rq00182aaha7yl8cbc"},{"name":"FreeBSD","_id":"ckl8zw5rs001d2aahhik56qpn"},{"name":"daemontool","_id":"ckl8zw5rx001l2aah3of40l7e"},{"name":"supervisord","_id":"ckl8zw5s1001v2aah36ht36ws"},{"name":"swift3","_id":"ckl8zw5s500232aahg3v00ygo"},{"name":"FFmpeg","_id":"ckl8zw5s700272aah1rpvb07r"},{"name":"视频剪裁","_id":"ckl8zw5s9002d2aahb57je6n1"},{"name":"nginx","_id":"ckl8zw5sc002l2aah8h2gamuk"},{"name":"ipv6","_id":"ckl8zw5sd002m2aahgv6a7qyu"},{"name":"tunnelbroker","_id":"ckl8zw5sd002n2aahfjenhxd8"},{"name":"golang","_id":"ckl8zw5se002r2aahge4hdbjy"},{"name":"gin","_id":"ckl8zw5sf002u2aah872ggpgs"},{"name":"websocket","_id":"ckl8zw5sf002w2aah9t4jacqn"},{"name":"udp","_id":"ckl8zw5sg00302aahchlh14m8"},{"name":"iptables","_id":"ckl8zw5sh00322aah7kfu7wl3"},{"name":"kcp","_id":"ckl8zw5si00352aah5p5det9z"},{"name":"tun","_id":"ckl8zw5sj00372aah3bpyd1bn"},{"name":"Java","_id":"ckl8zw5sj00382aah8lus7xy6"},{"name":"kotlin","_id":"ckl8zw5sk003b2aahg3ms8w50"},{"name":"async","_id":"ckl8zw5sk003c2aah9wmtd9v4"},{"name":"laravel","_id":"ckl8zw5sk003d2aahfnwzgg5n"},{"name":"notification","_id":"ckl8zw5sl003g2aah5cjx3k50"},{"name":"Job","_id":"ckl8zw5sm003l2aah242qcwmg"},{"name":"Queue","_id":"ckl8zw5sm003m2aah5li3ho7x"},{"name":"shell","_id":"ckl8zw5sm003n2aahfhdjdizu"},{"name":"lets-encrypt","_id":"ckl8zw5sn003q2aah1ybwfpyp"},{"name":"ssl","_id":"ckl8zw5so003t2aah7i2yg2g2"},{"name":"https","_id":"ckl8zw5so003u2aahhfwag6hh"},{"name":"MacOS","_id":"ckl8zw5sp003w2aahgs6q0oqk"},{"name":"lsof","_id":"ckl8zw5sr003z2aah01uue3o7"},{"name":"netstat","_id":"ckl8zw5ss00422aah7wxy0uw5"},{"name":"设计","_id":"ckl8zw5ss00432aah3q8l3q6g"},{"name":"Kafka","_id":"ckl8zw5st00462aahat7905nu"},{"name":"NSQ","_id":"ckl8zw5su00492aah3umbf5zu"},{"name":"openWRT","_id":"ckl8zw5sv004d2aahfm2j3jzs"},{"name":"编译","_id":"ckl8zw5sv004f2aah26uz3zun"},{"name":"ip6tables","_id":"ckl8zw5sv004g2aah1jyu711w"},{"name":"OpenWRT","_id":"ckl8zw5sw004k2aah8ikodfu2"},{"name":"RaspberryPi","_id":"ckl8zw5sx004l2aahghdbdg25"},{"name":"音频","_id":"ckl8zw5sz004u2aah8t1i71sz"},{"name":"plan9","_id":"ckl8zw5sz004v2aahdotk1oou"},{"name":"架构","_id":"ckl8zw5t0004y2aah6fwfhyib"},{"name":"FDW","_id":"ckl8zw5t000502aah67ln3o1l"},{"name":"外部表","_id":"ckl8zw5t100532aahcdy85wqb"},{"name":"Ubuntu","_id":"ckl8zw5t100542aah6sld1mr3"},{"name":"initdb","_id":"ckl8zw5t100572aah78sibv71"},{"name":"索引","_id":"ckl8zw5t300592aah1cq9403w"},{"name":"Citus","_id":"ckl8zw5t3005c2aah5x6u63xh"},{"name":"性能优化","_id":"ckl8zw5t4005f2aah1w6f4ghi"},{"name":"file-fdw","_id":"ckl8zw5t5005i2aahek07eh8z"},{"name":"log","_id":"ckl8zw5t6005n2aah04bp9rfl"},{"name":"SSL","_id":"ckl8zw5t7005r2aahagp01qbe"},{"name":"SQL","_id":"ckl8zw5t8005u2aahcs2ifl07"},{"name":"JOIN","_id":"ckl8zw5t9005x2aahaldmhaag"},{"name":"net","_id":"ckl8zw5ta00602aahcekf0cue"},{"name":"财报解读","_id":"ckl8zw5ta00642aah69sobctq"},{"name":"运维","_id":"ckl8zw5tb00672aah7b6x29sg"},{"name":"性能","_id":"ckl8zw5tb00692aahdui1dntg"},{"name":"webpack","_id":"ckl8zw5tb006a2aah1a4f5ipw"},{"name":"font-awesome","_id":"ckl8zw5tc006d2aahhbm546l5"},{"name":"电子商务法","_id":"ckl8zw5tk006i2aah6n4777i2"},{"name":"lldb","_id":"cklnjxsoe0001e1r89cu6634j"},{"name":"MQTT","_id":"ckmaazbbh0001gm8jayg59pt4"},{"name":"协议","_id":"ckmaazbbr0002gm8j1ly8bqjj"},{"name":"mount","_id":"ckrvsanl60001gsr82oprdy2z"},{"name":"阿里云","_id":"ckrvsanlf0002gsr8et6ba7x9"},{"name":"部署","_id":"cktcq2kwd0001qhr802si5ecx"},{"name":"influxdb","_id":"cktu6r6i600010cr84mv63z3m"},{"name":"TimescaleDB","_id":"cktu6r6if00020cr86byj0l2z"},{"name":"InfluxDB","_id":"cktu7r9bj0000abr8ciaoh48b"},{"name":"时间线","_id":"ckw1hpk730001iqr8d1hibtbi"},{"name":"备份","_id":"ckw1hpk7d0002iqr84a4n6is2"},{"name":"恢复","_id":"ckw1hpk7e0003iqr82vhfe96d"},{"name":"linux","_id":"cl4w6jha30002chr89nes0dsi"},{"name":"tap","_id":"cl4w6jhad0005chr8dd3y0b15"},{"name":"bridge","_id":"cl4w6jhae0006chr87iu75mne"},{"name":"wget","_id":"cl4w6jhae0007chr8fl5g86ap"}]}}